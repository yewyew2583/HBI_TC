<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4022.18">
  <POU Name="DFB_FacilityAlarmAnlg" Id="{abb32086-5905-4a33-85fd-d1703e7315bb}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK DFB_FacilityAlarmAnlg
VAR_INPUT
	Sec_P					: BOOL; // Second pulse
	PV						: LREAL; // Process Value
	WarningTimer			: UDINT;
	AlarmTimer				: UDINT;
	AbortTimer				: UDINT;
	DB						: LREAL	:= 0.2; // Deadband
	LogName					: STRING;
	ModuleID				: E_ModuleID;
	EventName				: E_EventName;
	E_FacilityState			: E_FacilityState;
END_VAR

VAR_OUTPUT
	Warning					: BOOL;
	Alarm					: BOOL;
	Abort					: BOOL;
END_VAR

VAR_IN_OUT
	LowSP					: LREAL; // Low Alarm Set Point
	LowLowSP				: LREAL; // Low Low Alarm Set Point
END_VAR

VAR
	_State_Changed			: BOOL;
	
	_State					: INT;
	_Last_State				: INT;
	_TLast_State			: INT;
	
	_AbortStateTimer			: UDINT;
	_WarningStateTimer		: UDINT;
	_AlarmStateTimer		: UDINT;
	_WarningActive			: BOOL;
	_AlarmActive			: BOOL;
	_AbortActive			: BOOL;
	
	_EmptyEvent				: ST_Event;
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//	State timer
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

_State_Changed									:= _State <> _TLast_State;
_TLast_State									:= _State;

IF _State_Changed THEN
	Logging.fbDebugLog.M_nLogger(iLogLevel:= iLogVerbosity, sSource:= 'AIN Log', 
		sMessage								:= CONCAT(CONCAT(LogName, 'current state['),
														 CONCAT(INT_TO_STRING(_State), ']'))); 
END_IF

IF Sec_P THEN
	IF _WarningActive AND _WarningStateTimer < WarningTimer THEN
		_WarningStateTimer					:= _WarningStateTimer+1;
	END_IF
	
	IF _AlarmActive AND _AlarmStateTimer < AlarmTimer THEN
		_AlarmStateTimer					:= _AlarmStateTimer+1;
	END_IF
	
	IF _AbortActive AND _AbortStateTimer < AbortTimer THEN
		_AbortStateTimer					:= _AbortStateTimer+1;
	END_IF
END_IF


IF NOT _WarningActive THEN
	_WarningStateTimer						:= 0;
END_IF
IF NOT _AlarmActive THEN
	_AlarmStateTimer						:= 0;
END_IF

IF NOT _AbortActive THEN
	_AbortStateTimer						:= 0;
END_IF


///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//	Safety clamp
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

IF LowSP < LowLowSP THEN
	LowSP										:= LowLowSP;
END_IF

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//	State case
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

CASE _State OF
	0: (*Idle*)
	
		(*Action*)
		Warning									:= FALSE;
		Alarm									:= FALSE;
		Abort									:= FALSE;
		
		_AlarmActive							:= FALSE;
		_WarningActive							:= FALSE;
		_AbortActive							:= FALSE;
		
		(*Transition*)
		IF PV < LowLowSP THEN
			_State								:= 21; // Low Low Alarm - Delay
			_AlarmActive						:= TRUE;
			_WarningActive						:= TRUE;
		ELSIF PV < LowSP THEN
			_State								:= 11; // Low Alarm - Delay
			_WarningActive						:= TRUE;
		END_IF
		
	11: (*Low Alarm - Delay*)
		_Last_State								:= 11;
		
		(*Action*)
		Warning									:= TRUE;
		Alarm									:= FALSE;
		Abort									:= FALSE;
		
		(*Transition*)
		IF PV >= LowSP + DB THEN
			_State								:= 0; // Idle
		ELSIF PV < LowLowSP THEN
			_State								:= 21; // Low Low Alarm - Delay
			_AlarmActive						:= TRUE;
		ELSIF _WarningStateTimer >= WarningTimer THEN
			_State								:= 22; // Low Alarm - Send Event
		END_IF
	
	21: (*Low Low Alarm - Delay*)
		_Last_State								:= 21;
		
		(*Action*)
		Warning									:= TRUE;
		Alarm									:= TRUE;
		Abort									:= FALSE;
		
		(*Transition*)
		IF PV >= LowLowSP + DB THEN
			_State								:= 0; // Idle
		ELSIF _AlarmStateTimer >= AlarmTimer THEN
			_State								:= 24; // Low Low Alarm - Send Event
		ELSIF _WarningStateTimer >= WarningTimer THEN
			_State								:= 24; // Low Alarm - Send Event (to prevent warning timer is shorter than Alarm timer when both alarm and warning are active)
		END_IF
	
	22:	(*Low Alarm - Send Event*)
		_Last_State								:= 22;
		
		(*Action*)
		Warning									:= TRUE;
		Alarm									:= FALSE;
		Abort									:= FALSE;
		
		// Event - AbortInProgress
		CmdAndEventProcess.fbCmdAndEventUpdate.M_AddEvent(
			sLogName							:= LogName, 
			eEventName							:= EventName, 
			eModuleID							:= ModuleID, 
			iParam								:= _EmptyEvent.iParam,
			sParam								:= _EmptyEvent.sParam, 
			bParam								:= _EmptyEvent.bParam, 
			dParam								:= _EmptyEvent.dParam,
			sFailReason							:= '');
		
		(*Transition*)
		_State									:= 25; // Low Low Alarm - Check abort time
		_AbortActive							:= TRUE;
		
	24: (*Low Low Alarm - Send Event*)
		_Last_State								:= 24;
		
		(*Action*)
		Warning									:= TRUE;
		Alarm									:= TRUE;
		Abort									:= FALSE;
		
		// Event - AbortInProgress
		CmdAndEventProcess.fbCmdAndEventUpdate.M_AddEvent(
			sLogName							:= LogName, 
			eEventName							:= EventName, 
			eModuleID							:= ModuleID, 
			iParam								:= _EmptyEvent.iParam,
			sParam								:= _EmptyEvent.sParam, 
			bParam								:= _EmptyEvent.bParam, 
			dParam								:= _EmptyEvent.dParam,
			sFailReason							:= '');
		
		(*Transition*)
		_State									:= 26; // Low Low Alarm - Check abort time
		_AbortActive							:= TRUE;
		
	25: (*Low Alarm - Abort Delay*)
		_Last_State								:= 25;
		
		(*Action*)
		Warning									:= TRUE;
		Alarm									:= FALSE;
		Abort									:= FALSE;
		
		(*Transition*)
		IF _AbortStateTimer >= AbortTimer THEN
			_State								:= 40; // Abort
		END_IF
		
	26: (*Low Low Alarm - Abort Delay*)
		_Last_State								:= 26;
		
		(*Action*)
		Warning									:= TRUE;
		Alarm									:= TRUE;
		Abort									:= FALSE;
		
		(*Transition*)
		IF _AbortStateTimer >= AbortTimer THEN
			_State								:= 41; // Abort
		END_IF
		
	40: (*Low Alarm - Abort*)
		_Last_State								:= 40;
		
		(*Action*)
		Warning									:= TRUE;
		Alarm									:= FALSE;
		Abort									:= TRUE;
		
		(*Transition*)
		IF PV >= LowSP + DB THEN
			_State								:= 0; // Idle
		END_IF
		
	41: (*Lowlow Alarm - Abort*)
		_Last_State								:= 41;
		
		(*Action*)
		Warning									:= TRUE;
		Alarm									:= TRUE;
		Abort									:= TRUE;
		
		(*Transition*)
		IF PV >= LowSP + DB THEN
			_State								:= 0; // Idle
		END_IF
END_CASE]]></ST>
    </Implementation>
    <LineIds Name="DFB_FacilityAlarmAnlg">
      <LineId Id="189" Count="6" />
      <LineId Id="462" Count="0" />
      <LineId Id="198" Count="2" />
      <LineId Id="469" Count="0" />
      <LineId Id="202" Count="1" />
      <LineId Id="404" Count="2" />
      <LineId Id="458" Count="0" />
      <LineId Id="407" Count="2" />
      <LineId Id="457" Count="0" />
      <LineId Id="455" Count="1" />
      <LineId Id="474" Count="0" />
      <LineId Id="205" Count="0" />
      <LineId Id="486" Count="10" />
      <LineId Id="485" Count="0" />
      <LineId Id="207" Count="19" />
      <LineId Id="446" Count="0" />
      <LineId Id="466" Count="2" />
      <LineId Id="499" Count="0" />
      <LineId Id="443" Count="0" />
      <LineId Id="229" Count="2" />
      <LineId Id="402" Count="0" />
      <LineId Id="445" Count="0" />
      <LineId Id="232" Count="1" />
      <LineId Id="403" Count="0" />
      <LineId Id="234" Count="14" />
      <LineId Id="500" Count="0" />
      <LineId Id="249" Count="15" />
      <LineId Id="415" Count="0" />
      <LineId Id="542" Count="1" />
      <LineId Id="266" Count="22" />
      <LineId Id="437" Count="0" />
      <LineId Id="289" Count="21" />
      <LineId Id="419" Count="0" />
      <LineId Id="311" Count="51" />
      <LineId Id="128" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>