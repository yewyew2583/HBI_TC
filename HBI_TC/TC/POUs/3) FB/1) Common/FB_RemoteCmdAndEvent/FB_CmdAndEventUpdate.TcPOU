<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4022.18">
  <POU Name="FB_CmdAndEventUpdate" Id="{595e4cc8-dfbc-4125-b9a2-14af098b52a9}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK FB_CmdAndEventUpdate
VAR_INPUT
END_VAR

VAR	
	fbTCUSafeState				: FB_TCUSafeState; // Min: Not using
	fbDoorOpenClose				: FB_DoorOpenClose;
	
	bLocalRCMDarrEmpty			: BOOL;
	bLocalEventArrEmpty			: BOOL;
	bLocalPendingEventArrEmpty	: BOOL;

	iCmdStep					: INT;
	iEvtStep					: INT;
	
	iEventProcessCount          : UINT; //	To process arrPendingEventsQueue[nModuleLevel]
	iEventQueueCount            : UINT; //	To process arrPendingEventsQueue[nModuleLevel]
	iAction 					: UINT;
	n							: UINT := 1;
	_iLevel						: UINT; // For looping
	
	TDelay						: TON;
	TCCResetDelay				: TON;
	DoorLockChkTimer			: TON;
	
	CmdEmpty					: ST_Command; // to Clear the Cmd array[n]
	EmptyEvents					: ST_Event; // to Clear the event array[n]
END_VAR

VAR_IN_OUT
	bRCMDStart					: BOOL; // TCS Cmd Ready
	bEventsStart				: BOOL; // TCS Events Ready
	bEventsUpdating				: BOOL; // TCS is writing events
	arrTA_RCMD					: ARRAY [1..NO_OF_CMD_BUFFER] OF ST_Command;
	arrLocalRCMD				: ARRAY [1..NO_OF_CMD_BUFFER] OF ST_Command;
	arrTA_Events				: ARRAY [1..NO_OF_EVENT_BUFFER] OF ST_Event;
	arrLocalEvent				: ARRAY [1..NO_OF_EVENT_BUFFER] OF ST_Event;
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[
IF iAction = 0 THEN
	M_TACmdUpdate();
ELSIF iAction = 1 THEN
	M_TAEventUpdate();
END_IF

fbDoorOpenClose(); 

fbTCUSafeState(); // Min: Not using
]]></ST>
    </Implementation>
    <Method Name="CheckTaskName" Id="{d4117357-0a71-469d-8923-f3eceae84974}">
      <Declaration><![CDATA[METHOD PRIVATE CheckTaskName : BOOL
VAR_INPUT
	n					: INT;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[CheckTaskName										:=  arrLocalRCMD[n].eTaskName = E_TaskName.TIUSlideOut OR arrLocalRCMD[n].eTaskName = E_TaskName.Initialize OR 
		   												arrLocalRCMD[n].eTaskName = E_TaskName.Cancel OR arrLocalRCMD[n].eTaskName = E_TaskName.AlarmReset OR 
		   												arrLocalRCMD[n].eTaskName = E_TaskName.TIUSlideOutRetry OR arrLocalRCMD[n].eTaskName = E_TaskName.EnableModule OR 
		   												arrLocalRCMD[n].eTaskName = E_TaskName.DisableModule OR arrLocalRCMD[n].eTaskName = E_TaskName.DoorClose OR
		   												arrLocalRCMD[n].eTaskName = E_TaskName.DoorOpen OR arrLocalRCMD[n].eTaskName = E_TaskName.DPSPower OR
  		   												arrLocalRCMD[n].eTaskName = E_TaskName.TIUSlideOutCancel;]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_ActivateRecipe" Id="{b4c781e7-fdb3-4de0-9ec0-ea2fea806a38}">
      <Declaration><![CDATA[METHOD M_ActivateRecipe : BOOL
VAR_INPUT
	n							: UINT; //array number of which 30 commands to be processed
END_VAR

VAR
	bErr						: BOOL; //temporary var for error flag
	
	iLevel						: INT	:= 0;
	
	i							: UINT; //temporary variable to loop all 6 parameters
	iSendEvent					: UINT;
	
	iModuleID					: DINT;
	
	sStatus						: STRING; //temporary var for error message
	sLogName					: STRING(81);
	sModuleID					: STRING;
	
	EmptyEvents					: ST_Event; // to Clear the event array[n]
	CmdEmpty					: ST_Command;
	iEventName					: E_EventName;
END_VAR

VAR_IN_OUT
	arrRCMD						: ARRAY [1..NO_OF_CMD_BUFFER] OF ST_Command;
	arrEvent					: ARRAY [1..NO_OF_EVENT_BUFFER] OF ST_Event;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[bErr    							:= FALSE;
sStatus								:= '';

arrEvent[n]							:= EmptyEvents;
sModuleID							:= M_nModuleIDConversion(
										eModuleID:= arrRCMD[n].eModuleID,
										iLevel=> iModuleID);
										
sStatus								:= sModuleID;
bErr								:= SEL(iModuleID = 0, FALSE, TRUE);

iSendEvent 							:= SEL(bErr, 1, 2);

M_nCmdtoEvent(
	eCmd2Event_TaskName				:= arrRCMD[n].eTaskName, 
	iCmd2Event_Result				:= iSendEvent, 
	eCmd2Event_EventName			:= iEventName, 
	sCmd2Event_EventName			:= sLogName );
	
arrEvent[n].sLogName				:= sLogName;
arrEvent[n].eEventName				:= iEventName; 
arrEvent[n].eModuleID				:= arrRCMD[n].eModuleID; 
arrEvent[n].iParam					:= arrRCMD[n].iParam;
arrEvent[n].sParam					:= arrRCMD[n].sParam; 
arrEvent[n].bParam					:= arrRCMD[n].bParam; 
arrEvent[n].dParam					:= arrRCMD[n].dParam; 
arrEvent[n].sFailReason				:= sStatus;
		
arrRCMD[n]							:= CmdEmpty;]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_AddEvent" Id="{e4098936-bc68-437a-988c-fe80ffefb0f7}">
      <Declaration><![CDATA[METHOD M_AddEvent : BOOL
VAR_INPUT
	sLogName			: STRING;
	eEventName			: E_EventName;
	eModuleID			: E_ModuleID;
	iParam	 			: ARRAY [1..NO_OF_INT_PARAM] OF DINT;
	sParam				: ARRAY [1..NO_OF_STRING_PARAM] OF STRING;
	bParam				: ARRAY [1..NO_OF_BOOL_PARAM] OF BOOL;
	dParam				: ARRAY [1..NO_OF_LREAL_PARAM] OF LREAL;
	sFailReason			: STRING;	
	
	
END_VAR
VAR
	iQueueCount 		: UINT;
	iRetry 				: INT	:= 0;
	sModuleID			: STRING;
	sFormatOut			: STRING;
	sParameterStr		: STRING;	
END_VAR

]]></Declaration>
      <Implementation>
        <ST><![CDATA[iRetry 															:= 0;
WHILE arrEventUpdating = TRUE DO
	iRetry 														:= iRetry + 1;		
	IF iRetry > 100 THEN
		Logging.fbDebugLog.M_nLogger(iLogLevel:= 1, sSource:= 'AddEvent', 
			sMessage											:= 'Cannot ADD event, PLC is too busy.');
		//F_WriteLogError('Cannot add event, PLC is too busy.');
		iRetry													:= 0;
		M_AddEvent												:= FALSE;		
		RETURN; //never process if the arrEventUpdating[nModuleID] is TRUE
	END_IF
END_WHILE

arrEventUpdating												:= TRUE; //lock it, ensure no one will read and write during this update 

iQueueCount 													:= arrPendingEventsQueue.Count;
IF iQueueCount < 0 THEN
	Logging.fbDebugLog.M_nLogger(iLogLevel:= 1, sSource:= 'AddEvent', 
		sMessage												:= 'Event queue buffer count is less than 0');
	//F_WriteLogWarning(WarningMessage:='Event queue buffer count is less than 0');
	iQueueCount 												:= 0;
END_IF

iQueueCount 													:= iQueueCount + 1;	
IF iQueueCount > 255 THEN
	Logging.fbDebugLog.M_nLogger(iLogLevel:= 1, sSource:= 'AddEvent', 
		sMessage												:= 'Event queue buffer exceed 255');
	//F_WriteLogError(ErrorMessage:='Event queue buffer exceed 255');
	arrEventUpdating(*[nModuleID]*) 							:= FALSE; //release
	M_AddEvent 													:= FALSE;
	RETURN; //it means the event's buffer is full 
ELSE
	sModuleID 													:= M_nModuleIDConversion(eModuleID:=eModuleID);
	sParameterStr 												:= F_TAParamtoStr(iParam, sParam, bParam);
	fbFormat(sFormat:= '%s[%d],%s[%d],%s', arg1:= F_String(sLogName), arg2:= F_Int(eEventName), arg3:=F_String(sModuleID), 
					arg4:= F_DInt(eModuleID), arg5:=F_String(sParameterStr),sOut=> sLogName ); 
	fbFormat(sFormat:= '%s,%s', arg1:= F_String(sLogName), arg2:= F_String(sFailReason), sOut=> sFormatOut ); //logging

	arrPendingEventsQueue.Queue[iQueueCount].sLogName 			:= sLogName;
	arrPendingEventsQueue.Queue[iQueueCount].eEventName 		:= eEventName;
	arrPendingEventsQueue.Queue[iQueueCount].eModuleID  		:= eModuleID;
	arrPendingEventsQueue.Queue[iQueueCount].iParam 			:= iParam;
	arrPendingEventsQueue.Queue[iQueueCount].sParam 			:= sParam;
	arrPendingEventsQueue.Queue[iQueueCount].bParam 			:= bParam;
	arrPendingEventsQueue.Queue[iQueueCount].dParam 			:= dParam;
	arrPendingEventsQueue.Queue[iQueueCount].sFailReason 		:= sFailReason;
	arrPendingEventsQueue.Count 								:= iQueueCount;
	Logging.fbDebugLog.M_nLogger(iLogLevel:= 1, sSource:= 'Queuing Event',
		sMessage												:= sFormatOut);
END_IF

arrEventUpdating 												:= FALSE; //release
M_AddEvent 														:= TRUE;
]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_AirOnOFF" Id="{6907077e-7d9d-4836-960a-af17c54f3810}">
      <Declaration><![CDATA[METHOD M_AirOnOFF : BOOL
VAR_INPUT
	//bOn : BOOL;  	//true = on, false = off;
	
	n							: INT; //array number of which 10 commands to be processed
	iValSelection 				: INT; //1: Tester Air, 2: APAir , 3:TIUSKT Valve1, 4:TIUSKT Valve2
END_VAR

VAR
	bErr						: BOOL; //temporary var for error flag
	
   	iLevel						: UINT;
	i							: UINT; //temporary variable to loop all 6 parameters
	iSendEvent					: UINT;
	
	sMessage					: STRING;
	sDebugSource				: STRING;
	sStatus						: STRING; //temporary var for error message
	sLogName					: STRING(255);

	EmptyEvents					: ST_Event; // to Clear the event array[n]
	CmdEmpty					: ST_Command;
	iEventName					: E_EventName;
	stMultiLeveVIO				: ST_TCMultiLevel_VIO;
	//stCommonVIO				: ST_CommonSeq_VIO;
END_VAR

VAR_IN_OUT
	arrRCMD 					: ARRAY [1..NO_OF_CMD_BUFFER] OF ST_Command;
	arrEvent					: ARRAY [1..NO_OF_EVENT_BUFFER] OF ST_Event;
END_VAR

]]></Declaration>
      <Implementation>
        <ST><![CDATA[bErr    																			:= FALSE;
sStatus 																			:= '';

arrEvent[n]																			:= EmptyEvents;

M_nModuleIDConversion(
	eModuleID																		:= arrRCMD[n].eModuleID, 
	iLevel																			=> iLevel);

//moduleID
IF iLevel = 0 THEN
	bErr 																			:= TRUE; 
	sStatus 																		:= 'Wrong Module ID';
ELSE
	IF arrTCMultiLevel[iLevel].stGblParam.iProcessState = E_ProcessState.eINIT THEN
		bErr 																		:= TRUE; 
		sStatus 																	:= 'System initialising';
	ELSE
		IF iValSelection = E_AirValve.TESTER THEN 
			stMultiLeveVIO 															:= arrTCMultiLevel[iLevel].fbTCMultiLevelSeq.P_stTCMultiLevelVIO;
			//bOn
			IF arrRCMD[n].bParam[1] THEN
				stMultiLeveVIO.eTstAirSupCmd										:= E_Pwr.ON;
			ELSE
				stMultiLeveVIO.eTstAirSupCmd										:= E_Pwr.OFF;
			END_IF
			sMessage																:= SEL(arrRCMD[n].bParam[1],'Sol Off','Sol On');
			sDebugSource															:= 'Tester Air Supply';
			arrTCMultiLevel[iLevel].fbTCMultiLevelSeq.P_stTCMultiLevelVIO 			:= stMultiLeveVIO;
			Logging.fbDebugLog.M_nLogger(iLogLevel:= 1, sSource:= sDebugSource, 
				sMessage															:= sMessage);
		ELSIF iValSelection = E_AirValve.AP THEN 
			stMultiLeveVIO 															:= arrTCMultiLevel[iLevel].fbTCMultiLevelSeq.P_stTCMultiLevelVIO;
			//bOn
			IF arrRCMD[n].bParam[1] THEN
				stMultiLeveVIO.eAPAirSupCmd 										:= E_Pwr.ON;
			ELSE
				stMultiLeveVIO.eAPAirSupCmd 										:= E_Pwr.OFF;
			END_IF
			sMessage																:= SEL(arrRCMD[n].bParam[1],'Sol Off','Sol On');
			sDebugSource															:= 'AP Air Supply';
			arrTCMultiLevel[iLevel].fbTCMultiLevelSeq.P_stTCMultiLevelVIO 			:= stMultiLeveVIO;
			Logging.fbDebugLog.M_nLogger(iLogLevel:= 1, sSource:= sDebugSource, 
				sMessage															:= sMessage);
		ELSIF iValSelection = E_AirValve.TIU_SKT1 THEN 
			stMultiLeveVIO 															:= arrTCMultiLevel[iLevel].fbTCMultiLevelSeq.P_stTCMultiLevelVIO;
			//bOn
			IF arrRCMD[n].bParam[1] THEN
				stMultiLeveVIO.eTIUSktAir1Cmd 										:= E_Pwr.ON;
			ELSE
				stMultiLeveVIO.eTIUSktAir1Cmd 										:= E_Pwr.OFF;
			END_IF
			sMessage																:= SEL(arrRCMD[n].bParam[1],'Sol Off','Sol On');
			sDebugSource															:= 'TIU_SKT_AIR_1';
			arrTCMultiLevel[iLevel].fbTCMultiLevelSeq.P_stTCMultiLevelVIO			:= stMultiLeveVIO;
			Logging.fbDebugLog.M_nLogger(iLogLevel:= 1, sSource:= sDebugSource, 
				sMessage															:= sMessage);
			
		ELSIF iValSelection = E_AirValve.TIU_SKT2 THEN 
			stMultiLeveVIO 															:= arrTCMultiLevel[iLevel].fbTCMultiLevelSeq.P_stTCMultiLevelVIO;
			//bOn
			IF arrRCMD[n].bParam[1] THEN
				stMultiLeveVIO.eTIUSktAir2Cmd										:= E_Pwr.ON;
			ELSE
				stMultiLeveVIO.eTIUSktAir2Cmd 										:= E_Pwr.OFF;
			END_IF
			sMessage																:= SEL(arrRCMD[n].bParam[1],'Sol Off','Sol On');
			sDebugSource															:= 'TIU_SKT_AIR_2';
			arrTCMultiLevel[iLevel].fbTCMultiLevelSeq.P_stTCMultiLevelVIO 			:= stMultiLeveVIO;
			Logging.fbDebugLog.M_nLogger(iLogLevel:= 1, sSource:= sDebugSource, 
				sMessage															:= sMessage);
		END_IF	
	END_IF
END_IF

//send event to TA
IF bErr THEN
	iSendEvent 																		:= 2;
ELSE
	iSendEvent 																		:= 1;
END_IF

M_nCmdtoEvent(
	eCmd2Event_TaskName																:= arrRCMD[n].eTaskName, 
	iCmd2Event_Result																:= iSendEvent, 
	eCmd2Event_EventName															:= iEventName, 
	sCmd2Event_EventName															:= sLogName);
	
arrEvent[n].sLogName																:= sLogName;
arrEvent[n].eEventName																:= iEventName; 
arrEvent[n].eModuleID																:= arrRCMD[n].eModuleID; 
arrEvent[n].iParam																	:= arrRCMD[n].iParam;
arrEvent[n].sParam																	:= arrRCMD[n].sParam; 
arrEvent[n].bParam																	:= arrRCMD[n].bParam; 
arrEvent[n].dParam																	:= arrRCMD[n].dParam; 
arrEvent[n].sFailReason																:= sStatus;

arrRCMD[n]																			:= CmdEmpty;]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_AlarmReset" Id="{10afc52e-c32f-4a7b-9ba4-29ad15c4dab3}">
      <Declaration><![CDATA[METHOD M_AlarmReset : BOOL
VAR_INPUT
	n						: UINT; //array number of which 30 commands to be processed
END_VAR

VAR
	bErr					: BOOL; //temporary var for error flag
	
	iLevel					: INT := 0;
	
	i						: UINT; //temporary variable to loop all 6 parameters
	iSendEvent				: UINT;
	
	iModuleID				: DINT;
	iAlarmID				: DINT;
	
	sStatus					: STRING; //temporary var for error message
	sLogName				: STRING(81);
	sModuleID				: STRING;
	
	EmptyEvents				: ST_Event; // to Clear the event array[n]
	CmdEmpty				: ST_Command;
	iEventName				: E_EventName;
	stTCMainVIO				: ST_TCColumn_VIO;
	stTCDbColVIO			: ST_DebugColumnVIO;
END_VAR

VAR_IN_OUT
	arrRCMD					: ARRAY [1..NO_OF_CMD_BUFFER] OF ST_Command;
	arrEvent				: ARRAY [1..NO_OF_EVENT_BUFFER] OF ST_Event;
END_VAR

]]></Declaration>
      <Implementation>
        <ST><![CDATA[bErr    															:= FALSE;
sStatus 															:= '';

arrEvent[n] 														:= EmptyEvents;
sModuleID 															:= M_nModuleIDConversion(eModuleID:=arrRCMD[n].eModuleID,iLevel=>iModuleID);
iAlarmID 															:= arrRCMD[n].iParam[1];

IF iModuleID <> 0 THEN
	IF iModuleID < (NO_OF_LEVEL + 1) THEN
		//FOR i:=1 TO NO_OF_LEVEL DO
		//arrTCMultiLevel[iModuleID].fbTCMultiLevelSeq.P_stParam.bAlarmClear:=TRUE;
		arrTCMultiLevel[iModuleID].stGblParam.iAlmIDToRset			:= iAlarmID;
		
		//Clear Alarm OutSide First;
		arrTIIAlarm[iModuleID].P_ErrClear							:= TRUE; //reset alarm state timer to be trigger in FB tii alarm
		arrTCMultiLevel[iModuleID].fbTCMultiLevelSeq.P_ErrClear		:= TRUE;
		arrTCMultiLevel[iModuleID].fbTCMultiLevelSeq.M_SeqAlmRset(
			subMod													:= iModuleID,
			almID													:= arrTCMultiLevel[iModuleID].stGblParam.iAlmIDToRset,
			isRsetAll												:= bHMIResetAllAlarm);
			
		//arrTCMultiLevel[iModuleID].stGblParam.bAlarmClear:=TRUE;
		
		arrTCShuttlePOC[iModuleID].stGblParam.iAlmIDToRset			:= iAlarmID;
		//Clear Alarm OutSide First;
		arrTCShuttlePOC[iModuleID].fbTCShuttlePOCSeq.P_ErrClear		:= TRUE;
		arrTCShuttlePOC[iModuleID].fbTCShuttlePOCSeq.M_SeqAlmRset(
			subMod													:= iModuleID,
			almID													:= arrTCMultiLevel[iModuleID].stGblParam.iAlmIDToRset,
			isRsetAll												:= bHMIResetAllAlarm);
		//arrTCShuttlePOC[iModuleID].stGblParam.bAlarmClear:=TRUE;
		M_AlarmReset												:= TRUE;
		//END_FOR
	ELSIF iModuleID = 99 THEN
		IF bDebugStation THEN 
			stTCDbColVIO 											:= fbDebugColumn.P_stVIO;
			stTCDbColVIO.iAlmIDToRset								:= iAlarmID;
			stTCDbColVIO.bDebugColErrClear 							:= TRUE;
			fbDebugColumn.P_stVIO 									:= stTCDbColVIO;
			M_AlarmReset											:= FALSE;
		ELSE	
			stTCMainVIO 											:= fbTCColumn.P_stTCColumnVIO;
			stTCMainVIO.iAlmIDToRset								:= iAlarmID; // Err Id
			stTCMainVIO.bColumnErrClear								:= TRUE; // Err Clear Bit
			fbTCColumn.P_stTCColumnVIO								:= stTCMainVIO;
			M_AlarmReset											:= FALSE;
		END_IF

	ELSE
		sStatus														:= 'WrongModuleID';
	END_IF
END_IF

iSendEvent 															:= SEL(bErr, 1, 2);
M_nCmdtoEvent(
	eCmd2Event_TaskName												:= arrRCMD[n].eTaskName, 
	iCmd2Event_Result												:= iSendEvent, 
	eCmd2Event_EventName											:= iEventName, 
	sCmd2Event_EventName											:= sLogName
);
	
arrEvent[n].sLogName												:= sLogName;
arrEvent[n].eEventName												:= iEventName; 
arrEvent[n].eModuleID												:= arrRCMD[n].eModuleID; 
arrEvent[n].iParam													:= arrRCMD[n].iParam;
arrEvent[n].sParam													:= arrRCMD[n].sParam; 
arrEvent[n].bParam													:= arrRCMD[n].bParam; 
arrEvent[n].dParam													:= arrRCMD[n].dParam; 
arrEvent[n].sFailReason												:= sStatus;
		
arrRCMD[n]															:= CmdEmpty;]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_DoorOpenClose" Id="{b5e53960-eb00-45b9-aef2-b703945bd1f9}">
      <Declaration><![CDATA[METHOD M_DoorOpenClose : BOOL
VAR_INPUT
	n					: INT; // array number of which 10 commands to be processed
	bLock				: BOOL; //DoorOpen=Unlock(false), DoorClose=Lock(true)
	bFrontDoor			: BOOL;
END_VAR

VAR
	bErr				: BOOL; //temporary var for error flag
	
   	iLevel				: UINT; // UINT to represent module ID
	i					: UINT; //temporary variable to loop all 6 parameters
	iSendEvent			: UINT;
	
	sStatus				: STRING;     //temporary var for error message
	sLogName			: STRING(255);
	eFailLogName		: STRING;
	ePassLogName		: STRING;

	EmptyEvents			: ST_Event; // to Clear the event array[n]
	CmdEmpty			: ST_Command;
	iEventName			: E_EventName;
	eFailEvent			: E_EventName;
	ePassEvent			: E_EventName;
	stMLVIO				: ST_TCMultiLevel_VIO;
	stMultiLevel		: ST_TCMultiLevel;
	//stCommonVIO 		: ST_CommonSeq_VIO;
END_VAR

VAR_IN_OUT
	arrRCMD 			: ARRAY [1..NO_OF_CMD_BUFFER] OF ST_Command;
	arrEvent			: ARRAY [1..NO_OF_EVENT_BUFFER] OF ST_Event;
END_VAR

]]></Declaration>
      <Implementation>
        <ST><![CDATA[bErr    													:= FALSE;
sStatus 													:= '';
bFrontDoor													:= FALSE;

arrEvent[n]													:= EmptyEvents;

M_nModuleIDConversion(
	eModuleID												:= arrRCMD[n].eModuleID, 
	iLevel													=> iLevel);

//moduleid 
IF iLevel = 0 THEN
	bErr													:= TRUE; 
	sStatus													:= 'Wrong Module ID';
ELSE
	// Front door module ID
	IF ilevel > 100 THEN
		bFrontDoor											:= TRUE;
		stMLVIO												:= arrTCMultiLevel[iLevel - 100].fbTCMultiLevelSeq.P_stTCMultiLevelVIO;
		stMultiLevel										:= arrTCMultiLevel[iLevel - 100];
	ELSE
		stMLVIO												:= arrTCMultiLevel[iLevel].fbTCMultiLevelSeq.P_stTCMultiLevelVIO;	
		stMultiLevel										:= arrTCMultiLevel[iLevel];
	END_IF

	// Make sure not processing other command
	IF stMultiLevel.stGblParam.iProcessState = E_ProcessState.eINIT OR stMultiLevel.stGblParam.iProcessState = E_ProcessState.eLOADG THEN
		// Unlock door
		IF bLock = FALSE THEN
			bErr 											:= TRUE; 
			sStatus 										:= 'Cannot open/unlock door, TC is initialising';
		END_IF
	ELSE
		M_nCmdtoEvent(
			eCmd2Event_TaskName								:= arrRCMD[n].eTaskName, 
			iCmd2Event_Result								:= 2, 
			eCmd2Event_EventName							:= eFailEvent, 
			sCmd2Event_EventName							:= eFailLogName);
			
		M_nCmdtoEvent(
			eCmd2Event_TaskName								:= arrRCMD[n].eTaskName, 
			iCmd2Event_Result								:= 1, 
			eCmd2Event_EventName							:= ePassEvent, 
			sCmd2Event_EventName							:= ePassLogName);
			
		fbDoorOpenClose.Execute(
			n												:= n,
			iLevel											:= iLevel, 
			bLock											:= bLock, 
			bFrontDoor										:= bFrontDoor, 
			eFailEvent										:= eFailEvent,
			ePassEvent										:= ePassEvent,
			eFailLogName									:= eFailLogName,
			ePassLogName									:= ePassLogName, 
			arrRCMD											:= arrRCMD,
			arrEvent										:= arrEvent,);
		
		arrRCMD[n]											:= CmdEmpty;
		RETURN;
	END_IF
END_IF	

//send event to TA
iSendEvent 													:= SEL(bErr, 1, 2);
M_nCmdtoEvent(
	eCmd2Event_TaskName										:= arrRCMD[n].eTaskName, 
	iCmd2Event_Result										:= iSendEvent, 
	eCmd2Event_EventName									:= iEventName, 
	sCmd2Event_EventName									:= sLogName);

arrEvent[n].sLogName										:= sLogName;
arrEvent[n].eEventName										:= iEventName; 
arrEvent[n].eModuleID										:= arrRCMD[n].eModuleID; 
arrEvent[n].iParam											:= arrRCMD[n].iParam;
arrEvent[n].sParam											:= arrRCMD[n].sParam; 
arrEvent[n].bParam											:= arrRCMD[n].bParam; 
arrEvent[n].dParam											:= arrRCMD[n].dParam; 
arrEvent[n].sFailReason										:= sStatus;

arrRCMD[n]													:= CmdEmpty;]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_EnableModule" Id="{5ca64729-da6a-40e5-bf34-742dfdf88fdb}">
      <Declaration><![CDATA[METHOD M_EnableModule : BOOL
VAR_INPUT
	n									: INT;  
END_VAR

VAR
	bErr								: BOOL; // var for error flag
	
	iTCCellSubModules					: INT;
	
	iLevel								: UINT	:= 0;
	i									: UINT; // variable to loop all 6 parameters
	iSendEvent							: UINT;
	
	sStatus								: STRING;     // var for error message
	sLogName							: STRING(255);
	sModuleID							: STRING;
	
	EmptyEvents							: ST_Event; // to Clear the event array[n]
	CmdEmpty							: ST_Command;
	requestedState						: E_State	:= E_State.eEnabled;
	iEventName							: E_EventName;
END_VAR

VAR_IN_OUT
	arrRCMD								: ARRAY [1..NO_OF_CMD_BUFFER] OF ST_Command;
	arrEvent							: ARRAY [1..NO_OF_EVENT_BUFFER] OF ST_Event;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[bErr													:= FALSE;
sStatus													:= '';

arrEvent[n]												:= EmptyEvents;

//sModuleID:=M_nModuleIDConversion(eModuleID:=arrRCMD[n].eModuleID,iLevel=>iLevel);
sModuleID												:= M_EnDisSubModuleIDConversion(
															eModuleID := arrRCMD[n].eModuleID,
															iLevel => iLevel,
															iTCCellSubMod => iTCCellSubModules);

IF arrRCMD[n].eTaskName = E_TaskName.EnableModule THEN
	requestedState  									:= E_State.eEnabled;
	//bButtonAlwaysOn := TRUE;
	//eEpt := E_EPT.eIdle;
ELSIF arrRCMD[n].eTaskName = E_TaskName.DisableModule THEN
	requestedState  									:= E_State.eDisabled;
	//bButtonAlwaysOn := FALSE;
	//eEpt := E_EPT.eBlocked;
END_IF

IF bErr THEN
	;
ELSE
	//arrTCLevelState[iLevel]:= requestedState;
	
	//For New Updated EPT State and Module Enable/Disable State;
	//1:Tester, 2: TCU, 3:TierII
	CASE iTCCellSubModules OF
		1: (*Tester*)
			TC_ModuleState[iLevel].Tester 				:= requestedState;
		2: (*TC*)
			TC_ModuleState[iLevel].TCSite[1].TCU 		:= requestedState;
		3: (*Tier II*)
			TC_ModuleState[iLevel].TCSite[1].TIERII 	:= requestedState;
	END_CASE
	
	(*
	ELSE
		bErr:=TRUE;
		sStatus := 'Unsupported submodule ID'; //currently no enable failed event.
	*)
	
END_IF

//send event to TA
iSendEvent												:= SEL(bErr, 1, 2);

M_nCmdtoEvent(
	eCmd2Event_TaskName									:= arrRCMD[n].eTaskName, 
	iCmd2Event_Result									:= iSendEvent, 
	eCmd2Event_EventName								:= iEventName, 
	sCmd2Event_EventName								:= sLogName);
	
arrEvent[n].sLogName									:= sLogName;
arrEvent[n].eEventName									:= iEventName; 
arrEvent[n].eModuleID									:= arrRCMD[n].eModuleID; 
arrEvent[n].iParam										:= arrRCMD[n].iParam;
arrEvent[n].sParam										:= arrRCMD[n].sParam; 
arrEvent[n].bParam										:= arrRCMD[n].bParam; 
arrEvent[n].dParam										:= arrRCMD[n].dParam; 
arrEvent[n].sFailReason									:= sStatus;

arrRCMD[n]												:= CmdEmpty;]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_EnDisSubModuleIDConversion" Id="{8206969f-b1c6-4317-a25b-10462f2b58e8}">
      <Declaration><![CDATA[METHOD M_EnDisSubModuleIDConversion : STRING
VAR_INPUT
	eModuleID 				: E_ModuleID ;
END_VAR

VAR_OUTPUT
	iLevel					: INT;
	iModuleID 				: INT; 
	iTCCellSubMod			: INT	:= 0; //0 unknown,1 TCU, 2 TII;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[CASE eModuleID OF
	//Tester
	E_ModuleID.CELL_LA101_TESTER: 
		iLevel														:= 1; 
		iModuleID													:= 1; 
		M_EnDisSubModuleIDConversion 								:= 'CELL_LA101_TESTER'; 
		iTCCellSubMod												:= 1;
	E_ModuleID.CELL_LB101_TESTER:  
		iLevel														:= 1; 
		iModuleID													:= 2; 
		M_EnDisSubModuleIDConversion 								:= 'CELL_LB101_TESTER'; 
		iTCCellSubMod												:= 1;
	E_ModuleID.CELL_LC101_TESTER:  
		iLevel														:= 1; 
		iModuleID													:= 3; 
		M_EnDisSubModuleIDConversion 								:= 'CELL_LC101_TESTER'; 
		iTCCellSubMod												:= 1;
	E_ModuleID.CELL_RA101_TESTER:  
		iLevel														:= 1; 
		iModuleID													:= 4; 
		M_EnDisSubModuleIDConversion 								:= 'CELL_RA101_TESTER'; 
		iTCCellSubMod												:= 1;
	E_ModuleID.CELL_RB101_TESTER:  
		iLevel														:= 1; 
		iModuleID													:= 5; 
		M_EnDisSubModuleIDConversion 								:= 'CELL_RB101_TESTER'; 
		iTCCellSubMod												:= 1;
	E_ModuleID.CELL_RC101_TESTER:  
		iLevel														:= 1; 
		iModuleID													:= 6; 
		M_EnDisSubModuleIDConversion 								:= 'CELL_RC101_TESTER'; 
		iTCCellSubMod												:= 1;                                                                          
	E_ModuleID.CELL_LA201_TESTER:  
		iLevel														:= 2; 
		iModuleID													:= 1; 
		M_EnDisSubModuleIDConversion 								:= 'CELL_LA201_TESTER'; 
		iTCCellSubMod												:= 1;
	E_ModuleID.CELL_LB201_TESTER:  
		iLevel														:= 2; 
		iModuleID													:= 2; 
		M_EnDisSubModuleIDConversion 								:= 'CELL_LB201_TESTER'; 
		iTCCellSubMod												:= 1;
	E_ModuleID.CELL_LC201_TESTER:  
		iLevel														:= 2; 
		iModuleID													:= 3; 
		M_EnDisSubModuleIDConversion 								:= 'CELL_LC201_TESTER'; 
		iTCCellSubMod												:= 1;
	E_ModuleID.CELL_RA201_TESTER:  
		iLevel														:= 2; 
		iModuleID													:= 4; 
		M_EnDisSubModuleIDConversion 								:= 'CELL_RA201_TESTER'; 
		iTCCellSubMod												:= 1;
	E_ModuleID.CELL_RB201_TESTER:  
		iLevel														:= 2; 
		iModuleID													:= 5; 
		M_EnDisSubModuleIDConversion 								:= 'CELL_RB201_TESTER'; 
		iTCCellSubMod												:= 1;
	E_ModuleID.CELL_RC201_TESTER:  
		iLevel														:= 2; 
		iModuleID													:= 6; 
		M_EnDisSubModuleIDConversion 								:= 'CELL_RC201_TESTER'; 
		iTCCellSubMod												:= 1;                                                                                       
	E_ModuleID.CELL_LA301_TESTER:  
		iLevel														:= 3; 
		iModuleID													:= 1; 
		M_EnDisSubModuleIDConversion 								:= 'CELL_LA301_TESTER'; 
		iTCCellSubMod												:= 1;
	E_ModuleID.CELL_LB301_TESTER:  
		iLevel														:= 3; 
		iModuleID													:= 2; 
		M_EnDisSubModuleIDConversion 								:= 'CELL_LB301_TESTER'; 
		iTCCellSubMod												:= 1;
	E_ModuleID.CELL_LC301_TESTER:  
		iLevel														:= 3; 
		iModuleID													:= 3; 
		M_EnDisSubModuleIDConversion 								:= 'CELL_LC301_TESTER'; 
		iTCCellSubMod												:= 1;
	E_ModuleID.CELL_RA301_TESTER:  
		iLevel														:= 3; 
		iModuleID													:= 4; 
		M_EnDisSubModuleIDConversion 								:= 'CELL_RA301_TESTER'; 
		iTCCellSubMod												:= 1;
	E_ModuleID.CELL_RB301_TESTER:  
		iLevel														:= 3; 
		iModuleID													:= 5; 
		M_EnDisSubModuleIDConversion 								:= 'CELL_RB301_TESTER'; 
		iTCCellSubMod												:= 1;
	E_ModuleID.CELL_RC301_TESTER:  
		iLevel														:= 3; 
		iModuleID													:= 6; 
		M_EnDisSubModuleIDConversion 								:= 'CELL_RC301_TESTER'; 
		iTCCellSubMod												:= 1;                                                                         
	E_ModuleID.CELL_LA401_TESTER:  
		iLevel														:= 4; 
		iModuleID													:= 1; 
		M_EnDisSubModuleIDConversion 								:= 'CELL_LA401_TESTER'; 
		iTCCellSubMod												:= 1;
	E_ModuleID.CELL_LB401_TESTER:  
		iLevel														:= 4; 
		iModuleID													:= 2; 
		M_EnDisSubModuleIDConversion 								:= 'CELL_LB401_TESTER'; 
		iTCCellSubMod												:= 1;
	E_ModuleID.CELL_LC401_TESTER:  
		iLevel														:= 4; 
		iModuleID													:= 3; 
		M_EnDisSubModuleIDConversion 								:= 'CELL_LC401_TESTER'; 
		iTCCellSubMod												:= 1;
	E_ModuleID.CELL_RA401_TESTER:  
		iLevel														:= 4; 
		iModuleID													:= 4; 
		M_EnDisSubModuleIDConversion 								:= 'CELL_RA401_TESTER'; 
		iTCCellSubMod												:= 1;
	E_ModuleID.CELL_RB401_TESTER:  
		iLevel														:= 4; 
		iModuleID													:= 5; 
		M_EnDisSubModuleIDConversion 								:= 'CELL_RB401_TESTER'; 
		iTCCellSubMod												:= 1;
	E_ModuleID.CELL_RC401_TESTER:  
		iLevel														:= 4; 
		iModuleID													:= 6; 
		M_EnDisSubModuleIDConversion 								:= 'CELL_RC401_TESTER'; 
		iTCCellSubMod												:= 1;                             
	E_ModuleID.CELL_LA501_TESTER:  
		iLevel														:= 5; 
		iModuleID													:= 1; 
		M_EnDisSubModuleIDConversion 								:= 'CELL_LA501_TESTER'; 
		iTCCellSubMod												:= 1;
	E_ModuleID.CELL_LB501_TESTER:  
		iLevel														:= 5; 
		iModuleID													:= 2;  
		M_EnDisSubModuleIDConversion 								:= 'CELL_LB501_TESTER'; 
		iTCCellSubMod												:= 1;
	E_ModuleID.CELL_LC501_TESTER:  
		iLevel														:= 5; 
		iModuleID													:= 3;  
		M_EnDisSubModuleIDConversion 								:= 'CELL_LC501_TESTER'; 
		iTCCellSubMod												:= 1;
	E_ModuleID.CELL_RA501_TESTER:  
		iLevel														:= 5; 
		iModuleID													:= 4;  
		M_EnDisSubModuleIDConversion 								:= 'CELL_RA501_TESTER'; 
		iTCCellSubMod												:= 1;
	E_ModuleID.CELL_RB501_TESTER:  
		iLevel														:= 5; 
		iModuleID													:= 5;  
		M_EnDisSubModuleIDConversion 								:= 'CELL_RB501_TESTER'; 
		iTCCellSubMod												:= 1;
	E_ModuleID.CELL_RC501_TESTER:  
		iLevel														:= 5; 
		iModuleID													:= 6;  
		M_EnDisSubModuleIDConversion 								:= 'CELL_RC501_TESTER'; 
		iTCCellSubMod												:= 1;
                                                                                                      
	E_ModuleID.CELL_LA601_TESTER:  
		iLevel														:= 6; 
		iModuleID													:= 1;  
		M_EnDisSubModuleIDConversion 								:= 'CELL_LA601_TESTER'; 
		iTCCellSubMod												:= 1;
	E_ModuleID.CELL_LB601_TESTER:  
		iLevel														:= 6; 
		iModuleID													:= 2;  
		M_EnDisSubModuleIDConversion 								:= 'CELL_LB601_TESTER'; 
		iTCCellSubMod												:= 1;
	E_ModuleID.CELL_LC601_TESTER:  
		iLevel														:= 6; 
		iModuleID													:= 3;  
		M_EnDisSubModuleIDConversion 								:= 'CELL_LC601_TESTER'; 
		iTCCellSubMod												:= 1;
	E_ModuleID.CELL_RA601_TESTER:  
		iLevel														:= 6; 
		iModuleID													:= 4;  
		M_EnDisSubModuleIDConversion 								:= 'CELL_RA601_TESTER'; 
		iTCCellSubMod												:= 1;
	E_ModuleID.CELL_RB601_TESTER:  
		iLevel														:= 6; 
		iModuleID													:= 5;  
		M_EnDisSubModuleIDConversion 								:= 'CELL_RB601_TESTER'; 
		iTCCellSubMod												:= 1;
	E_ModuleID.CELL_RC601_TESTER:  
		iLevel														:= 6; 
		iModuleID													:= 6;  
		M_EnDisSubModuleIDConversion 								:= 'CELL_RC601_TESTER'; 
		iTCCellSubMod												:= 1;	
	E_ModuleID.CELL_LA101_AP:  
		iLevel														:= 1; 
		iModuleID													:= 1;  
		M_EnDisSubModuleIDConversion 								:= 'CELL_LA101_AP'; 
		iTCCellSubMod												:= 2;
	E_ModuleID.CELL_LB101_AP:  
		iLevel														:= 1; 
		iModuleID													:= 2;  
		M_EnDisSubModuleIDConversion 								:= 'CELL_LB101_AP'; 
		iTCCellSubMod												:= 2;
	E_ModuleID.CELL_LC101_AP:  
		iLevel														:= 1; 
		iModuleID													:= 3;  
		M_EnDisSubModuleIDConversion 								:= 'CELL_LC101_AP'; 
		iTCCellSubMod												:= 2;
	E_ModuleID.CELL_RA101_AP:  
		iLevel														:= 1; 
		iModuleID													:= 4;  
		M_EnDisSubModuleIDConversion 								:= 'CELL_RA101_AP'; 
		iTCCellSubMod												:= 2;
	E_ModuleID.CELL_RB101_AP:  
		iLevel														:= 1; 
		iModuleID													:= 5;  
		M_EnDisSubModuleIDConversion 								:= 'CELL_RB101_AP'; 
		iTCCellSubMod												:= 2;
	E_ModuleID.CELL_RC101_AP:  
		iLevel														:= 1; 
		iModuleID													:= 6;  
		M_EnDisSubModuleIDConversion 								:= 'CELL_RC101_AP'; 
		iTCCellSubMod												:= 2;                                                                             
	E_ModuleID.CELL_LA201_AP:  
		iLevel														:= 2; 
		iModuleID													:= 1;  
		M_EnDisSubModuleIDConversion 								:= 'CELL_LA201_AP'; 
		iTCCellSubMod												:= 2;
	E_ModuleID.CELL_LB201_AP:  
		iLevel														:= 2; 
		iModuleID													:= 2;  
		M_EnDisSubModuleIDConversion 								:= 'CELL_LB201_AP'; 
		iTCCellSubMod												:= 2;
	E_ModuleID.CELL_LC201_AP:  
		iLevel														:= 2; 
		iModuleID													:= 3;  
		M_EnDisSubModuleIDConversion 								:= 'CELL_LC201_AP'; 
		iTCCellSubMod												:= 2;
	E_ModuleID.CELL_RA201_AP:  
		iLevel														:= 2; 
		iModuleID													:= 4;  
		M_EnDisSubModuleIDConversion 								:= 'CELL_RA201_AP'; 
		iTCCellSubMod												:= 2;
	E_ModuleID.CELL_RB201_AP:  
		iLevel														:= 2; 
		iModuleID													:= 5; 
		M_EnDisSubModuleIDConversion 								:= 'CELL_RB201_AP'; 
		iTCCellSubMod												:= 2;
	E_ModuleID.CELL_RC201_AP:  
		iLevel														:= 2; 
		iModuleID													:= 6;  
		M_EnDisSubModuleIDConversion 								:= 'CELL_RC201_AP'; 
		iTCCellSubMod												:= 2;                                                                           
	E_ModuleID.CELL_LA301_AP:  
		iLevel														:= 3; 
		iModuleID													:= 1;  
		M_EnDisSubModuleIDConversion 								:= 'CELL_LA301_AP'; 
		iTCCellSubMod												:= 2;
	E_ModuleID.CELL_LB301_AP:  
		iLevel														:= 3; 
		iModuleID													:= 2;  
		M_EnDisSubModuleIDConversion 								:= 'CELL_LB301_AP'; 
		iTCCellSubMod												:= 2;
	E_ModuleID.CELL_LC301_AP:  
		iLevel														:= 3; 
		iModuleID													:= 3;  
		M_EnDisSubModuleIDConversion 								:= 'CELL_LC301_AP'; 
		iTCCellSubMod												:= 2;
	E_ModuleID.CELL_RA301_AP:  
		iLevel														:= 3; 
		iModuleID													:= 4;  
		M_EnDisSubModuleIDConversion 								:= 'CELL_RA301_AP'; 
		iTCCellSubMod												:= 2;
	E_ModuleID.CELL_RB301_AP:  
		iLevel														:= 3; 
		iModuleID													:= 5;  
		M_EnDisSubModuleIDConversion 								:= 'CELL_RB301_AP'; 
		iTCCellSubMod												:= 2;
	E_ModuleID.CELL_RC301_AP:  
		iLevel														:= 3; 
		iModuleID													:= 6;  
		M_EnDisSubModuleIDConversion 								:= 'CELL_RC301_AP'; 
		iTCCellSubMod												:= 2;                                                                             
	E_ModuleID.CELL_LA401_AP:  
		iLevel														:= 4; 
		iModuleID													:= 1;  
		M_EnDisSubModuleIDConversion 								:= 'CELL_LA401_AP'; 
		iTCCellSubMod												:= 2;
	E_ModuleID.CELL_LB401_AP:  
		iLevel														:= 4; 
		iModuleID													:= 2;  
		M_EnDisSubModuleIDConversion 								:= 'CELL_LB401_AP'; 
		iTCCellSubMod												:= 2;
	E_ModuleID.CELL_LC401_AP:  
		iLevel														:= 4; 
		iModuleID													:= 3;  
		M_EnDisSubModuleIDConversion 								:= 'CELL_LC401_AP'; 
		iTCCellSubMod												:= 2;
	E_ModuleID.CELL_RA401_AP:  
		iLevel														:= 4; 
		iModuleID													:= 4;  
		M_EnDisSubModuleIDConversion 								:= 'CELL_RA401_AP'; 
		iTCCellSubMod												:= 2;
	E_ModuleID.CELL_RB401_AP:  
		iLevel														:= 4; 
		iModuleID													:= 5;  
		M_EnDisSubModuleIDConversion 								:= 'CELL_RB401_AP'; 
		iTCCellSubMod												:= 2;
	E_ModuleID.CELL_RC401_AP:  
		iLevel														:= 4; 
		iModuleID													:= 6;  
		M_EnDisSubModuleIDConversion 								:= 'CELL_RC401_AP'; 
		iTCCellSubMod												:= 2;                                                                         
	E_ModuleID.CELL_LA501_AP:  
		iLevel														:= 5; 
		iModuleID													:= 1;  
		M_EnDisSubModuleIDConversion 								:= 'CELL_LA501_AP'; 
		iTCCellSubMod												:= 2;
	E_ModuleID.CELL_LB501_AP:  
		iLevel														:= 5; 
		iModuleID													:= 2;  
		M_EnDisSubModuleIDConversion 								:= 'CELL_LB501_AP'; 
		iTCCellSubMod												:= 2;
	E_ModuleID.CELL_LC501_AP:  
		iLevel														:= 5; 
		iModuleID													:= 3;  
		M_EnDisSubModuleIDConversion 								:= 'CELL_LC501_AP'; 
		iTCCellSubMod												:= 2;
	E_ModuleID.CELL_RA501_AP:  
		iLevel														:= 5; 
		iModuleID													:= 4;  
		M_EnDisSubModuleIDConversion 								:= 'CELL_RA501_AP'; 
		iTCCellSubMod												:= 2;
	E_ModuleID.CELL_RB501_AP:  
		iLevel														:= 5; 
		iModuleID													:= 5;  
		M_EnDisSubModuleIDConversion 								:= 'CELL_RB501_AP'; 
		iTCCellSubMod												:= 2;
	E_ModuleID.CELL_RC501_AP:  
		iLevel														:= 5; 
		iModuleID													:= 6;  
		M_EnDisSubModuleIDConversion 								:= 'CELL_RC501_AP'; 
		iTCCellSubMod												:= 2;                                                                           
	E_ModuleID.CELL_LA601_AP:  
		iLevel														:= 6; 
		iModuleID													:= 1;  
		M_EnDisSubModuleIDConversion 								:= 'CELL_LA601_AP'; 
		iTCCellSubMod												:= 2;
	E_ModuleID.CELL_LB601_AP:  
		iLevel														:= 6; 
		iModuleID													:= 2;  
		M_EnDisSubModuleIDConversion 								:= 'CELL_LB601_AP'; 
		iTCCellSubMod												:= 2;
	E_ModuleID.CELL_LC601_AP:  
		iLevel														:= 6; 
		iModuleID													:= 3;  
		M_EnDisSubModuleIDConversion 								:= 'CELL_LC601_AP'; 
		iTCCellSubMod												:= 2;
	E_ModuleID.CELL_RA601_AP:  
		iLevel														:= 6; 
		iModuleID													:= 4;  
		M_EnDisSubModuleIDConversion 								:= 'CELL_RA601_AP'; 
		iTCCellSubMod												:= 2;
	E_ModuleID.CELL_RB601_AP:  
		iLevel														:= 6; 
		iModuleID													:= 5;  
		M_EnDisSubModuleIDConversion 								:= 'CELL_RB601_AP'; 
		iTCCellSubMod												:= 2;
	E_ModuleID.CELL_RC601_AP:  
		iLevel														:= 6; 
		iModuleID													:= 6;  
		M_EnDisSubModuleIDConversion 								:= 'CELL_RC601_AP'; 
		iTCCellSubMod												:= 2;	
	E_ModuleID.CELL_LA101_TIERII:  
		iLevel														:= 1; 
		iModuleID													:= 1;  
		M_EnDisSubModuleIDConversion 								:= 'CELL_LA101_TIERII'; 
		iTCCellSubMod												:= 3;
	E_ModuleID.CELL_LB101_TIERII:  
		iLevel														:= 1; 
		iModuleID													:= 2;  
		M_EnDisSubModuleIDConversion 								:= 'CELL_LB101_TIERII'; 
		iTCCellSubMod												:= 3;
	E_ModuleID.CELL_LC101_TIERII:  
		iLevel														:= 1; 
		iModuleID													:= 3; 
		M_EnDisSubModuleIDConversion 								:= 'CELL_LC101_TIERII'; 
		iTCCellSubMod												:= 3;
	E_ModuleID.CELL_RA101_TIERII:  
		iLevel														:= 1; 
		iModuleID													:= 4;  
		M_EnDisSubModuleIDConversion 								:= 'CELL_RA101_TIERII'; 
		iTCCellSubMod												:= 3;
	E_ModuleID.CELL_RB101_TIERII:  
		iLevel														:= 1; 
		iModuleID													:= 5;  
		M_EnDisSubModuleIDConversion 								:= 'CELL_RB101_TIERII'; 
		iTCCellSubMod												:= 3;
	E_ModuleID.CELL_RC101_TIERII:  
		iLevel														:= 1; 
		iModuleID													:= 6;  
		M_EnDisSubModuleIDConversion 								:= 'CELL_RC101_TIERII'; 
		iTCCellSubMod												:= 3;                                                                                                    
	E_ModuleID.CELL_LA201_TIERII:  
		iLevel														:= 2; 
		iModuleID													:= 1;  
		M_EnDisSubModuleIDConversion 								:= 'CELL_LA201_TIERII'; 
		iTCCellSubMod												:= 3;
	E_ModuleID.CELL_LB201_TIERII:  
		iLevel														:= 2; 
		iModuleID													:= 2;  
		M_EnDisSubModuleIDConversion 								:= 'CELL_LB201_TIERII'; 
		iTCCellSubMod												:= 3;
	E_ModuleID.CELL_LC201_TIERII:  
		iLevel														:= 2; 
		iModuleID													:= 3;  
		M_EnDisSubModuleIDConversion 								:= 'CELL_LC201_TIERII'; 
		iTCCellSubMod												:= 3;
	E_ModuleID.CELL_RA201_TIERII:  
		iLevel														:= 2; 
		iModuleID													:= 4;  
		M_EnDisSubModuleIDConversion 								:= 'CELL_RA201_TIERII'; 
		iTCCellSubMod												:= 3;
	E_ModuleID.CELL_RB201_TIERII:  
		iLevel														:= 2; 
		iModuleID													:= 5;  
		M_EnDisSubModuleIDConversion 								:= 'CELL_RB201_TIERII'; 
		iTCCellSubMod												:= 3;
	E_ModuleID.CELL_RC201_TIERII:  
		iLevel														:= 2; 
		iModuleID													:= 6;  
		M_EnDisSubModuleIDConversion 								:= 'CELL_RC201_TIERII'; 
		iTCCellSubMod												:= 3;                                                                      
	E_ModuleID.CELL_LA301_TIERII:  
		iLevel														:= 3; 
		iModuleID													:= 1;  
		M_EnDisSubModuleIDConversion 								:= 'CELL_LA301_TIERII'; 
		iTCCellSubMod												:= 3;
	E_ModuleID.CELL_LB301_TIERII:  
		iLevel														:= 3; 
		iModuleID													:= 2;  
		M_EnDisSubModuleIDConversion 								:= 'CELL_LB301_TIERII'; 
		iTCCellSubMod												:= 3;
	E_ModuleID.CELL_LC301_TIERII:  
		iLevel														:= 3; 
		iModuleID													:= 3;  
		M_EnDisSubModuleIDConversion 								:= 'CELL_LC301_TIERII'; 
		iTCCellSubMod												:= 3;
	E_ModuleID.CELL_RA301_TIERII:  
		iLevel														:= 3; 
		iModuleID													:= 4;  
		M_EnDisSubModuleIDConversion 								:= 'CELL_RA301_TIERII'; 
		iTCCellSubMod												:= 3;
	E_ModuleID.CELL_RB301_TIERII:  
		iLevel														:= 3; 
		iModuleID													:= 5;  
		M_EnDisSubModuleIDConversion 								:= 'CELL_RB301_TIERII'; 
		iTCCellSubMod												:= 3;
	E_ModuleID.CELL_RC301_TIERII:  
		iLevel														:= 3; 
		iModuleID													:= 6;  
		M_EnDisSubModuleIDConversion 								:= 'CELL_RC301_TIERII'; 
		iTCCellSubMod												:= 3;
                                                                                                                        
	E_ModuleID.CELL_LA401_TIERII:  
		iLevel														:= 4; 
		iModuleID													:= 1;  
		M_EnDisSubModuleIDConversion 								:= 'CELL_LA401_TIERII'; 
		iTCCellSubMod												:= 3;
	E_ModuleID.CELL_LB401_TIERII:  
		iLevel														:= 4; 
		iModuleID													:= 2;  
		M_EnDisSubModuleIDConversion 								:= 'CELL_LB401_TIERII'; 
		iTCCellSubMod												:= 3;
	E_ModuleID.CELL_LC401_TIERII:  
		iLevel														:= 4; 
		iModuleID													:= 3;  
		M_EnDisSubModuleIDConversion 								:= 'CELL_LC401_TIERII'; 
		iTCCellSubMod												:= 3;
	E_ModuleID.CELL_RA401_TIERII:  
		iLevel														:= 4; 
		iModuleID													:= 4;  
		M_EnDisSubModuleIDConversion 								:= 'CELL_RA401_TIERII'; 
		iTCCellSubMod												:= 3;
	E_ModuleID.CELL_RB401_TIERII:  
		iLevel														:= 4; 
		iModuleID													:= 5;  
		M_EnDisSubModuleIDConversion 								:= 'CELL_RB401_TIERII'; 
		iTCCellSubMod												:= 3;
	E_ModuleID.CELL_RC401_TIERII:  
		iLevel														:= 4; 
		iModuleID													:= 6;  
		M_EnDisSubModuleIDConversion 								:= 'CELL_RC401_TIERII'; 
		iTCCellSubMod												:= 3;                                                
	E_ModuleID.CELL_LA501_TIERII:  
		iLevel														:= 5; 
		iModuleID													:= 1;  
		M_EnDisSubModuleIDConversion 								:= 'CELL_LA501_TIERII'; 
		iTCCellSubMod												:= 3;
	E_ModuleID.CELL_LB501_TIERII:  
		iLevel														:= 5; 
		iModuleID													:= 2;  
		M_EnDisSubModuleIDConversion 								:= 'CELL_LB501_TIERII'; 
		iTCCellSubMod												:= 3;
	E_ModuleID.CELL_LC501_TIERII:  
		iLevel														:= 5; 
		iModuleID													:= 3;  
		M_EnDisSubModuleIDConversion 								:= 'CELL_LC501_TIERII'; 
		iTCCellSubMod												:= 3;
	E_ModuleID.CELL_RA501_TIERII:  
		iLevel														:= 5; 
		iModuleID													:= 4;  
		M_EnDisSubModuleIDConversion 								:= 'CELL_RA501_TIERII'; 
		iTCCellSubMod												:= 3;
	E_ModuleID.CELL_RB501_TIERII:  
		iLevel														:= 5; 
		iModuleID													:= 5;  
		M_EnDisSubModuleIDConversion 								:= 'CELL_RB501_TIERII'; 
		iTCCellSubMod												:= 3;
	E_ModuleID.CELL_RC501_TIERII:  
		iLevel														:= 5; 
		iModuleID													:= 6;  
		M_EnDisSubModuleIDConversion 								:= 'CELL_RC501_TIERII'; 
		iTCCellSubMod												:= 3;                                                                                                       
	E_ModuleID.CELL_LA601_TIERII:  
		iLevel														:= 6; 
		iModuleID													:= 1;  
		M_EnDisSubModuleIDConversion 								:= 'CELL_LA601_TIERII'; 
		iTCCellSubMod												:= 3;
	E_ModuleID.CELL_LB601_TIERII:  
		iLevel														:= 6; 
		iModuleID													:= 2;  
		M_EnDisSubModuleIDConversion 								:= 'CELL_LB601_TIERII'; 
		iTCCellSubMod												:= 3;
	E_ModuleID.CELL_LC601_TIERII:  
		iLevel														:= 6; 
		iModuleID													:= 3;  
		M_EnDisSubModuleIDConversion 								:= 'CELL_LC601_TIERII'; 
		iTCCellSubMod												:= 3;
	E_ModuleID.CELL_RA601_TIERII:  
		iLevel														:= 6; 
		iModuleID													:= 4;  
		M_EnDisSubModuleIDConversion 								:= 'CELL_RA601_TIERII'; 
		iTCCellSubMod												:= 3;
	E_ModuleID.CELL_RB601_TIERII:  
		iLevel														:= 6; 
		iModuleID													:= 5;  
		M_EnDisSubModuleIDConversion 								:= 'CELL_RB601_TIERII'; 
		iTCCellSubMod												:= 3;
	E_ModuleID.CELL_RC601_TIERII:  
		iLevel														:= 6; 
		iModuleID													:= 6; 
		M_EnDisSubModuleIDConversion 								:= 'CELL_RC601_TIERII'; 
		iTCCellSubMod												:= 3;	

	//E_ModuleID.COLUMN_LA  : iLevel:=99;iModuleID:=1; M_EnDisSubModuleIDConversion := 'TESTER_COLUMN_LA';
	//E_ModuleID.COLUMN_LB  : iLevel:=99;iModuleID:=2; M_EnDisSubModuleIDConversion := 'TESTER_COLUMN_LB';
	//E_ModuleID.COLUMN_LC  : iLevel:=99;iModuleID:=3; M_EnDisSubModuleIDConversion := 'TESTER_COLUMN_LC';
	//E_ModuleID.COLUMN_RA  : iLevel:=99;iModuleID:=4; M_EnDisSubModuleIDConversion := 'TESTER_COLUMN_RA';
	//E_ModuleID.COLUMN_RB  : iLevel:=99;iModuleID:=5; M_EnDisSubModuleIDConversion := 'TESTER_COLUMN_RB';
	//E_ModuleID.COLUMN_RC  : iLevel:=99;iModuleID:=6; M_EnDisSubModuleIDConversion := 'TESTER_COLUMN_RC';
	//E_ModuleID.NA  : iLevel:=0;iModuleID:=0; M_EnDisSubModuleIDConversion := 'NA';
ELSE
	iLevel															:= 0;
	M_EnDisSubModuleIDConversion 									:= 'Wrong Module ID';
END_CASE]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_nCmdtoEvent" Id="{67481b51-7b35-4ac2-900a-38f4d5b3ff0d}">
      <Declaration><![CDATA[METHOD M_nCmdtoEvent : BOOL//E_EventName
VAR_INPUT
	eCmd2Event_TaskName				: E_TaskName;
	iCmd2Event_Result				: INT; //1:Completed, 2:Failed
END_VAR

VAR_IN_OUT
	eCmd2Event_EventName 			: E_EventName;	
	sCmd2Event_EventName 			: STRING(81);
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[CASE eCmd2Event_TaskName OF
	E_TaskName.ActivateRecipe: // ActivateRecipe	
		IF iCmd2Event_Result = 1 THEN		
			eCmd2Event_EventName						:= E_EventName.ActivateRecipeCompleted;	
			sCmd2Event_EventName						:= 'ActivateRecipeCompleted';
		ELSE				
			eCmd2Event_EventName						:= E_EventName.ActivateRecipeFailed;	
			sCmd2Event_EventName						:= 'ActivateRecipeFailed';
		END_IF		
	
	E_TaskName.ValidateRecipe: // ValidateRecipe	
		IF iCmd2Event_Result = 1 THEN		
			eCmd2Event_EventName						:= E_EventName.ValidateRecipeCompleted;	
			sCmd2Event_EventName						:= 'ValidateRecipeCompleted';
		END_IF	
	
	E_TaskName.AlarmReset: // AlarmReset	
		IF iCmd2Event_Result = 1 THEN		
			eCmd2Event_EventName						:= E_EventName.AlarmResetCompleted;
			sCmd2Event_EventName						:= 'AlarmResetCompleted';
		ELSE				
			eCmd2Event_EventName						:= E_EventName.AlarmResetFailed;
			sCmd2Event_EventName						:= 'AlarmResetFailed';
		END_IF	
	
	E_TaskName.ReadRFID: // ReadID	
		IF iCmd2Event_Result = 1 THEN		
			eCmd2Event_EventName						:= E_EventName.ReadRFIDCompleted;	
			sCmd2Event_EventName						:= 'ReadIDCompleted';
		ELSE				
			eCmd2Event_EventName						:= E_EventName.ReadRFIDFailed;	
			sCmd2Event_EventName						:= 'ReadIDFailed';
		END_IF	
	
	E_TaskName.UpdateLCD: // UpdateLCD	
		IF iCmd2Event_Result = 1 THEN		
			eCmd2Event_EventName						:= E_EventName.UpdateLCDCompleted;	
			sCmd2Event_EventName 						:= 'UpdateLCDCompleted';
		ELSE				
			eCmd2Event_EventName						:= E_EventName.UpdateLCDFailed;	
			sCmd2Event_EventName						:= 'UpdateLCDFailed';
		END_IF	
	
	E_TaskName.EnableModule: // EnableModule	
		IF iCmd2Event_Result = 1 THEN		
			eCmd2Event_EventName						:= E_EventName.EnableModuleCompleted;	
			sCmd2Event_EventName						:= 'EnableModuleCompleted';
		END_IF	
	
	E_TaskName.DisableModule: // DisableModule	
		IF iCmd2Event_Result = 1 THEN		
			eCmd2Event_EventName 						:= E_EventName.DisableModuleCompleted;	
			sCmd2Event_EventName 						:= 'DisableModuleCompleted';
		END_IF	
	
	E_TaskName.SetLogFileVerbosity: // SetLogFileVerbosity	
		IF iCmd2Event_Result = 1 THEN		
			eCmd2Event_EventName 						:= E_EventName.SetLogVerbosityCompleted;	
			sCmd2Event_EventName 						:= 'SetLogVerbosityCompleted';
		END_IF	
	
	E_TaskName.Initialize: // Initialize	
		IF iCmd2Event_Result = 1 THEN		
			eCmd2Event_EventName 						:= E_EventName.InitializeCompleted;	
			sCmd2Event_EventName 						:= 'InitializeCompleted';				
		ELSE				        					
			eCmd2Event_EventName 						:= E_EventName.InitializeFailed;	
			sCmd2Event_EventName 						:= 'InitializeFailed';
		END_IF	
	
	E_TaskName.Resume: // Resume	
		IF iCmd2Event_Result = 1 THEN		
			eCmd2Event_EventName 						:= E_EventName.ResumeCompleted;	
			sCmd2Event_EventName 						:= 'ResumeCompleted';
		ELSE				     						
			eCmd2Event_EventName 						:= E_EventName.ResumeFailed;	
			sCmd2Event_EventName 						:= 'ResumeFailed';
		END_IF	
	
	E_TaskName.DoorOpen: // DoorOpen	
		IF iCmd2Event_Result = 1 THEN	
			eCmd2Event_EventName						:= E_EventName.DoorOpenCompleted;	
			sCmd2Event_EventName						:= 'DoorOpenCompleted';
		ELSE			       							
			eCmd2Event_EventName						:= E_EventName.DoorOpenFailed;	
			sCmd2Event_EventName						:= 'DoorOpenFailed';
			
		END_IF	
	
	E_TaskName.DoorClose: //DoorClose	
		IF iCmd2Event_Result = 1 THEN		
			eCmd2Event_EventName 						:= E_EventName.DoorCloseCompleted;	
			sCmd2Event_EventName 						:= 'DoorCloseCompleted';
		ELSE				     						
			eCmd2Event_EventName 						:= E_EventName.DoorCloseFailed;	
			sCmd2Event_EventName 						:= 'DoorCloseFailed';
		END_IF	
	
	E_TaskName.DPSPower: //DPSPower	
		IF iCmd2Event_Result = 1 THEN		
			eCmd2Event_EventName 						:= E_EventName.DPSPowerCompleted;	
			sCmd2Event_EventName 						:= 'DPSPowerCompleted';
		ELSE				     						
			eCmd2Event_EventName 						:= E_EventName.DPSPowerFailed;	
			sCmd2Event_EventName 						:= 'DPSPowerFailed';
		END_IF	
	
	E_TaskName.UnitPresentCheck: //UnitPresentCheck	
		IF iCmd2Event_Result = 1 THEN		
			eCmd2Event_EventName 						:= E_EventName.UnitPresentCheckCompleted;	
			sCmd2Event_EventName 						:= 'UnitPresentCheckCompleted';
		ELSE				     						
			eCmd2Event_EventName 						:= E_EventName.UnitPresentCheckFailed;	
			sCmd2Event_EventName 						:= 'UnitPresentCheckFailed';
		END_IF	
	
	E_TaskName.TrayClamp: //TrayClamp	
		IF iCmd2Event_Result = 1 THEN		
			eCmd2Event_EventName 						:= E_EventName.TrayClampCompleted;	
			sCmd2Event_EventName 						:= 'TrayClampCompleted';
		ELSE				     						
			eCmd2Event_EventName 						:= E_EventName.TrayClampFailed;	
			sCmd2Event_EventName 						:= 'TrayClampFailed';
		END_IF	
	
	E_TaskName.ChangeStackCount: //ChangeStackCount	
		IF iCmd2Event_Result = 1 THEN		
			eCmd2Event_EventName 						:= E_EventName.ChangeStackCountCompleted;	
			sCmd2Event_EventName 						:= 'ChangeStackCountCompleted';
		ELSE				     						
			eCmd2Event_EventName 						:= E_EventName.ChangeStackCountFailed;	
			sCmd2Event_EventName 						:= 'ChangeStackCountFailed';
		END_IF	
	
	E_TaskName.BypassVision: //BypassVision	
		IF iCmd2Event_Result = 1 THEN		
			eCmd2Event_EventName 						:= E_EventName.BypassVisionCompleted;	
			sCmd2Event_EventName 						:= 'BypassVisionCompleted';
		END_IF	
	
	E_TaskName.TCCSessionRequest: //TCCSessionRequest	
		IF iCmd2Event_Result = 1 THEN		
			eCmd2Event_EventName 						:= E_EventName.TCCSessionRequestCompleted;	
			sCmd2Event_EventName 						:= 'TCCSessionRequestCompleted';
		ELSE				     						
			eCmd2Event_EventName 						:= E_EventName.TCCSessionRequestFailed;	
			sCmd2Event_EventName 						:= 'TCCSessionRequestFailed';
		END_IF	
	
	E_TaskName.TIUSlideOut: //TIUSlideOut	
		IF iCmd2Event_Result = 1 THEN		
			eCmd2Event_EventName 						:= E_EventName.TIUSlideOutCompleted;	
			sCmd2Event_EventName 						:= 'TIUSlideOutCompleted';
		ELSE				     						
			eCmd2Event_EventName 						:= E_EventName.TIUSlideOutFailed;	
			sCmd2Event_EventName 						:= 'TIUSlideOutFailed';
		END_IF
		
	E_TaskName.PrecisorSlideOut: //PrecisorSlideOut	
		IF iCmd2Event_Result = 1 THEN		
			eCmd2Event_EventName 						:= E_EventName.PrecisorSlideOutCompleted;	
			sCmd2Event_EventName 						:= 'PrecisorSlideOutCompleted';		
		ELSE				     						
			eCmd2Event_EventName 						:= E_EventName.PrecisorSlideOutFailed;	
			sCmd2Event_EventName 						:= 'PrecisorSlideOutFailed';
		END_IF	
	
	E_TaskName.SingulateTrayStacker: //SingulateTrayStacker	
		IF iCmd2Event_Result = 1 THEN		
			eCmd2Event_EventName 						:= E_EventName.SingulateTrayStackerCompleted;	
			sCmd2Event_EventName 						:= 'SingulateTrayStackerCompleted';				
		ELSE				     						
			eCmd2Event_EventName 						:= E_EventName.SingulateTrayStackerFailed;	
			sCmd2Event_EventName 						:= 'SingulateTrayStackerFailed';
		END_IF	
	
	E_TaskName.SingulateTrayStackerHalf: //SingulateTrayStackerHalf	
		IF iCmd2Event_Result = 1 THEN		
			eCmd2Event_EventName 						:= E_EventName.SingulateTrayStackerHalfCompleted;
			sCmd2Event_EventName 						:= 'SingulateTrayStackerHalfCompleted';			
		ELSE				     						
			eCmd2Event_EventName 						:= E_EventName.SingulateTrayStackerHalfFailed;	
			sCmd2Event_EventName 						:= 'SingulateTrayStackerHalfFailed';
		END_IF	
	
	E_TaskName.SingulateTrayStackerRemaining: //SingulateTrayStackerRemaining	
		IF iCmd2Event_Result = 1 THEN		
			eCmd2Event_EventName 						:= E_EventName.SingulateTrayStackerRemainingCompleted;	
			sCmd2Event_EventName 						:= 'SingulateTrayStackerRemainingCompleted';			
		ELSE				     						
			eCmd2Event_EventName 						:= E_EventName.SingulateTrayStackerRemainingFailed;	
			sCmd2Event_EventName 						:= 'SingulateTrayStackerRemainingFailed';
		END_IF	
	
	E_TaskName.StackUpTrayStacker: //StackUpTrayStacker	
		IF iCmd2Event_Result = 1 THEN		
			eCmd2Event_EventName 						:= E_EventName.StackUpTrayStackerCompleted;	
			sCmd2Event_EventName 						:= 'StackUpTrayStackerCompleted';				
		ELSE				     						
			eCmd2Event_EventName 						:= E_EventName.StackUpTrayStackerFailed;	
			sCmd2Event_EventName 						:= 'StackUpTrayStackerFailed';
		END_IF	
	
	E_TaskName.StopperUp: //StopperUp	
		IF iCmd2Event_Result = 1 THEN		
			eCmd2Event_EventName 						:= E_EventName.StopperUpCompleted;	
			sCmd2Event_EventName 						:= 'StopperUpCompleted';
		ELSE				     						
			eCmd2Event_EventName 						:= E_EventName.StopperUpFailed;	
			sCmd2Event_EventName 						:= 'StopperUpFailed';
		END_IF	
	
	E_TaskName.MoveConveyorForward: //MoveConveyorForward	
		IF iCmd2Event_Result = 1 THEN		
			eCmd2Event_EventName 						:= E_EventName.MoveConveyorForwardCompleted;	
			sCmd2Event_EventName 						:= 'MoveConveyorForwardCompleted';			
		ELSE				     						
			eCmd2Event_EventName 						:= E_EventName.MoveConveyorForwardFailed;	
			sCmd2Event_EventName 						:= 'MoveConveyorForwardFailed';
		END_IF	
	
	E_TaskName.MoveConveyorBackward: //MoveConveyorBackward	
		IF iCmd2Event_Result = 1 THEN		
			eCmd2Event_EventName 						:= E_EventName.MoveConveyorBackwardCompleted;	
			sCmd2Event_EventName 						:= 'MoveConveyorBackwardCompleted';
		ELSE				     						
			eCmd2Event_EventName 						:= E_EventName.MoveConveyorBackwardFailed;	
			sCmd2Event_EventName 						:= 'MoveConveyorBackwardFailed';
		END_IF	
	
	E_TaskName.MoveVisionShuttle: //MoveVisionShuttle	
		IF iCmd2Event_Result = 1 THEN		
			eCmd2Event_EventName 						:= E_EventName.MoveVisionShuttleCompleted;	
			sCmd2Event_EventName 						:= 'MoveVisionShuttleCompleted';
		ELSE				     						
			eCmd2Event_EventName 						:= E_EventName.MoveVisionShuttleFailed;	
			sCmd2Event_EventName 						:= 'MoveVisionShuttleFailed';
		END_IF	
	
	E_TaskName.MoveUPortShuttle: //MoveUPortShuttle	
		IF iCmd2Event_Result = 1 THEN		
			eCmd2Event_EventName 						:= E_EventName.MoveUPortShuttleCompleted;	
			sCmd2Event_EventName 						:= 'MoveUPortShuttleCompleted';
					             						
		ELSE				     						
			eCmd2Event_EventName 						:= E_EventName.MoveUPortShuttleFailed;	
			sCmd2Event_EventName 						:= 'MoveUPortShuttleFailed';
		END_IF	
	
	E_TaskName.UPortShuttleReady: //UPortShuttleReady	
		IF iCmd2Event_Result = 1 THEN		
			eCmd2Event_EventName 						:= E_EventName.UPortShuttleReadyCompleted;	
			sCmd2Event_EventName 						:= 'UPortShuttleReadyCompleted';
		ELSE				     						
			eCmd2Event_EventName 						:= E_EventName.UPortShuttleReadyFailed;	
			sCmd2Event_EventName 						:= 'UPortShuttleReadyFailed';
		END_IF	
	
	E_TaskName.MoveTrayScanShuttle: //MoveTrayScanShuttle	
		IF iCmd2Event_Result = 1 THEN		
			eCmd2Event_EventName 						:= E_EventName.MoveTrayScanShuttleCompleted;	
			sCmd2Event_EventName 						:= 'MoveTrayScanShuttleCompleted';
		ELSE				     						
			eCmd2Event_EventName 						:= E_EventName.MoveTrayScanShuttleFailed;	
			sCmd2Event_EventName 						:= 'MoveTrayScanShuttleFailed';
		END_IF	
	
	E_TaskName.MoveTrayScanShuttleLifter: //MoveTrayScanShuttleLifter	
		IF iCmd2Event_Result = 1 THEN		
			eCmd2Event_EventName 						:= E_EventName.MoveTrayScanShuttleLifterCompleted;	
			sCmd2Event_EventName 						:= 'MoveTrayScanShuttleLifterCompleted';
		ELSE				     						
			eCmd2Event_EventName 						:= E_EventName.MoveTrayScanShuttleFailed;	
			sCmd2Event_EventName 						:= 'MoveTrayScanShuttleLifterFailed';
		END_IF	
	
	E_TaskName.EportLatch: // EportLatch	
		IF iCmd2Event_Result = 1 THEN		
			eCmd2Event_EventName 						:= E_EventName.EportLatchCompleted;	
			sCmd2Event_EventName 						:= 'EportLatchCompleted';
		ELSE				     						
			eCmd2Event_EventName 						:= E_EventName.EportLatchFailed;	
			sCmd2Event_EventName 						:= 'EportLatchFailed';
		END_IF	
	
	E_TaskName.GantryPickAndPlace: //GantryPickAndPlace	
		IF iCmd2Event_Result = 1 THEN		
			eCmd2Event_EventName 						:= E_EventName.GantryPickAndPlaceCompleted;	
			sCmd2Event_EventName 						:= 'GantryPickAndPlaceCompleted';	
		ELSE				     						
			eCmd2Event_EventName 						:= E_EventName.GantryPickAndPlaceFailed;	
			sCmd2Event_EventName 						:= 'GantryPickAndPlaceFailed';
		END_IF	
	
	E_TaskName.TBOTPickAndPlace: //TBOTPickAndPlace	
		IF iCmd2Event_Result = 1 THEN		
			eCmd2Event_EventName 						:= E_EventName.TBOTPickAndPlaceCompleted;	
			sCmd2Event_EventName 						:= 'TBOTPickAndPlaceCompleted';
		ELSE				     						
			eCmd2Event_EventName 						:= E_EventName.TBOTPickAndPlaceFailed;	
			sCmd2Event_EventName 						:= 'TBOTPickAndPlaceFailed';
		END_IF	
	
	E_TaskName.AutoTeach: //AutoTeach	
		IF iCmd2Event_Result = 1 THEN		
			eCmd2Event_EventName 						:= E_EventName.AutoTeachCompleted;	
			sCmd2Event_EventName 						:= 'AutoTeachCompleted';
		ELSE				     						
			eCmd2Event_EventName 						:= E_EventName.AutoTeachFailed;	
			sCmd2Event_EventName 						:= 'AutoTeachFailed';
		END_IF	
	
	E_TaskName.Jog: //Jog	
		IF iCmd2Event_Result = 1 THEN		
			eCmd2Event_EventName 						:= E_EventName.JogCompleted;	
			sCmd2Event_EventName 						:= 'JogCompleted';
		ELSE				     						
			eCmd2Event_EventName 						:= E_EventName.JogFailed;	
			sCmd2Event_EventName 						:= 'JogFailed';
		END_IF	
	
	E_TaskName.ApplyTeachData: //ApplyTeachData	
		IF iCmd2Event_Result = 1 THEN		
			eCmd2Event_EventName 						:= E_EventName.ApplyTeachDataCompleted;	
			sCmd2Event_EventName 						:= 'ApplyTeachDataCompleted';
		ELSE				     						
			eCmd2Event_EventName 						:= E_EventName.ApplyTeachDataFailed;	
			sCmd2Event_EventName 						:= 'ApplyTeachDataFailed';
		END_IF	
	
	E_TaskName.AbortTeach: //AbortTeach	
		IF iCmd2Event_Result = 1 THEN		
			eCmd2Event_EventName 						:= E_EventName.AbortTeachCompleted;	
			sCmd2Event_EventName 						:= 'AbortTeachCompleted';
		ELSE				     						
			eCmd2Event_EventName 						:= E_EventName.AbortTeachFailed;	
			sCmd2Event_EventName 						:= 'AbortTeachFailed';
		END_IF	
	
	E_TaskName.WriteRFIDData: //WriteRFIDData	
		IF iCmd2Event_Result = 1 THEN		
			eCmd2Event_EventName 						:= E_EventName.WriteRFIDDataCompleted;	
			sCmd2Event_EventName 						:= 'WriteRFIDDataCompleted';
		ELSE				     						
			eCmd2Event_EventName 						:= E_EventName.WriteRFIDDataFailed;	
			sCmd2Event_EventName 						:= 'WriteRFIDDataFailed';
		END_IF	
	
	E_TaskName.MoveGantry: //MoveGantry	
		IF iCmd2Event_Result = 1 THEN		
			eCmd2Event_EventName 						:= E_EventName.MoveGantryCompleted;	
			sCmd2Event_EventName 						:= 'MoveGantryCompleted';
		ELSE				     						
			eCmd2Event_EventName 						:= E_EventName.MoveGantryFailed;	
			sCmd2Event_EventName 						:= 'MoveGantryFailed';
		END_IF	
	
	E_TaskName.MoveTBOT: //MoveTBOT	
		IF iCmd2Event_Result = 1 THEN		
			eCmd2Event_EventName 						:= E_EventName.MoveTBOTCompleted;	
			sCmd2Event_EventName 						:= 'MoveTBOTCompleted';
		ELSE				     						
			eCmd2Event_EventName 						:= E_EventName.MoveTBOTFailed;	
			sCmd2Event_EventName 						:= 'MoveTBOTFailed';
		END_IF	
	
	E_TaskName.MoveTBOTRetry: //MoveTBOTRetry	
		IF iCmd2Event_Result = 1 THEN		
			eCmd2Event_EventName 						:= E_EventName.MoveTBOTRetryCompleted;	
			sCmd2Event_EventName 						:= 'MoveTBOTRetryCompleted';
		ELSE				     						
			eCmd2Event_EventName 						:= E_EventName.MoveTBOTRetryFailed;	
			sCmd2Event_EventName 						:= 'MoveTBOTRetryFailed';
		END_IF	
	
	E_TaskName.MoveTBOTCancel: //MoveTBOTCancel	
		IF iCmd2Event_Result = 1 THEN		
			eCmd2Event_EventName 						:= E_EventName.MoveTBOTCancelCompleted;	
			sCmd2Event_EventName 						:= 'MoveTBOTCancelCompleted';
		ELSE				     						
			eCmd2Event_EventName 						:= E_EventName.MoveTBOTCancelFailed;	
			sCmd2Event_EventName 						:= 'MoveTBOTCancelFailed';
		END_IF	
	
	E_TaskName.TBOTPickAndPlaceRetry: //TBOTPickAndPlaceRetry	
		IF iCmd2Event_Result = 1 THEN		
			eCmd2Event_EventName 						:= E_EventName.TBOTPickAndPlaceRetryCompleted;	
			sCmd2Event_EventName 						:= 'TBOTPickAndPlaceRetryCompleted';
		ELSE				     						
			eCmd2Event_EventName 						:= E_EventName.TBOTPickAndPlaceRetryFailed;	
			sCmd2Event_EventName 						:= 'TBOTPickAndPlaceRetryFailed';
		END_IF	
	
	E_TaskName.TBOTPickAndPlaceCancel: //TBOTPickAndPlaceCancel	
		IF iCmd2Event_Result = 1 THEN		
			eCmd2Event_EventName 						:= E_EventName.TBOTPickAndPlaceCancelCompleted;	
			sCmd2Event_EventName 						:= 'TBOTPickAndPlaceCancelCompleted';
		ELSE				     
			eCmd2Event_EventName 						:= E_EventName.TBOTPickAndPlaceCancelFailed;	
			sCmd2Event_EventName 						:= 'TBOTPickAndPlaceCancelFailed';
		END_IF	
	
	E_TaskName.MoveGantryRetry: //MoveGantryRetry	
		IF iCmd2Event_Result = 1 THEN		
			eCmd2Event_EventName 						:= E_EventName.MoveGantryRetryCompleted;	
			sCmd2Event_EventName 						:= 'MoveGantryRetryCompleted';
		ELSE				
			eCmd2Event_EventName 						:= E_EventName.MoveGantryRetryFailed;	
			sCmd2Event_EventName 						:= 'MoveGantryRetryFailed';
		END_IF	
	
	E_TaskName.MoveGantryCancel: //MoveGantryCancel	
		IF iCmd2Event_Result = 1 THEN		
			eCmd2Event_EventName 						:= E_EventName.MoveGantryCancelCompleted;	
			sCmd2Event_EventName 						:= 'MoveGantryCancelCompleted';
		ELSE				
			eCmd2Event_EventName 						:= E_EventName.MoveGantryCancelFailed;
			sCmd2Event_EventName 						:= 'MoveGantryCancelFailed';
		END_IF	
	
	E_TaskName.GantryPickAndPlaceRetry: //GantryPickAndPlaceRetry	
		IF iCmd2Event_Result = 1 THEN		
			eCmd2Event_EventName 						:= E_EventName.GantryPickAndPlaceRetryCompleted;	
			sCmd2Event_EventName 						:= 'GantryPickAndPlaceRetryCompleted';
		ELSE				
			eCmd2Event_EventName 						:= E_EventName.GantryPickAndPlaceRetryFailed;	
			sCmd2Event_EventName 						:= 'GantryPickAndPlaceRetryFailed';
		END_IF	
	
	E_TaskName.GantryPickAndPlaceCancel: //GantryPickAndPlaceCancel	
		IF iCmd2Event_Result = 1 THEN		
			eCmd2Event_EventName 						:= E_EventName.GantryPickAndPlaceCancelCompleted;	
			sCmd2Event_EventName 						:= 'GantryPickAndPlaceCancelCompleted';
		ELSE				
			eCmd2Event_EventName 						:= E_EventName.GantryPickAndPlaceCancelFailed;
			sCmd2Event_EventName 						:= 'GantryPickAndPlaceCancelFailed';
		END_IF	
	
	E_TaskName.SingulateTrayStackerRetry: //SingulateTrayStackerRetry	
		IF iCmd2Event_Result = 1 THEN		
			eCmd2Event_EventName 						:= E_EventName.SingulateTrayStackerRetryCompleted;	
			sCmd2Event_EventName 						:= 'SingulateTrayStackerRetryCompleted';
		ELSE				
			eCmd2Event_EventName 						:= E_EventName.SingulateTrayStackerRetryFailed;	
			sCmd2Event_EventName 						:= 'SingulateTrayStackerRetryFailed';
		END_IF	
	
	E_TaskName.SingulateTrayStackerCancel: //SingulateTrayStackerCancel	
		IF iCmd2Event_Result = 1 THEN		
			eCmd2Event_EventName 						:= E_EventName.SingulateTrayStackerCancelCompleted;	
			sCmd2Event_EventName 						:= 'SingulateTrayStackerCancelCompleted';
		ELSE				
			eCmd2Event_EventName 						:= E_EventName.SingulateTrayStackerCancelFailed;	
			sCmd2Event_EventName 						:= 'SingulateTrayStackerCancelFailed';
		END_IF	
	
	E_TaskName.SingulateTrayStackerHalfRetry: //SingulateTrayStackerHalfRetry	
		IF iCmd2Event_Result = 1 THEN		
			eCmd2Event_EventName 						:= E_EventName.SingulateTrayStackerHalfRetryCompleted;	
			sCmd2Event_EventName 						:= 'SingulateTrayStackerHalfRetryCompleted';
		ELSE				
			eCmd2Event_EventName 						:= E_EventName.SingulateTrayStackerHalfRetryFailed;
			sCmd2Event_EventName 						:= 'SingulateTrayStackerHalfRetryFailed';
		END_IF	
	
	E_TaskName.SingulateTrayStackerHalfCancel: //SingulateTrayStackerHalfCancel	
		IF iCmd2Event_Result = 1 THEN		
			eCmd2Event_EventName 						:= E_EventName.SingulateTrayStackerHalfCancelCompleted;	
			sCmd2Event_EventName 						:= 'SingulateTrayStackerHalfCancelCompleted';
		ELSE				
			eCmd2Event_EventName 						:= E_EventName.SingulateTrayStackerHalfCancelFailed;	
			sCmd2Event_EventName 						:= 'SingulateTrayStackerHalfCancelFailed';
		END_IF	
	
	E_TaskName.SingulateTrayStackerRemainingRetry: //SingulateTrayStackerRemainingRetry	
		IF iCmd2Event_Result = 1 THEN		
			eCmd2Event_EventName 						:= E_EventName.SingulateTrayStackerRemainingRetryCompleted;	
			sCmd2Event_EventName 						:= 'SingulateTrayStackerRemainingRetryCompleted';
		ELSE				
			eCmd2Event_EventName 						:= E_EventName.SingulateTrayStackerRemainingRetryFailed;	
			sCmd2Event_EventName 						:= 'SingulateTrayStackerRemainingRetryFailed';
		END_IF	
	
	E_TaskName.SingulateTrayStackerRemainingCancel: //SingulateTrayStackerRemainingCancel	
		IF iCmd2Event_Result = 1 THEN		
			eCmd2Event_EventName 						:= E_EventName.SingulateTrayStackerRemainingCancelCompleted;	
			sCmd2Event_EventName 						:= 'SingulateTrayStackerRemainingCancelCompleted';
		ELSE				
			eCmd2Event_EventName 						:= E_EventName.SingulateTrayStackerRemainingCancelFailed;	
			sCmd2Event_EventName 						:= 'SingulateTrayStackerRemainingCancelFailed';
		END_IF	
	
	E_TaskName.StackUpTrayStackerRetry: //StackUpTrayStackerRetry	
		IF iCmd2Event_Result = 1 THEN		
			eCmd2Event_EventName 						:= E_EventName.StackUpTrayStackerRetryCompleted;	
			sCmd2Event_EventName 						:= 'StackUpTrayStackerRetryCompleted';
					
		ELSE				
			eCmd2Event_EventName 						:= E_EventName.StackUpTrayStackerRetryFailed;	
			sCmd2Event_EventName 						:= 'StackUpTrayStackerRetryFailed';
		END_IF	
	
	E_TaskName.StackUpTrayStackerCancel: //StackUpTrayStackerCancel	
		IF iCmd2Event_Result = 1 THEN		
			eCmd2Event_EventName 						:= E_EventName.StackUpTrayStackerCancelCompleted;	
			sCmd2Event_EventName 						:= 'StackUpTrayStackerCancelCompleted';
		ELSE				
			eCmd2Event_EventName 						:= E_EventName.StackUpTrayStackerCancelFailed;	
			sCmd2Event_EventName 						:= 'StackUpTrayStackerCancelFailed';
		END_IF	
	
	E_TaskName.MoveConveyorForwardRetry: //MoveConveyorForwardRetry	
		IF iCmd2Event_Result = 1 THEN		
			eCmd2Event_EventName 						:= E_EventName.MoveConveyorForwardRetryCompleted;	
			sCmd2Event_EventName 						:= 'MoveConveyorForwardRetryCompleted';
		ELSE				
			eCmd2Event_EventName 						:= E_EventName.MoveConveyorForwardRetryFailed;
			sCmd2Event_EventName 						:= 'MoveConveyorForwardRetryFailed';
		END_IF	
	
	E_TaskName.MoveConveyorForwardCancel: //MoveConveyorForwardCancel	
		IF iCmd2Event_Result = 1 THEN		
			eCmd2Event_EventName 						:= E_EventName.MoveConveyorForwardCancelCompleted;	
			sCmd2Event_EventName 						:= 'MoveConveyorForwardCancelCompleted';
		ELSE				
			eCmd2Event_EventName 						:= E_EventName.MoveConveyorForwardCancelFailed;	
			sCmd2Event_EventName 						:= 'MoveConveyorForwardCancelFailed';
		END_IF	
	
	E_TaskName.MoveConveyorBackwardRetry: //MoveConveyorBackwardRetry	
		IF iCmd2Event_Result = 1 THEN		
			eCmd2Event_EventName 						:= E_EventName.MoveConveyorBackwardRetryCompleted;	
			sCmd2Event_EventName 						:= 'MoveConveyorBackwardRetryCompleted';
		ELSE				
			eCmd2Event_EventName 						:= E_EventName.MoveConveyorBackwardRetryFailed;	
			sCmd2Event_EventName 						:= 'MoveConveyorBackwardRetryFailed';
		END_IF	
	
	E_TaskName.MoveConveyorBackwardCancel: //MoveConveyorBackwardCancel	
		IF iCmd2Event_Result = 1 THEN		
			eCmd2Event_EventName 						:= E_EventName.MoveConveyorBackwardCancelCompleted;	
			sCmd2Event_EventName 						:= 'MoveConveyorBackwardCancelCompleted';
		ELSE				
			eCmd2Event_EventName 						:= E_EventName.MoveConveyorBackwardCancelFailed;	
			sCmd2Event_EventName 						:= 'MoveConveyorBackwardCancelFailed';
		END_IF	
	
	E_TaskName.MoveVisionShuttleRetry: //MoveVisionShuttleRetry	
		IF iCmd2Event_Result = 1 THEN		
			eCmd2Event_EventName 						:= E_EventName.MoveVisionShuttleRetryCompleted;	
			sCmd2Event_EventName 						:= 'MoveVisionShuttleRetryCompleted';
		ELSE				
			eCmd2Event_EventName 						:= E_EventName.MoveVisionShuttleRetryFailed;	
			sCmd2Event_EventName 						:= 'MoveVisionShuttleRetryFailed';
		END_IF	
	
	E_TaskName.MoveVisionShuttleCancel: //MoveVisionShuttleCancel	
		IF iCmd2Event_Result = 1 THEN		
			eCmd2Event_EventName 						:= E_EventName.MoveVisionShuttleCancelCompleted;	
			sCmd2Event_EventName 						:= 'MoveVisionShuttleCancelCompleted';
		ELSE				
			eCmd2Event_EventName 						:= E_EventName.MoveVisionShuttleCancelFailed;	
			sCmd2Event_EventName 						:= 'MoveVisionShuttleCancelFailed';
		END_IF	
	
	E_TaskName.MoveUPortShuttleRetry: //MoveUPortShuttleRetry	
		IF iCmd2Event_Result = 1 THEN		
			eCmd2Event_EventName 						:= E_EventName.MoveUPortShuttleRetryCompleted;
			sCmd2Event_EventName 						:= 'MoveUPortShuttleRetryCompleted';
		ELSE				
			eCmd2Event_EventName 						:= E_EventName.MoveUPortShuttleRetryFailed;	
			sCmd2Event_EventName 						:= 'MoveUPortShuttleRetryFailed';
		END_IF	
	
	E_TaskName.MoveUPortShuttleCancel: //MoveUPortShuttleCancel	
		IF iCmd2Event_Result = 1 THEN		
			eCmd2Event_EventName 						:= E_EventName.MoveUPortShuttleCancelCompleted;	
			sCmd2Event_EventName 						:= 'MoveUPortShuttleCancelCompleted';
		ELSE				
			eCmd2Event_EventName 						:= E_EventName.MoveUPortShuttleCancelFailed;	
			sCmd2Event_EventName 						:= 'MoveUPortShuttleCancelFailed';
		END_IF	
	
	E_TaskName.MoveTrayScanShuttleRetry: //MoveTrayScanShuttleRetry	
		IF iCmd2Event_Result = 1 THEN		
			eCmd2Event_EventName 						:= E_EventName.MoveTrayScanShuttleRetryCompleted;
			sCmd2Event_EventName 						:= 'MoveTrayScanShuttleRetryCompleted';
		ELSE				
			eCmd2Event_EventName 						:= E_EventName.MoveTrayScanShuttleRetryFailed;	
			sCmd2Event_EventName 						:= 'MoveTrayScanShuttleRetryFailed';
		END_IF	
	
	E_TaskName.MoveTrayScanShuttleCancel: //MoveTrayScanShuttleCancel	
		IF iCmd2Event_Result = 1 THEN		
			eCmd2Event_EventName 						:= E_EventName.MoveTrayScanShuttleCancelCompleted;	
			sCmd2Event_EventName 						:= 'MoveTrayScanShuttleCancelCompleted';
		ELSE				
			eCmd2Event_EventName := E_EventName.MoveTrayScanShuttleCancelFailed;	
			sCmd2Event_EventName := 'MoveTrayScanShuttleCancelFailed';
		END_IF	
	
	E_TaskName.MoveTrayScanShuttleLifterRetry: //MoveTrayScanShuttleLifterRetry	
		IF iCmd2Event_Result = 1 THEN		
			eCmd2Event_EventName := E_EventName.MoveTrayScanShuttleLifterRetryCompleted;	
			sCmd2Event_EventName := 'MoveTrayScanShuttleLifterRetryCompleted';
		ELSE				
			eCmd2Event_EventName := E_EventName.MoveTrayScanShuttleLifterRetryFailed;	
			sCmd2Event_EventName := 'MoveTrayScanShuttleLifterRetryFailed';
		END_IF	
	
	E_TaskName.MoveTrayScanShuttleLifterCancel: //MoveTrayScanShuttleLifterCancel	
		IF iCmd2Event_Result = 1 THEN		
			eCmd2Event_EventName := E_EventName.MoveTrayScanShuttleLifterCancelCompleted;	
			sCmd2Event_EventName := 'MoveTrayScanShuttleLifterCancelCompleted';
		ELSE				
			eCmd2Event_EventName := E_EventName.MoveTrayScanShuttleLifterCancelFailed;	
			sCmd2Event_EventName := 'MoveTrayScanShuttleLifterCancelFailed';
		END_IF	
	
	E_TaskName.Cancel: //Cancel	
		IF iCmd2Event_Result = 1 THEN		
			eCmd2Event_EventName := E_EventName.CancelCompleted;	
			sCmd2Event_EventName := 'CancelCompleted';
		(*ELSE
			eCmd2Event_EventName := E_EventName.CancelFailed;	
			sCmd2Event_EventName := 'CancelFailed';*)
		END_IF	
	
	E_TaskName.TIUSlideOutRetry: //TIUSlideOutRetry	
		IF iCmd2Event_Result = 1 THEN		
			eCmd2Event_EventName := E_EventName.TIUSlideOutRetryCompleted;	
			sCmd2Event_EventName := 'TIUSlideOutRetryCompleted';
		ELSE				
			eCmd2Event_EventName := E_EventName.TIUSlideOutRetryFailed;	
			sCmd2Event_EventName := 'TIUSlideOutRetryFailed';
		END_IF	
	
	E_TaskName.TIUSlideOutCancel: //TIUSlideOutCancel	
		IF iCmd2Event_Result = 1 THEN		
			eCmd2Event_EventName := E_EventName.TIUSlideOutCancelCompleted;	
			sCmd2Event_EventName := 'TIUSlideOutCancelCompleted';
		ELSE				
			eCmd2Event_EventName := E_EventName.TIUSlideOutCancelFailed;	
			sCmd2Event_EventName := 'TIUSlideOutCancelFailed';
		END_IF
	
	E_TaskName.MoveTTSShuttle: //MoveTTSShuttle	
		IF iCmd2Event_Result = 1 THEN		
			eCmd2Event_EventName := E_EventName.MoveTTSShuttleCompleted;	
			sCmd2Event_EventName := 'MoveTTSShuttleCompleted';
		ELSE				
			eCmd2Event_EventName := E_EventName.MoveTTSShuttleFailed;	
			sCmd2Event_EventName := 'MoveTTSShuttleFailed';
		END_IF	
	
	E_TaskName.MoveTTSShuttleRetry: //MoveTTSShuttleRetry	
		IF iCmd2Event_Result = 1 THEN		
			eCmd2Event_EventName := E_EventName.MoveTTSShuttleRetryCompleted;	
			sCmd2Event_EventName := 'MoveTTSShuttleRetryCompleted';
		ELSE				
			eCmd2Event_EventName := E_EventName.MoveTTSShuttleRetryFailed;	
			sCmd2Event_EventName := 'MoveTTSShuttleRetryFailed';
		END_IF	
	
	E_TaskName.MoveTTSShuttleCancel: //MoveTTSShuttleCancel	
		IF iCmd2Event_Result = 1 THEN		
			eCmd2Event_EventName := E_EventName.MoveTTSShuttleCancelCompleted;	
			sCmd2Event_EventName := 'MoveTTSShuttleCancelCompleted';
		ELSE				
			eCmd2Event_EventName := E_EventName.MoveTTSShuttleCancelFailed;	
			sCmd2Event_EventName := 'MoveTTSShuttleCancelFailed';
		END_IF	
	
	E_TaskName.SingulateTrayLatchRemaining: //SingulateTrayLatchRemaining	
		IF iCmd2Event_Result = 1 THEN		
			eCmd2Event_EventName := E_EventName.SingulateTrayLatchRemainingCompleted;	
			sCmd2Event_EventName := 'SingulateTrayLatchRemainingCompleted';
		ELSE				
			eCmd2Event_EventName := E_EventName.SingulateTrayLatchRemainingFailed;	
			sCmd2Event_EventName := 'SingulateTrayLatchRemainingFailed';
		END_IF	
	
	E_TaskName.SingulateTrayLatchRemainingRetry: //SingulateTrayLatchRemainingRetry	
		IF iCmd2Event_Result = 1 THEN		
			eCmd2Event_EventName := E_EventName.SingulateTrayLatchRemainingRetryCompleted;	
			sCmd2Event_EventName := 'SingulateTrayLatchRemainingRetryCompleted';
		ELSE				
			eCmd2Event_EventName := E_EventName.SingulateTrayLatchRemainingRetryFailed;	
			sCmd2Event_EventName := 'SingulateTrayLatchRemainingRetryFailed';
		END_IF
		
	E_TaskName.SingulateTrayLatchRemainingCancel: //SingulateTrayLatchRemainingCancel	
		IF iCmd2Event_Result = 1 THEN		
			eCmd2Event_EventName := E_EventName.SingulateTrayLatchRemainingCancelCompleted;	
			sCmd2Event_EventName := 'SingulateTrayLatchRemainingCancelCompleted';
		ELSE				
			eCmd2Event_EventName := E_EventName.SingulateTrayLatchRemainingCancelFailed;	
			sCmd2Event_EventName := 'SingulateTrayLatchRemainingCancelFailed';
		END_IF		
	
	
	E_TaskName.SingulateTrayLatch: //SingulateTrayLatch	
		IF iCmd2Event_Result = 1 THEN		
			eCmd2Event_EventName := E_EventName.SingulateTrayLatchCompleted;	
			sCmd2Event_EventName := 'SingulateTrayLatchCompleted';
		ELSE				
			eCmd2Event_EventName := E_EventName.SingulateTrayLatchFailed;	
			sCmd2Event_EventName := 'SingulateTrayLatchFailed';
		END_IF		
	
		
	E_TaskName.SingulateTrayLatchRetry: //SingulateTrayLatchRetry	
		IF iCmd2Event_Result = 1 THEN		
			eCmd2Event_EventName := E_EventName.SingulateTrayLatchRetryCompleted;	
			sCmd2Event_EventName := 'SingulateTrayLatchRetryCompleted';
		ELSE				
			eCmd2Event_EventName := E_EventName.SingulateTrayLatchRetryFailed;	
			sCmd2Event_EventName := 'SingulateTrayLatchRetryFailed';
		END_IF		
	
	E_TaskName.SingulateTrayLatchCancel: //SingulateTrayLatchCancel	
		IF iCmd2Event_Result = 1 THEN		
			eCmd2Event_EventName := E_EventName.SingulateTrayLatchCancelCompleted;	
			sCmd2Event_EventName := 'SingulateTrayLatchCancelCompleted';
		ELSE				
			eCmd2Event_EventName := E_EventName.SingulateTrayLatchCancelFailed;	
			sCmd2Event_EventName := 'SingulateTrayLatchCancelFailed';
		END_IF		
		
	E_TaskName.StackUpTrayLatch: //StackUpTrayLatch	
		IF iCmd2Event_Result = 1 THEN		
			eCmd2Event_EventName := E_EventName.StackUpTrayLatchCompleted;	
			sCmd2Event_EventName := 'StackUpTrayLatchCompleted';
		ELSE				
			eCmd2Event_EventName := E_EventName.StackUpTrayLatchFailed;	
			sCmd2Event_EventName := 'StackUpTrayLatchFailed';
		END_IF		
		
	E_TaskName.StackUpTrayLatchRetry: //StackUpTrayLatchRetry	
		IF iCmd2Event_Result = 1 THEN		
			eCmd2Event_EventName := E_EventName.StackUpTrayLatchRetryCompleted;	
			sCmd2Event_EventName := 'StackUpTrayLatchRetryCompleted';
		ELSE				
			eCmd2Event_EventName := E_EventName.StackUpTrayLatchRetryFailed;	
			sCmd2Event_EventName := 'StackUpTrayLatchRetryFailed';
		END_IF	
		
	E_TaskName.StackUpTrayLatchCancel: //StackUpTrayLatchCancel	
		IF iCmd2Event_Result = 1 THEN		
			eCmd2Event_EventName := E_EventName.StackUpTrayLatchCancelCompleted;	
			sCmd2Event_EventName := 'StackUpTrayLatchCancelCompleted';
		ELSE				
			eCmd2Event_EventName := E_EventName.StackUpTrayLatchCancelFailed;	
			sCmd2Event_EventName := 'StackUpTrayLatchCancelFailed';
		END_IF	
		
	E_TaskName.SingulateCylinderTray:	
		IF iCmd2Event_Result = 1 THEN		
			eCmd2Event_EventName := E_EventName.SingulateCylinderTrayCompleted;	
			sCmd2Event_EventName := 'SingulateCylinderTrayCompleted';
		ELSE				
			eCmd2Event_EventName := E_EventName.SingulateCylinderTrayFailed;	
			sCmd2Event_EventName := 'SingulateCylinderTrayFailed';
		END_IF	
	
	E_TaskName.SingulateCylinderTrayRetry:	
		IF iCmd2Event_Result = 1 THEN		
			eCmd2Event_EventName := E_EventName.SingulateCylinderTrayRetryCompleted;	
			sCmd2Event_EventName := 'SingulateCylinderTrayRetryCompleted';
		ELSE				
			eCmd2Event_EventName := E_EventName.SingulateCylinderTrayRetryFailed;	
			sCmd2Event_EventName := 'SingulateCylinderTrayRetryFailed';
		END_IF	
	
	E_TaskName.SingulateCylinderTrayCancel:	
		IF iCmd2Event_Result = 1 THEN		
			eCmd2Event_EventName := E_EventName.SingulateCylinderTrayCancelCompleted;	
			sCmd2Event_EventName := 'SingulateCylinderTrayRetryCompleted';
		ELSE				
			eCmd2Event_EventName := E_EventName.SingulateCylinderTrayCancelFailed;	
			sCmd2Event_EventName := 'SingulateCylinderTrayCancelFailed';
		END_IF	
		
	E_TaskName.StackupCylinderTray:	
		IF iCmd2Event_Result = 1 THEN		
			eCmd2Event_EventName := E_EventName.StackupCylinderTrayCompleted;	
			sCmd2Event_EventName := 'StackupCylinderTrayCompleted';
		ELSE				
			eCmd2Event_EventName := E_EventName.StackupCylinderTrayFailed;	
			sCmd2Event_EventName := 'StackupCylinderTrayFailed';
		END_IF
	
	
	E_TaskName.StackupCylinderTrayRetry:	
		IF iCmd2Event_Result = 1 THEN		
			eCmd2Event_EventName := E_EventName.StackupCylinderTrayRetryCompleted;	
			sCmd2Event_EventName := 'StackupCylinderTrayRetryCompleted';
		ELSE				
			eCmd2Event_EventName := E_EventName.StackupCylinderTrayRetryFailed;	
			sCmd2Event_EventName := 'StackupCylinderTrayRetryFailed';
		END_IF
	
	E_TaskName.StackupCylinderTrayCancel:	
		IF iCmd2Event_Result = 1 THEN		
			eCmd2Event_EventName := E_EventName.StackupCylinderTrayCancelCompleted;	
			sCmd2Event_EventName := 'StackupCylinderTrayCancelCompleted';
		ELSE				
			eCmd2Event_EventName := E_EventName.StackupCylinderTrayCancelFailed;	
			sCmd2Event_EventName := 'StackupCylinderTrayCancelFailed';
		END_IF
			
	E_TaskName.SetUportBlinkRate:	
		IF iCmd2Event_Result = 1 THEN		
			eCmd2Event_EventName := E_EventName.SetUportBlinkRateCompleted;	
			sCmd2Event_EventName := 'SetUportBlinkRateCompleted';
		ELSE				
			eCmd2Event_EventName := E_EventName.SetUportBlinkRateFailed;	
			sCmd2Event_EventName := 'SetUportBlinkRateFailed';
		END_IF	
		
	//	TC New Command
	E_TaskName.DrawerUp:	
		IF iCmd2Event_Result = 1 THEN		
			eCmd2Event_EventName := E_EventName.DrawerUpCompleted;	
			sCmd2Event_EventName := 'TCCellDrawerUpCompleted';
		ELSE				
			eCmd2Event_EventName := E_EventName.DrawerUpFailed;	
			sCmd2Event_EventName := 'TCCellDrawerUpFailed';
		END_IF	
	E_TaskName.APAirValve:	
		IF iCmd2Event_Result = 1 THEN		
			eCmd2Event_EventName := E_EventName.APAirValveCompleted;	
			sCmd2Event_EventName := 'TCCellAPAirValveCompleted';
		ELSE				
			eCmd2Event_EventName := E_EventName.APAirValveFailed;	
			sCmd2Event_EventName := 'TCCellAPAirValveFailed';
		END_IF	
	E_TaskName.TesterAirValve:	
		IF iCmd2Event_Result = 1 THEN		
			eCmd2Event_EventName := E_EventName.TesterAirValveCompleted;	
			sCmd2Event_EventName := 'TCCellTesterAirValveCompleted';
		ELSE				
			eCmd2Event_EventName := E_EventName.TesterAirValveFailed;	
			sCmd2Event_EventName := 'TCCellTesterAirValveFailed';
		END_IF	
	E_TaskName.AP240ACPOWER:	
		IF iCmd2Event_Result = 1 THEN		
			eCmd2Event_EventName := E_EventName.AP240ACPwrCompleted;	
			sCmd2Event_EventName := 'TCCellAP240ACPwrCompleted';
		ELSE				
			eCmd2Event_EventName := E_EventName.AP240ACPwrFailed;	
			sCmd2Event_EventName := 'TCCellAP240ACPwrFailed';
		END_IF	
	E_TaskName.TIUSocketCoolingAir:	
		IF iCmd2Event_Result = 1 THEN		
			eCmd2Event_EventName := E_EventName.TIUSocketCoolingAirCompleted;	
			sCmd2Event_EventName := 'TIUSocketCoolingAirCompleted';
		ELSE				
			;//eCmd2Event_EventName := E_EventName.AP240ACPwrFailed;	
			//sCmd2Event_EventName := 'TCCellAP240ACPwrFailed';
		END_IF	
	E_TaskName.SetBlinkRate:	
		IF iCmd2Event_Result = 1 THEN		
			eCmd2Event_EventName := E_EventName.SetBlinkRateCompleted;	
			sCmd2Event_EventName := 'SetBlinkRateCompleted';
		ELSE				
			;//eCmd2Event_EventName := E_EventName.AP240ACPwrFailed;	
			//sCmd2Event_EventName := 'TCCellAP240ACPwrFailed';
		END_IF	
	E_TaskName.SetSolenoidValves:	
		IF iCmd2Event_Result = 1 THEN		
			eCmd2Event_EventName := E_EventName.SetSolenoidValvesCompleted;	
			sCmd2Event_EventName := 'SetSolenoidValvesCompleted';
		ELSE
			eCmd2Event_EventName := E_EventName.SetSolenoidValvesFailed;	
			sCmd2Event_EventName := 'SetSolenoidValvesFailed';
		END_IF	
	
	E_TaskName.Secondary24VPower:	
		IF iCmd2Event_Result = 1 THEN		
			eCmd2Event_EventName := E_EventName.Secondary24VPowerCompleted;	
			sCmd2Event_EventName := 'Secondary24VPowerCompleted';
		ELSE				
			eCmd2Event_EventName := E_EventName.Secondary24VPowerFailed;	
			sCmd2Event_EventName := 'Secondary24VPowerFailed';
		END_IF
		
	ELSE
		sCmd2Event_EventName := 'Command not found';
END_CASE

//M_nCmdEvent_Conversion:=eCmd2Event_EventName;//SEL(eCmd2Event_EventName>0,99,eCmd2Event_EventName);
]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_nModuleIDConversion" Id="{16eb203b-0a4b-46dc-935c-22412fe405a9}">
      <Declaration><![CDATA[METHOD M_nModuleIDConversion : STRING
VAR_INPUT
	eModuleID 					: E_ModuleID ;
	//iType 					: INT;	//1:Completed, 2:Failed
END_VAR
VAR_OUTPUT
	iLevel 						: INT;
	iModuleID 					: INT; 
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[CASE eModuleID OF
	E_ModuleID.CELL_LA101_TESTER: iLevel:=1; iModuleID:=1; M_nModuleIDConversion := 'CELL_LA101_TESTER'; //CELL_LA101_TESTER
	E_ModuleID.CELL_LB101_TESTER: iLevel:=1; iModuleID:=2; M_nModuleIDConversion := 'CELL_LB101_TESTER';
	E_ModuleID.CELL_LC101_TESTER: iLevel:=1; iModuleID:=3; M_nModuleIDConversion := 'CELL_LC101_TESTER';
	E_ModuleID.CELL_RA101_TESTER: iLevel:=1; iModuleID:=4; M_nModuleIDConversion := 'CELL_RA101_TESTER';
	E_ModuleID.CELL_RB101_TESTER: iLevel:=1; iModuleID:=5; M_nModuleIDConversion := 'CELL_RB101_TESTER';
	E_ModuleID.CELL_RC101_TESTER: iLevel:=1; iModuleID:=6; M_nModuleIDConversion := 'CELL_RC101_TESTER';
	                                       
	E_ModuleID.CELL_lA201_TESTER: iLevel:=2; iModuleID:=1; M_nModuleIDConversion := 'CELL_lA201_TESTER';
	E_ModuleID.CELL_LB201_TESTER: iLevel:=2; iModuleID:=2; M_nModuleIDConversion := 'CELL_LB201_TESTER';
	E_ModuleID.CELL_LC201_TESTER: iLevel:=2; iModuleID:=3; M_nModuleIDConversion := 'CELL_LC201_TESTER';
	E_ModuleID.CELL_RA201_TESTER: iLevel:=2; iModuleID:=4; M_nModuleIDConversion := 'CELL_RA201_TESTER';
	E_ModuleID.CELL_RB201_TESTER: iLevel:=2; iModuleID:=5; M_nModuleIDConversion := 'CELL_RB201_TESTER';
	E_ModuleID.CELL_RC201_TESTER: iLevel:=2; iModuleID:=6; M_nModuleIDConversion := 'CELL_RC201_TESTER';
                                           
	E_ModuleID.CELL_LA301_TESTER: iLevel:=3; iModuleID:=1; M_nModuleIDConversion := 'CELL_LA301_TESTER';
	E_ModuleID.CELL_LB301_TESTER: iLevel:=3; iModuleID:=2; M_nModuleIDConversion := 'CELL_LB301_TESTER';
	E_ModuleID.CELL_LC301_TESTER: iLevel:=3; iModuleID:=3; M_nModuleIDConversion := 'CELL_LC301_TESTER';
	E_ModuleID.CELL_RA301_TESTER: iLevel:=3; iModuleID:=4; M_nModuleIDConversion := 'CELL_RA301_TESTER';
	E_ModuleID.CELL_RB301_TESTER: iLevel:=3; iModuleID:=5; M_nModuleIDConversion := 'CELL_RB301_TESTER';
	E_ModuleID.CELL_RC301_TESTER: iLevel:=3; iModuleID:=6; M_nModuleIDConversion := 'CELL_RC301_TESTER';
                                           
	E_ModuleID.CELL_LA401_TESTER: iLevel:=4; iModuleID:=1; M_nModuleIDConversion := 'CELL_LA401_TESTER';
	E_ModuleID.CELL_LB401_TESTER: iLevel:=4; iModuleID:=2; M_nModuleIDConversion := 'CELL_LB401_TESTER';
	E_ModuleID.CELL_LC401_TESTER: iLevel:=4; iModuleID:=3; M_nModuleIDConversion := 'CELL_LC401_TESTER';
	E_ModuleID.CELL_RA401_TESTER: iLevel:=4; iModuleID:=4; M_nModuleIDConversion := 'CELL_RA401_TESTER';
	E_ModuleID.CELL_RB401_TESTER: iLevel:=4; iModuleID:=5; M_nModuleIDConversion := 'CELL_RB401_TESTER';
	E_ModuleID.CELL_RC401_TESTER: iLevel:=4; iModuleID:=6; M_nModuleIDConversion := 'CELL_RC401_TESTER';
                                           
	E_ModuleID.CELL_LA501_TESTER: iLevel:=5; iModuleID:=1; M_nModuleIDConversion := 'CELL_LA501_TESTER';
	E_ModuleID.CELL_LB501_TESTER: iLevel:=5; iModuleID:=2; M_nModuleIDConversion := 'CELL_LB501_TESTER';
	E_ModuleID.CELL_LC501_TESTER: iLevel:=5; iModuleID:=3; M_nModuleIDConversion := 'CELL_LC501_TESTER';
	E_ModuleID.CELL_RA501_TESTER: iLevel:=5; iModuleID:=4; M_nModuleIDConversion := 'CELL_RA501_TESTER';
	E_ModuleID.CELL_RB501_TESTER: iLevel:=5; iModuleID:=5; M_nModuleIDConversion := 'CELL_RB501_TESTER';
	E_ModuleID.CELL_RC501_TESTER: iLevel:=5; iModuleID:=6; M_nModuleIDConversion := 'CELL_RC501_TESTER';
                                        
	E_ModuleID.CELL_LA601_TESTER: iLevel:=6; iModuleID:=1; M_nModuleIDConversion := 'CELL_LA601_TESTER';
	E_ModuleID.CELL_LB601_TESTER: iLevel:=6; iModuleID:=2; M_nModuleIDConversion := 'CELL_LB601_TESTER';
	E_ModuleID.CELL_LC601_TESTER: iLevel:=6; iModuleID:=3; M_nModuleIDConversion := 'CELL_LC601_TESTER';
	E_ModuleID.CELL_RA601_TESTER: iLevel:=6; iModuleID:=4; M_nModuleIDConversion := 'CELL_RA601_TESTER';
	E_ModuleID.CELL_RB601_TESTER: iLevel:=6; iModuleID:=5; M_nModuleIDConversion := 'CELL_RB601_TESTER';
	E_ModuleID.CELL_RC601_TESTER: iLevel:=6; iModuleID:=6; M_nModuleIDConversion := 'CELL_RC601_TESTER';		
	
	E_ModuleID.COLUMN_LA  : iLevel:=99;iModuleID:=1; M_nModuleIDConversion := 'TESTER_COLUMN_LA';
	E_ModuleID.COLUMN_LB  : iLevel:=99;iModuleID:=2; M_nModuleIDConversion := 'TESTER_COLUMN_LB';
	E_ModuleID.COLUMN_LC  : iLevel:=99;iModuleID:=3; M_nModuleIDConversion := 'TESTER_COLUMN_LC';
	E_ModuleID.COLUMN_RA  : iLevel:=99;iModuleID:=4; M_nModuleIDConversion := 'TESTER_COLUMN_RA';
	E_ModuleID.COLUMN_RB  : iLevel:=99;iModuleID:=5; M_nModuleIDConversion := 'TESTER_COLUMN_RB';
	E_ModuleID.COLUMN_RC  : iLevel:=99;iModuleID:=6; M_nModuleIDConversion := 'TESTER_COLUMN_RC';
	

	//Front Door
	E_ModuleID.CELL_LA101_TESTER_FRONT: iLevel:=101; iModuleID:=101; M_nModuleIDConversion := 'CELL_LA101_TESTER_FRONT';
//	E_ModuleID.CELL_LB101_TESTER_FRONT: iLevel:=101; iModuleID:=102; M_nModuleIDConversion := 'CELL_LB101_TESTER_FRONT';
//	E_ModuleID.CELL_LC101_TESTER_FRONT: iLevel:=101; iModuleID:=103; M_nModuleIDConversion := 'CELL_LC101_TESTER_FRONT';
//	E_ModuleID.CELL_RA101_TESTER_FRONT: iLevel:=101; iModuleID:=104; M_nModuleIDConversion := 'CELL_RA101_TESTER_FRONT';
//	E_ModuleID.CELL_RB101_TESTER_FRONT: iLevel:=101; iModuleID:=105; M_nModuleIDConversion := 'CELL_RB101_TESTER_FRONT';
//	E_ModuleID.CELL_RC101_TESTER_FRONT: iLevel:=101; iModuleID:=106; M_nModuleIDConversion := 'CELL_RC101_TESTER_FRONT';
                                                                                                                      
	E_ModuleID.CELL_lA201_TESTER_FRONT: iLevel:=102; iModuleID:=101; M_nModuleIDConversion := 'CELL_lA201_TESTER_FRONT';
//	E_ModuleID.CELL_LB201_TESTER_FRONT: iLevel:=102; iModuleID:=102; M_nModuleIDConversion := 'CELL_LB201_TESTER_FRONT';
//	E_ModuleID.CELL_LC201_TESTER_FRONT: iLevel:=102; iModuleID:=103; M_nModuleIDConversion := 'CELL_LC201_TESTER_FRONT';
//	E_ModuleID.CELL_RA201_TESTER_FRONT: iLevel:=102; iModuleID:=104; M_nModuleIDConversion := 'CELL_RA201_TESTER_FRONT';
//	E_ModuleID.CELL_RB201_TESTER_FRONT: iLevel:=102; iModuleID:=105; M_nModuleIDConversion := 'CELL_RB201_TESTER_FRONT';
//	E_ModuleID.CELL_RC201_TESTER_FRONT: iLevel:=102; iModuleID:=106; M_nModuleIDConversion := 'CELL_RC201_TESTER_FRONT';
                                                                                                                      
//	E_ModuleID.CELL_LA301_TESTER_FRONT: iLevel:=103; iModuleID:=101; M_nModuleIDConversion := 'CELL_LA301_TESTER_FRONT';
//	E_ModuleID.CELL_LB301_TESTER_FRONT: iLevel:=103; iModuleID:=102; M_nModuleIDConversion := 'CELL_LB301_TESTER_FRONT';
//	E_ModuleID.CELL_LC301_TESTER_FRONT: iLevel:=103; iModuleID:=103; M_nModuleIDConversion := 'CELL_LC301_TESTER_FRONT';
//	E_ModuleID.CELL_RA301_TESTER_FRONT: iLevel:=103; iModuleID:=104; M_nModuleIDConversion := 'CELL_RA301_TESTER_FRONT';
//	E_ModuleID.CELL_RB301_TESTER_FRONT: iLevel:=103; iModuleID:=105; M_nModuleIDConversion := 'CELL_RB301_TESTER_FRONT';
//	E_ModuleID.CELL_RC301_TESTER_FRONT: iLevel:=103; iModuleID:=106; M_nModuleIDConversion := 'CELL_RC301_TESTER_FRONT';
//                                                                                                                      
//	E_ModuleID.CELL_LA401_TESTER_FRONT: iLevel:=104; iModuleID:=101; M_nModuleIDConversion := 'CELL_LA401_TESTER_FRONT';
//	E_ModuleID.CELL_LB401_TESTER_FRONT: iLevel:=104; iModuleID:=102; M_nModuleIDConversion := 'CELL_LB401_TESTER_FRONT';
//	E_ModuleID.CELL_LC401_TESTER_FRONT: iLevel:=104; iModuleID:=103; M_nModuleIDConversion := 'CELL_LC401_TESTER_FRONT';
//	E_ModuleID.CELL_RA401_TESTER_FRONT: iLevel:=104; iModuleID:=104; M_nModuleIDConversion := 'CELL_RA401_TESTER_FRONT';
//	E_ModuleID.CELL_RB401_TESTER_FRONT: iLevel:=104; iModuleID:=105; M_nModuleIDConversion := 'CELL_RB401_TESTER_FRONT';
//	E_ModuleID.CELL_RC401_TESTER_FRONT: iLevel:=104; iModuleID:=106; M_nModuleIDConversion := 'CELL_RC401_TESTER_FRONT';
//                                                                                                                      
//	E_ModuleID.CELL_LA501_TESTER_FRONT: iLevel:=105; iModuleID:=101; M_nModuleIDConversion := 'CELL_LA501_TESTER_FRONT';
//	E_ModuleID.CELL_LB501_TESTER_FRONT: iLevel:=105; iModuleID:=102; M_nModuleIDConversion := 'CELL_LB501_TESTER_FRONT';
//	E_ModuleID.CELL_LC501_TESTER_FRONT: iLevel:=105; iModuleID:=103; M_nModuleIDConversion := 'CELL_LC501_TESTER_FRONT';
//	E_ModuleID.CELL_RA501_TESTER_FRONT: iLevel:=105; iModuleID:=104; M_nModuleIDConversion := 'CELL_RA501_TESTER_FRONT';
//	E_ModuleID.CELL_RB501_TESTER_FRONT: iLevel:=105; iModuleID:=105; M_nModuleIDConversion := 'CELL_RB501_TESTER_FRONT';
//	E_ModuleID.CELL_RC501_TESTER_FRONT: iLevel:=105; iModuleID:=106; M_nModuleIDConversion := 'CELL_RC501_TESTER_FRONT';
//                                                                                                                      
//	E_ModuleID.CELL_LA601_TESTER_FRONT: iLevel:=106; iModuleID:=101; M_nModuleIDConversion := 'CELL_LA601_TESTER_FRONT';
//	E_ModuleID.CELL_LB601_TESTER_FRONT: iLevel:=106; iModuleID:=102; M_nModuleIDConversion := 'CELL_LB601_TESTER_FRONT';
//	E_ModuleID.CELL_LC601_TESTER_FRONT: iLevel:=106; iModuleID:=103; M_nModuleIDConversion := 'CELL_LC601_TESTER_FRONT';
//	E_ModuleID.CELL_RA601_TESTER_FRONT: iLevel:=106; iModuleID:=104; M_nModuleIDConversion := 'CELL_RA601_TESTER_FRONT';
//	E_ModuleID.CELL_RB601_TESTER_FRONT: iLevel:=106; iModuleID:=105; M_nModuleIDConversion := 'CELL_RB601_TESTER_FRONT';
//	E_ModuleID.CELL_RC601_TESTER_FRONT: iLevel:=106; iModuleID:=106; M_nModuleIDConversion := 'CELL_RC601_TESTER_FRONT';

	
	E_ModuleID.CELL_LA101_AP: iLevel:=1; iModuleID:=1; M_nModuleIDConversion := 'CELL_LA101_AP'; 
	E_ModuleID.CELL_LB101_AP: iLevel:=1; iModuleID:=2; M_nModuleIDConversion := 'CELL_LB101_AP'; 
	E_ModuleID.CELL_LC101_AP: iLevel:=1; iModuleID:=3; M_nModuleIDConversion := 'CELL_LC101_AP'; 
	E_ModuleID.CELL_RA101_AP: iLevel:=1; iModuleID:=4; M_nModuleIDConversion := 'CELL_RA101_AP'; 
	E_ModuleID.CELL_RB101_AP: iLevel:=1; iModuleID:=5; M_nModuleIDConversion := 'CELL_RB101_AP'; 
	E_ModuleID.CELL_RC101_AP: iLevel:=1; iModuleID:=6; M_nModuleIDConversion := 'CELL_RC101_AP'; 
	                                                                                            
	E_ModuleID.CELL_LA201_AP: iLevel:=2; iModuleID:=1; M_nModuleIDConversion := 'CELL_LA201_AP'; 
	E_ModuleID.CELL_LB201_AP: iLevel:=2; iModuleID:=2; M_nModuleIDConversion := 'CELL_LB201_AP'; 
	E_ModuleID.CELL_LC201_AP: iLevel:=2; iModuleID:=3; M_nModuleIDConversion := 'CELL_LC201_AP'; 
	E_ModuleID.CELL_RA201_AP: iLevel:=2; iModuleID:=4; M_nModuleIDConversion := 'CELL_RA201_AP'; 
	E_ModuleID.CELL_RB201_AP: iLevel:=2; iModuleID:=5; M_nModuleIDConversion := 'CELL_RB201_AP'; 
	E_ModuleID.CELL_RC201_AP: iLevel:=2; iModuleID:=6; M_nModuleIDConversion := 'CELL_RC201_AP'; 
                                                                                                
	E_ModuleID.CELL_LA301_AP: iLevel:=3; iModuleID:=1; M_nModuleIDConversion := 'CELL_LA301_AP'; 
	E_ModuleID.CELL_LB301_AP: iLevel:=3; iModuleID:=2; M_nModuleIDConversion := 'CELL_LB301_AP'; 
	E_ModuleID.CELL_LC301_AP: iLevel:=3; iModuleID:=3; M_nModuleIDConversion := 'CELL_LC301_AP'; 
	E_ModuleID.CELL_RA301_AP: iLevel:=3; iModuleID:=4; M_nModuleIDConversion := 'CELL_RA301_AP'; 
	E_ModuleID.CELL_RB301_AP: iLevel:=3; iModuleID:=5; M_nModuleIDConversion := 'CELL_RB301_AP'; 
	E_ModuleID.CELL_RC301_AP: iLevel:=3; iModuleID:=6; M_nModuleIDConversion := 'CELL_RC301_AP'; 
                                                                                                
	E_ModuleID.CELL_LA401_AP: iLevel:=4; iModuleID:=1; M_nModuleIDConversion := 'CELL_LA401_AP'; 
	E_ModuleID.CELL_LB401_AP: iLevel:=4; iModuleID:=2; M_nModuleIDConversion := 'CELL_LB401_AP'; 
	E_ModuleID.CELL_LC401_AP: iLevel:=4; iModuleID:=3; M_nModuleIDConversion := 'CELL_LC401_AP'; 
	E_ModuleID.CELL_RA401_AP: iLevel:=4; iModuleID:=4; M_nModuleIDConversion := 'CELL_RA401_AP'; 
	E_ModuleID.CELL_RB401_AP: iLevel:=4; iModuleID:=5; M_nModuleIDConversion := 'CELL_RB401_AP'; 
	E_ModuleID.CELL_RC401_AP: iLevel:=4; iModuleID:=6; M_nModuleIDConversion := 'CELL_RC401_AP'; 
                                                                                                        
	E_ModuleID.CELL_LA501_AP: iLevel:=5; iModuleID:=1; M_nModuleIDConversion := 'CELL_LA501_AP'; 
	E_ModuleID.CELL_LB501_AP: iLevel:=5; iModuleID:=2; M_nModuleIDConversion := 'CELL_LB501_AP'; 
	E_ModuleID.CELL_LC501_AP: iLevel:=5; iModuleID:=3; M_nModuleIDConversion := 'CELL_LC501_AP'; 
	E_ModuleID.CELL_RA501_AP: iLevel:=5; iModuleID:=4; M_nModuleIDConversion := 'CELL_RA501_AP'; 
	E_ModuleID.CELL_RB501_AP: iLevel:=5; iModuleID:=5; M_nModuleIDConversion := 'CELL_RB501_AP'; 
	E_ModuleID.CELL_RC501_AP: iLevel:=5; iModuleID:=6; M_nModuleIDConversion := 'CELL_RC501_AP'; 
                                                                                                
	E_ModuleID.CELL_LA601_AP: iLevel:=6; iModuleID:=1; M_nModuleIDConversion := 'CELL_LA601_AP'; 
	E_ModuleID.CELL_LB601_AP: iLevel:=6; iModuleID:=2; M_nModuleIDConversion := 'CELL_LB601_AP'; 
	E_ModuleID.CELL_LC601_AP: iLevel:=6; iModuleID:=3; M_nModuleIDConversion := 'CELL_LC601_AP'; 
	E_ModuleID.CELL_RA601_AP: iLevel:=6; iModuleID:=4; M_nModuleIDConversion := 'CELL_RA601_AP'; 
	E_ModuleID.CELL_RB601_AP: iLevel:=6; iModuleID:=5; M_nModuleIDConversion := 'CELL_RB601_AP'; 
	E_ModuleID.CELL_RC601_AP: iLevel:=6; iModuleID:=6; M_nModuleIDConversion := 'CELL_RC601_AP'; 
	         
	E_ModuleID.CELL_LA101_TIERII: iLevel:=1; iModuleID:=1; M_nModuleIDConversion := 'CELL_LA101_TIERII'; 
	E_ModuleID.CELL_LB101_TIERII: iLevel:=1; iModuleID:=2; M_nModuleIDConversion := 'CELL_LB101_TIERII'; 
	E_ModuleID.CELL_LC101_TIERII: iLevel:=1; iModuleID:=3; M_nModuleIDConversion := 'CELL_LC101_TIERII'; 
	E_ModuleID.CELL_RA101_TIERII: iLevel:=1; iModuleID:=4; M_nModuleIDConversion := 'CELL_RA101_TIERII'; 
	E_ModuleID.CELL_RB101_TIERII: iLevel:=1; iModuleID:=5; M_nModuleIDConversion := 'CELL_RB101_TIERII'; 
	E_ModuleID.CELL_RC101_TIERII: iLevel:=1; iModuleID:=6; M_nModuleIDConversion := 'CELL_RC101_TIERII'; 
	                                                                                                    
	E_ModuleID.CELL_LA201_TIERII: iLevel:=2; iModuleID:=1; M_nModuleIDConversion := 'CELL_LA201_TIERII'; 
	E_ModuleID.CELL_LB201_TIERII: iLevel:=2; iModuleID:=2; M_nModuleIDConversion := 'CELL_LB201_TIERII'; 
	E_ModuleID.CELL_LC201_TIERII: iLevel:=2; iModuleID:=3; M_nModuleIDConversion := 'CELL_LC201_TIERII'; 
	E_ModuleID.CELL_RA201_TIERII: iLevel:=2; iModuleID:=4; M_nModuleIDConversion := 'CELL_RA201_TIERII'; 
	E_ModuleID.CELL_RB201_TIERII: iLevel:=2; iModuleID:=5; M_nModuleIDConversion := 'CELL_RB201_TIERII'; 
	E_ModuleID.CELL_RC201_TIERII: iLevel:=2; iModuleID:=6; M_nModuleIDConversion := 'CELL_RC201_TIERII'; 
                                                                                                        
	E_ModuleID.CELL_LA301_TIERII: iLevel:=3; iModuleID:=1; M_nModuleIDConversion := 'CELL_LA301_TIERII'; 
	E_ModuleID.CELL_LB301_TIERII: iLevel:=3; iModuleID:=2; M_nModuleIDConversion := 'CELL_LB301_TIERII'; 
	E_ModuleID.CELL_LC301_TIERII: iLevel:=3; iModuleID:=3; M_nModuleIDConversion := 'CELL_LC301_TIERII'; 
	E_ModuleID.CELL_RA301_TIERII: iLevel:=3; iModuleID:=4; M_nModuleIDConversion := 'CELL_RA301_TIERII'; 
	E_ModuleID.CELL_RB301_TIERII: iLevel:=3; iModuleID:=5; M_nModuleIDConversion := 'CELL_RB301_TIERII'; 
	E_ModuleID.CELL_RC301_TIERII: iLevel:=3; iModuleID:=6; M_nModuleIDConversion := 'CELL_RC301_TIERII'; 
                                                                                                     
	E_ModuleID.CELL_LA401_TIERII: iLevel:=4; iModuleID:=1; M_nModuleIDConversion := 'CELL_LA401_TIERII'; 
	E_ModuleID.CELL_LB401_TIERII: iLevel:=4; iModuleID:=2; M_nModuleIDConversion := 'CELL_LB401_TIERII'; 
	E_ModuleID.CELL_LC401_TIERII: iLevel:=4; iModuleID:=3; M_nModuleIDConversion := 'CELL_LC401_TIERII'; 
	E_ModuleID.CELL_RA401_TIERII: iLevel:=4; iModuleID:=4; M_nModuleIDConversion := 'CELL_RA401_TIERII'; 
	E_ModuleID.CELL_RB401_TIERII: iLevel:=4; iModuleID:=5; M_nModuleIDConversion := 'CELL_RB401_TIERII'; 
	E_ModuleID.CELL_RC401_TIERII: iLevel:=4; iModuleID:=6; M_nModuleIDConversion := 'CELL_RC401_TIERII'; 
                                                                                                                
	E_ModuleID.CELL_LA501_TIERII: iLevel:=5; iModuleID:=1; M_nModuleIDConversion := 'CELL_LA501_TIERII'; 
	E_ModuleID.CELL_LB501_TIERII: iLevel:=5; iModuleID:=2; M_nModuleIDConversion := 'CELL_LB501_TIERII'; 
	E_ModuleID.CELL_LC501_TIERII: iLevel:=5; iModuleID:=3; M_nModuleIDConversion := 'CELL_LC501_TIERII'; 
	E_ModuleID.CELL_RA501_TIERII: iLevel:=5; iModuleID:=4; M_nModuleIDConversion := 'CELL_RA501_TIERII'; 
	E_ModuleID.CELL_RB501_TIERII: iLevel:=5; iModuleID:=5; M_nModuleIDConversion := 'CELL_RB501_TIERII'; 
	E_ModuleID.CELL_RC501_TIERII: iLevel:=5; iModuleID:=6; M_nModuleIDConversion := 'CELL_RC501_TIERII'; 
                                                                                                                
	E_ModuleID.CELL_LA601_TIERII: iLevel:=6; iModuleID:=1; M_nModuleIDConversion := 'CELL_LA601_TIERII'; 
	E_ModuleID.CELL_LB601_TIERII: iLevel:=6; iModuleID:=2; M_nModuleIDConversion := 'CELL_LB601_TIERII'; 
	E_ModuleID.CELL_LC601_TIERII: iLevel:=6; iModuleID:=3; M_nModuleIDConversion := 'CELL_LC601_TIERII'; 
	E_ModuleID.CELL_RA601_TIERII: iLevel:=6; iModuleID:=4; M_nModuleIDConversion := 'CELL_RA601_TIERII'; 
	E_ModuleID.CELL_RB601_TIERII: iLevel:=6; iModuleID:=5; M_nModuleIDConversion := 'CELL_RB601_TIERII'; 
	E_ModuleID.CELL_RC601_TIERII: iLevel:=6; iModuleID:=6; M_nModuleIDConversion := 'CELL_RC601_TIERII'; 	
	
	E_ModuleID.NA  : iLevel:=0;iModuleID:=0; M_nModuleIDConversion := 'NA';
ELSE
	iLevel:=0;
	M_nModuleIDConversion := 'Wrong Module ID';
	
END_CASE]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_ProcessCommand" Id="{e97292e4-4841-4fe8-9e2e-b7f6528d13b1}">
      <Declaration><![CDATA[METHOD M_ProcessCommand : BOOL
VAR_INPUT
	n						: INT; //array number of which 10 commands to be processed
	bInvalidCommand 		: BOOL;
END_VAR
VAR
	bErr					: BOOL; // var for error flag
	
	iLevel 					: INT	:= 0;
	iSendEvent				: INT;
	i						: INT; // variable to loop all 6 parameters
	
	nParameterNumber		: UINT;	
	
	sStatus					: STRING; // var for error message
	sLogName				: STRING(81);
	
	EmptyEvents				: ST_Event; // to Clear the event array[n]
	CmdEmpty				: ST_Command;
	iEventNameFailed 		: E_EventName;
	iEventName				: E_EventName;

	//nCommandNumber:UINT;
	//fbModuleIDNameCheck: FB_ModuleIDNameCheck;
	//fbParameterCheck: FB_ParameterCheck;	
END_VAR

VAR_IN_OUT
	arrRCMD 				: ARRAY [1..NO_OF_CMD_BUFFER] OF ST_Command;
	arrEvent				: ARRAY [1..NO_OF_EVENT_BUFFER] OF ST_Event;
END_VAR

]]></Declaration>
      <Implementation>
        <ST><![CDATA[//nCommandNumber := INT_TO_UINT(n);
bErr    														:= FALSE;
sStatus 														:= '';

arrEvent[n] 													:= EmptyEvents;

IF arrRCMD[n].eTaskName = E_TaskName.AlarmReset THEN
	M_nModuleIDConversion(eModuleID:=arrRCMD[n].eModuleID,iLevel=>iLevel);
	//iLevel := arrRCMD[n].iParam[1];
	//iLevel := arrRCMD[n].iParam[1]/1000;
ELSE
	M_nModuleIDConversion(eModuleID:=arrRCMD[n].eModuleID,iLevel=>iLevel);
	(*
	CASE arrRCMD[n].eModuleID OF
		E_ModuleID.TESTER_L_A_01 : iLevel:=1;
		E_ModuleID.TESTER_L_A_02 : iLevel:=2;
		E_ModuleID.TESTER_L_A_03 : iLevel:=3;
		
	END_CASE
	*)	
END_IF

IF bInvalidCommand = TRUE THEN
	bErr := TRUE; 
	sStatus := 'Invalid command received';
ELSIF iLevel = 0 THEN
	bErr := TRUE; 
	sStatus := 'Wrong Module ID';
ELSIF  arrTCShuttlePOC[iLevel].stGblParam.bAlarmOccur =TRUE THEN
	IF arrRCMD[n].eTaskName = E_TaskName.TIUSlideOut THEN 
		bErr := TRUE; 
		sStatus := 'Please clear alarm 1st';
	//ELSIF UDINT_TO_INT(arrTCVIO[iLevel].iAlarmCode) <> arrRCMD[n].iParam[1] THEN
	//	bErr := TRUE; 
	//	sStatus := concat('Alarm Code not match with current AlarmCode ', UDINT_TO_STRING(arrTCVIO[iLevel].iAlarmCode));
	END_IF
ELSIF arrRCMD[n].eTaskName = E_TaskName.TCCSessionRequest OR
   		arrRCMD[n].eTaskName = E_TaskName.DPSPower OR
   		arrRCMD[n].eTaskName = E_TaskName.TIUSlideOut THEN
			//bErr:=SEL(arrTCLevelState[iLevel] = E_State.eDisabled,FALSE,TRUE);
			//sStatus := SEL(bErr,'','Module is Disabled');
			bErr:=SEL(TC_ModuleState[iLevel].Tester = E_State.eDisabled OR 
					  TC_ModuleState[iLevel].TCSite[1].TCU = E_State.eDisabled OR 
					  TC_ModuleState[iLevel].TCSite[1].TIERII = E_State.eDisabled 
					  ,FALSE,TRUE);
			IF TC_ModuleState[iLevel].Tester = E_State.eDisabled THEN
				sStatus := SEL(bErr,'','Tester Cell Module is Disabled');
			ELSIF TC_ModuleState[iLevel].TCSite[1].TCU = E_State.eDisabled THEN
				sStatus := SEL(bErr,'','Tester Cell TCU is Disabled');
			ELSIF TC_ModuleState[iLevel].TCSite[1].TIERII = E_State.eDisabled THEN
				sStatus := SEL(bErr,'','Tester Cell TierII is Disabled');
			END_IF
END_IF

IF bErr THEN
	iSendEvent :=2;
	JMP iSendEvent;
ELSE
	arrTCShuttlePOC[iLevel].stGblParam.stTACommand := arrRCMD[n];
	
	CASE arrRCMD[n].eTaskName OF
		E_TaskName.TCCSessionRequest	: 	
			M_TCCSessionRequest(n:=n, arrRCMD:= arrRCMD, arrEvent:= arrEvent);
			//iSendEvent :=SEL(M_TCCSessionRequest(n:=n, arrRCMD:= arrRCMD, arrEvent:= arrEvent),2,1);

	
		E_TaskName.SetLogFileVerbosity	: 	
			M_SetLogfileVerbosity(n:=n, arrRCMD:= arrRCMD, arrEvent:= arrEvent);
	
		E_TaskName.EnableModule,
		E_TaskName.DisableModule:
			M_EnableModule(n:=n,arrRCMD:=arrRCMD,arrEvent:=arrEvent);
			
		E_TaskName.DoorClose:
			M_DoorOpenClose(n:=n, bLock:=TRUE, bFrontDoor:=FALSE, arrRCMD:=arrRCMD,arrEvent:=arrEvent);
		E_TaskName.DoorOpen:
			M_DoorOpenClose(n:=n, bLock:=FALSE, bFrontDoor:=FALSE, arrRCMD:=arrRCMD,arrEvent:=arrEvent);
		
		E_TaskName.DPSPower:
				//M_DPSPower(n:=n,arrRCMD:=arrRCMD,arrEvent:=arrEvent);	
				IF arrRCMD[n].iParam[1]=0 THEN
				arrTCShuttlePOC[iLevel].stGblParam.bDSPPowerOff:= TRUE;
				ELSIF arrRCMD[n].iParam[1]=1 THEN
					arrTCShuttlePOC[iLevel].stGblParam.bDSPPowerOn := TRUE;
				ELSIF arrRCMD[n].iParam[1]=2 THEN
					arrTCShuttlePOC[iLevel].stGblParam.bDSPPowerAuto := TRUE;
				END_IF	
			
		E_TaskName.TIUSlideOut : 
			//IF arrTCMultiLevel[iLevel].stGblParam.bTCCSessionReq THEN
			//	sStatus := 'Module is In Manual TCC Request Operation Session';
			//	iSendEvent :=2;
			//	JMP iSendEvent;
			//END_IF
			IF arrTCShuttlePOC[iLevel].stGblParam.iProcessStep=E_ProcessStep.eSeqError THEN
				sStatus := 'TIUSlideOUT Process Busy! Retry Or Cancel First';
				iSendEvent :=2;
				JMP iSendEvent;
			ELSIF FALSE(*Col or LvlSeq Err Or TIIErr*) THEN
				sStatus := 'Clear the alarm';
				iSendEvent :=1;
				JMP iSendEvent;
			END_IF
			IF arrRCMD[n].bParam[1]=TRUE THEN
				arrTCShuttlePOC[iLevel].stGblParam.bShuttleMoveOut := TRUE;
			ELSE
				arrTCShuttlePOC[iLevel].stGblParam.bShuttleMoveIn := TRUE;
			END_IF
		
		E_TaskName.Initialize : 	
		IF  arrTCShuttlePOC[iLevel].stGblParam.bAlarmOccur =TRUE THEN
			bErr := TRUE; 
			sStatus := 'Please clear alarm 1st';
			iSendEvent :=2;
			JMP iSendEvent;
		ELSE
			arrTCShuttlePOC[iLevel].stGblParam.bInitialise :=TRUE;
		END_IF
			
			
		E_TaskName.TIUSlideOutRetry : 	
			IF arrTCShuttlePOC[iLevel].stGblParam.iProcessStep<>E_ProcessStep.eSeqError THEN
				sStatus := 'Nothing to Retry';
				iSendEvent :=2;
				JMP iSendEvent;
			ELSIF FALSE(*Col or LvlSeq Err Or TIIErr*) THEN
				sStatus := 'Clear the alarm';
				iSendEvent :=2;
				JMP iSendEvent;
			END_IF
			IF arrTCShuttlePOC[iLevel].stGblParam.bAlarmOccur THEN
				sStatus := 'Clear the Alarm First!';
				iSendEvent :=2;
				JMP iSendEvent;
			END_IF
			arrTCShuttlePOC[iLevel].stGblParam.bResume :=TRUE;
		
		E_TaskName.Cancel : 	
			IF arrTCShuttlePOC[iLevel].stGblParam.bShuttleMoveOut=TRUE
			OR arrTCShuttlePOC[iLevel].stGblParam.bShuttleMoveIn=TRUE 
			OR arrTCMultiLevel[iLevel].stGblParam.bDSPPowerOff 
			OR arrTCMultiLevel[iLevel].stGblParam.bDSPPowerOn 
			OR arrTCMultiLevel[iLevel].stGblParam.bDSPPowerAuto 
			THEN
				arrTCShuttlePOC[iLevel].stGblParam.bCancel :=TRUE;
				arrTCShuttlePOC[iLevel].stGblParam.bInternalCancel :=TRUE;
			ELSE
				sStatus := 'Nothing to cancel';
				iSendEvent :=1;
				JMP iSendEvent;
			END_IF
			
		E_TaskName.TIUSlideOutCancel : 	
			IF arrTCShuttlePOC[iLevel].stGblParam.bShuttleMoveOut=TRUE OR arrTCShuttlePOC[iLevel].stGblParam.bShuttleMoveIn=TRUE THEN
				arrTCShuttlePOC[iLevel].stGblParam.bTIUSlideOutCancel:=TRUE;
				//arrTCShuttlePOC[iLevel].stGblParam.bInternalCancel :=TRUE;
			ELSE
				sStatus := 'Nothing to cancel';
				iSendEvent :=1;
				JMP iSendEvent;
			END_IF
				
		E_TaskName.AlarmReset : 	
			IF M_AlarmReset(n:=n, arrRCMD:=arrRCMD, arrEvent:=arrEvent) THEN
			arrTCShuttlePOC[iLevel].stGblParam.bAlarmClear :=TRUE;
			//iSendEvent :=1;
			//JMP iSendEvent;
			END_IF
			
			//arrTCShuttlePOC[iLevel].stGblParam.bAlarmClear :=TRUE;
			//iSendEvent :=1;
			//M_AlarmReset(n:=30, arrRCMD:=arrRCMD, arrEvent:=arrEvent);
			//JMP iSendEvent;
			
			//M_AlarmReset(n:=30, arrRCMD:=arrRCMD, arrEvent:=arrEvent);
		//E_TaskName.EnableModule: ;  //Set Flag 		(Bypass Alarm)
		//E_TaskName.DisableModule: ; // Reset Flag
		//E_TaskName.DoorOpen: ; // unlock door output here;
		//E_TaskName.DoorClose: ; // Door Recovery
		//arrTCShuttlePOC[iLevel].stGblParam.bDoorClose :=TRUE;
						
	END_CASE
END_IF

//send event to TA
iSendEvent :
IF iSendEvent<>0 THEN
	M_nCmdtoEvent(eCmd2Event_TaskName:=arrRCMD[n].eTaskName , iCmd2Event_Result:=iSendEvent , eCmd2Event_EventName:=iEventName , sCmd2Event_EventName:=sLogName );
	M_AddEvent(
		sLogName:= sLogName, 
		eEventName:= iEventName, 
		eModuleID:= arrRCMD[n].eModuleID, 
		iParam:= arrRCMD[n].iParam, 
		sParam:= arrRCMD[n].sParam, 
		bParam:= arrRCMD[n].bParam, 
		dParam:= arrRCMD[n].dParam, 
		sFailReason:= sStatus);
	iSendEvent :=0;
END_IF

arrRCMD[n]:= CmdEmpty;]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_ProcessMLCommand" Id="{b788fb44-6e54-4808-b59f-702e9ec209fd}">
      <Declaration><![CDATA[METHOD M_ProcessMLCommand : BOOL
VAR_INPUT
	n								: INT; // Array number of which 10 commands to be processed
	bInvalidCommand					: BOOL;
	bRetry 							: BOOL;
	bCancel							: BOOL;
END_VAR

VAR
	bErr							: BOOL; // var for error flag
	bFrontDoor						: BOOL;
	
	iSendEvent						: INT;
	
	i								: UINT; // variable to loop all 6 parameters
	nCommandNumber					: UINT;
	nParameterNumber				: UINT;	
	
	iLevel 							: DINT := 0;
	
	sStatus							: STRING; // var for error message
	sLogName						: STRING(81);
	str								: STRING;
	
	EmptyEvents						: ST_Event; // to Clear the event array[n]
	CmdEmpty						: ST_Command;
	iEventNameFailed 				: E_EventName;
	iEventName						: E_EventName;
	stMLVIO							: ST_TCMultiLevel_VIO;
	stColVIO						: ST_TCColumn_VIO;
	stDbStnVIO						: ST_DebugStation_VIO;
	//fbModuleIDNameCheck: FB_ModuleIDNameCheck;
	//fbParameterCheck: FB_ParameterCheck;	
END_VAR

VAR_IN_OUT
	arrRCMD 						: ARRAY [1..NO_OF_CMD_BUFFER] OF ST_Command;
	arrEvent						: ARRAY [1..NO_OF_EVENT_BUFFER] OF ST_Event;
END_VAR

]]></Declaration>
      <Implementation>
        <ST><![CDATA[/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//	
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
bErr    																		:= FALSE;
sStatus																			:= '';
bFrontDoor																		:= FALSE;
                                                            					
arrEvent[n]																		:= EmptyEvents;
                                                            					
IF arrRCMD[n].eTaskName = E_TaskName.AlarmReset THEN        					
	M_nModuleIDConversion(                                  					
		eModuleID																:= arrRCMD[n].eModuleID,
		iLevel																	=> iLevel);
ELSE                                                        						
	M_nModuleIDConversion(                                  	
		eModuleID																:= arrRCMD[n].eModuleID,
		iLevel																	=> iLevel);
	IF ilevel > 100 AND bDebugCart THEN                     					
		bFrontDoor																:= TRUE;
		iLevel																	:= iLevel - 100;
	END_IF
END_IF

IF (bDebugCart AND iLevel > 2 AND iLevel <> 99 AND NOT 100 < iLevel AND NOT iLevel < 103) THEN
	bErr																		:= TRUE;
	str																			:= '';
  	str 																		:= CONCAT(str,': Cell Level');
	str																			:= CONCAT(str,'[');
	str																			:= CONCAT(str,DINT_TO_STRING(iLevel));
	str																			:= CONCAT(str,'] ');
	sStatus																		:= 'Invalid Module ID';
	sStatus																		:= CONCAT(sStatus,str);
END_IF

IF NOT (bDebugStation OR bDebugCart) AND NOT IsNetIDReadOK THEN
	bErr																		:= TRUE;
	str																			:= '';
	sStatus																		:= 'Invalid Colum AMS Net ID, Please Set up Column AMS Net ID First ';
	sStatus																		:= CONCAT(sStatus,str);
END_IF

stMLVIO																			:= arrTCMultiLevel[iLevel].fbTCMultiLevelSeq.P_stTCMultiLevelVIO;

// Invalid command
IF bInvalidCommand = TRUE THEN
	bErr																		:= TRUE; 
	sStatus																		:= 'Invalid command received';
	
// Only cancel command allow iLevel is 0
ELSIF iLevel = 0 AND arrRCMD[n].eTaskName <> E_TaskName.Cancel THEN
	bErr																		:= TRUE; 
	sStatus																		:= 'Wrong Module ID';
	
// IO Diagnostic Mode
ELSIF bDiagnosticMode THEN
	bErr																		:= TRUE; 
	sStatus																		:= 'IO Diagnostic Mode is Enabled';
	
// Task name is TCCSessionRequest or DPSPower or TIUSlideOut
ELSIF arrRCMD[n].eTaskName = E_TaskName.TCCSessionRequest OR arrRCMD[n].eTaskName = E_TaskName.DPSPower THEN
	
	bErr																:=  TC_ModuleState[iLevel].TCSite[1].TCU = E_State.eDisabled 	OR 
			  																TC_ModuleState[iLevel].TCSite[1].TIERII = E_State.eDisabled	OR
																			TC_ModuleState[iLevel].Tester = E_State.eDisabled;
	
	IF TC_ModuleState[iLevel].Tester = E_State.eDisabled THEN
		sStatus 															:= SEL(bErr, '', 'Tester Cell Module is Disabled');
	ELSIF TC_ModuleState[iLevel].TCSite[1].TCU = E_State.eDisabled THEN
		sStatus																:= SEL(bErr, '', 'Tester Cell TCU is Disabled'); 
	ELSIF TC_ModuleState[iLevel].TCSite[1].TIERII = E_State.eDisabled THEN
		sStatus 															:= SEL(bErr, '', 'Tester Cell TierII is Disabled');
	END_IF

ELSIF arrRCMD[n].eTaskName = E_TaskName.TIUSlideOut THEN
	bErr																:= TC_ModuleState[iLevel].TCSite[1].TCU = E_State.eDisabled;
	
	IF TC_ModuleState[iLevel].Tester = E_State.eDisabled THEN
		sStatus 															:= SEL(bErr, '', 'Tester Cell Module is Disabled');
	END_IF
END_IF

//TII Alarm And System Alarm Check
// 1. Task name is not cancel
// 2. Task name is not alarm reset
// 3. Task name is not door open
// 4. Task name is not door close
// 5. Task name is not SetBlinkRate
// 6. Either no leak and ground alarm or Task name is not TIUSlideOut and DrawerUp or both
(*IF 	arrRCMD[n].eTaskName <> E_TaskName.Cancel 														AND 
	arrRCMD[n].eTaskName <> E_TaskName.AlarmReset 													AND 
  	arrRCMD[n].eTaskName <> E_TaskName.DoorOpen 													AND  //front OR back door open shouldnt block by any alarm
	arrRCMD[n].eTaskName <> E_TaskName.DoorClose													AND //front OR back door close shouldnt block by any alarm
	arrRCMD[n].eTaskName <> E_TaskName.SetBlinkRate 												AND
	(stMLVIO.bAlarmBlock OR stMLVIO.iSysUnBlockAlm = 2 OR stMLVIO.iSysUnBlockAlm = 10)  			THEN
	
		FOR i:= 1 TO NO_OF_COMMON_SENSOR DO
			IF ALMTC.Common.AlarmID[i] THEN
				IF sStatus = '' THEN 
					sStatus														:= SysAlmText[i];	
					CONTINUE;				
				END_IF
				sStatus															:= CONCAT(CONCAT(sStatus,', '),SysAlmText[i]);
			END_IF
		END_FOR
		
		FOR i:= 1 TO NO_OF_TII_SENSOR DO
			IF ALMTC.Level[iLevel].AlarmID[i] THEN
				IF sStatus = '' THEN 
					sStatus														:= TIIAlmText[i];	
					CONTINUE;				
				END_IF
				sStatus															:= CONCAT(CONCAT(sStatus,', '),TIIAlmText[i]);
			END_IF
		END_FOR
		
		bErr 																	:= TRUE;
END_IF *)

IF arrRCMD[n].eTaskName <> E_TaskName.Cancel THEN 
	IF arrTCMultiLevel[iLevel].stGblParam.bAlarmOccur = TRUE THEN
		
		IF 	arrRCMD[n].eTaskName = E_TaskName.TIUSlideOut 	OR arrRCMD[n].eTaskName = E_TaskName.DrawerUp 	OR	arrRCMD[n].eTaskName = E_TaskName.DPSPower 	OR
			arrRCMD[n].eTaskName = E_TaskName.AP240ACPOWER 	OR arrRCMD[n].eTaskName = E_TaskName.TIUSlideOutRetry THEN  
				bErr 																:= TRUE; 
				sStatus 															:= 'Please clear alarm 1st';
		END_IF
		
	ELSIF 	arrTCMultiLevel[iLevel].stGblParam.iProcessState = E_ProcessState.ePAUSE AND 
			(NOT (arrRCMD[n].eTaskName<>E_TaskName.TIUSlideOutRetry OR arrRCMD[n].eTaskName<>E_TaskName.AlarmReset)) THEN
				bErr 																:= TRUE;
				sStatus 															:= 'Clear Or Cancel The Command First';
	END_IF
END_IF	

	
IF bErr THEN
	iSendEvent 																	:= 2;
	JMP iSendEvent;
ELSE
	// Cancel Command pass in without Module ID
	IF (arrRCMD[n].eTaskName <> E_TaskName.Cancel) THEN	
		IF bDebugStation THEN
			stDebugStation.stGblDBStnParam.stTACommand 							:= arrRCMD[n];
		ELSE
			arrTCMultiLevel[iLevel].stGblParam.stTACommand 						:= arrRCMD[n]; 
		END_IF
	 END_IF
	
	CASE arrRCMD[n].eTaskName OF
		E_TaskName.SetBlinkRate: 
			M_SetBlinkRate(
				arrRCMD															:= arrRCMD, 
				arrEvent														:= arrEvent);
	
		E_TaskName.AP240ACPOWER:
			IF (NOT bDebugCart) AND arrRCMD[n].iParam[1] <> 0 AND arrTCMultiLevel[iLevel].stGblParam.bTCCellACPwrOff THEN
				sStatus 														:= 'TBot EAP Cell 240 AC Power OFF Signal Detected';
				bErr															:= TRUE;
				iSendEvent 														:= 2;
				JMP iSendEvent;
			END_IF
			
			IF bDebugCart AND arrRCMD[n].iParam[1] <> 0 AND DS_Facility_eapShutOffAllACPower THEN
				sStatus 														:= 'DS Facility Cell 240 AC Power OFF Signal Detected';
				bErr															:= TRUE;
				iSendEvent 														:= 2;
				JMP iSendEvent;
			END_IF
			
			IF bDebugStation AND iLevel = 1 THEN 
				IF arrRCMD[n].iParam[1] = 0 THEN
					stDebugStation.stGblDBStnParam.bAP240ACPowerOff				:= TRUE;
				ELSIF arrRCMD[n].iParam[1] = 1 THEN
					stDbStnVIO 													:= stDebugStation.fbDBStnSeq.P_stVIO;//.P_stTCMultiLevelVIO;
					IF stDbStnVIO.ipDBStnAPPresentSensor THEN
						stDebugStation.stGblDBStnParam.bAP240ACPowerOn 			:= TRUE;
					ELSE
						bErr													:= TRUE;
						IF (NOT stDbStnVIO.ipDBStnAPPresentSensor) THEN 
							sStatus 											:= 'AP is not present';
						END_IF
						iSendEvent 												:= 2;
						JMP iSendEvent;
					END_IF
				END_IF
				
			ELSE // if Not Debug station 
				IF arrRCMD[n].iParam[1] = 0 THEN
					arrTCMultiLevel[iLevel].stGblParam.bAP240ACPowerOff			:= TRUE;
				ELSIF arrRCMD[n].iParam[1] = 1 THEN
					stMLVIO 													:= arrTCMultiLevel[iLevel].fbTCMultiLevelSeq.P_stTCMultiLevelVIO;
					IF stMLVIO.ipTesterPresent AND NOT stMLVIO.ipTesterPowerOn THEN
						bErr													:= TRUE;
						sStatus													:= 'Tester power is not ON';
						iSendEvent 												:= 2;
						JMP iSendEvent;
					ELSIF (NOT stMLVIO.ipAPPresentSensor) THEN
						bErr													:= TRUE;
						sStatus													:= 'AP is not present';
						iSendEvent 												:= 2;
						JMP iSendEvent;
					ELSE
						arrTCMultiLevel[iLevel].stGblParam.bAP240ACPowerOn 		:= TRUE;
					END_IF
				END_IF
			END_IF
		
		E_TaskName.DrawerUp: 
			stMLVIO																:= arrTCMultiLevel[iLevel].fbTCMultiLevelSeq.P_stTCMultiLevelVIO;
			
			IF stMLVIO.bTCCSessionActiveStatusFlag THEN
				bErr															:= TRUE;
				sStatus															:= 'Module is In Manual TCC Request Operation Session';
				iSendEvent														:= 2;
				JMP iSendEvent;
			END_IF
			
			IF stMLVIO.ipAPPresentSensor AND (NOT stMLVIO.ipAPReady) THEN
				bErr															:= TRUE;
				sStatus															:= 'AP Ready Signal is not Detected';
				iSendEvent														:= 2;
				JMP iSendEvent;
			END_IF
			
			IF arrRCMD[n].bParam[1] = TRUE THEN
				IF ((stMLVIO.ipTCCellTbotSideDoorOpenCloseStatus01 AND stMLVIO.ipTCCellTbotSideDoorOpenCloseStatus02 AND stMLVIO.ipTCCellDoorOpenCloseStatus) OR (NOT bDebugCart)) AND 
					((stMLVIO.ipTCCellDoorOpenCloseStatus) OR bDebugCart)THEN
					arrTCMultiLevel[iLevel].stGblParam.bDrawerUp				:= TRUE;
				ELSE
					bErr														:= TRUE;
					sStatus														:= 'Please Close and Lock the Door(s) First';
					iSendEvent													:= 2;
					JMP iSendEvent;
				END_IF
			ELSE
				arrTCMultiLevel[iLevel].stGblParam.bDrawerDown					:= TRUE;
			END_IF
			
		E_TaskName.EnableModule, E_TaskName.DisableModule:	
			;
		E_TaskName.SetLogFileVerbosity:	
			;	
		E_TaskName.TCCSessionRequest: 	
			stMLVIO																:= arrTCMultiLevel[iLevel].fbTCMultiLevelSeq.P_stTCMultiLevelVIO;
			IF (NOT stMLVIO.ipTCDrawerCylRetractRS) THEN
				bErr															:= TRUE;
				sStatus															:= 'Tester Drawer is not in Retracted Position';
				iSendEvent														:= 2;
				JMP iSendEvent;
			END_IF
			
			IF (NOT stMLVIO.ipTCDrawerCylDownRS) THEN
				bErr															:= TRUE;
				sStatus															:= 'Tester Drawer is not in Down Position';
				iSendEvent														:= 2;
				JMP iSendEvent;
			END_IF
			
			M_TCCSessionRequest(
				n																:= n, 
				arrRCMD															:= arrRCMD, 
				arrEvent														:= arrEvent);
		
		E_TaskName.DoorClose:
			M_DoorOpenClose(
				n																:= n, 
				bLock															:= TRUE, 
				bFrontDoor														:= bFrontDoor, 
				arrRCMD															:= arrRCMD,
				arrEvent														:= arrEvent);
			
		E_TaskName.DoorOpen:
			M_DoorOpenClose(
				n																:= n, 
				bLock															:= FALSE,
				bFrontDoor														:= bFrontDoor, 
				arrRCMD															:= arrRCMD,
				arrEvent														:= arrEvent);					
							
		E_TaskName.TesterAirValve:
			M_AirOnOFF(
				n																:= n,
				iValSelection													:= E_AirValve.TESTER,
				arrRCMD															:= arrRCMD,
				arrEvent														:= arrEvent);
			
		E_TaskName.APAirValve:
			M_AirOnOFF(
				n																:= n,
				iValSelection													:= E_AirValve.AP,
				arrRCMD															:= arrRCMD,
				arrEvent														:= arrEvent);
			
		E_TaskName.TIUSocketCoolingAir:
			IF arrRCMD[n].iParam[1] = 1 THEN	
				M_AirOnOFF(
					n															:= n, 
					iValSelection												:= E_AirValve.TIU_SKT1, 
					arrRCMD														:= arrRCMD, 
					arrEvent													:= arrEvent);
			ELSIF arrRCMD[n].iParam[1] = 2 THEN
				M_AirOnOFF(
					n															:= n, 
					iValSelection												:= E_AirValve.TIU_SKT2, 
					arrRCMD														:= arrRCMD, 
					arrEvent													:= arrEvent);	
			ELSE
				bErr															:= TRUE;
				sStatus															:= 'Invalid TIUSocketCoolingAirParameter';
				iSendEvent														:= 2;
				JMP iSendEvent;
			END_IF
			
		E_TaskName.DPSPower:
			IF (NOT bDebugCart) AND arrRCMD[n].iParam[1] <> 0 AND arrTCMultiLevel[iLevel].stGblParam.bTCCellACPwrOff THEN
				sStatus															:= 'TBot EAP Cell 240 AC Power OFF Signal Detected';
				bErr															:= TRUE;
				iSendEvent														:= 2;
				JMP iSendEvent;
			END_IF
			
			IF bDebugCart AND arrRCMD[n].iParam[1] <> 0 AND DS_Facility_eapShutOffAllACPower THEN
				sStatus 														:= 'DS Facility Cell 240 AC Power OFF Signal Detected';
				bErr															:= TRUE;
				iSendEvent 														:= 2;
				JMP iSendEvent;
			END_IF
			
			// 0:OFF,1:ON,2:AUTO, ***-1:SELFLOOP,99:ALARMOCCURED
			IF arrRCMD[n].iParam[1] = 0 THEN // OFF Param
				arrTCMultiLevel[iLevel].stGblParam.bDSPPowerOff					:= TRUE;
				arrTCMultiLevel[iLevel].stGblParam.iTstPwrCmd					:= 0;
			ELSIF arrRCMD[n].iParam[1] = 1 THEN	// ON Param
				stMLVIO 														:= arrTCMultiLevel[iLevel].fbTCMultiLevelSeq.P_stTCMultiLevelVIO;
				IF stMLVIO.ipTesterPresent AND stMLVIO.ipTesterLatchesClosed THEN
					arrTCMultiLevel[iLevel].stGblParam.bDSPPowerOn 				:= TRUE;
					arrTCMultiLevel[iLevel].stGblParam.iTstPwrCmd				:= 1;
				ELSE
					bErr														:= TRUE;
					IF (NOT stMLVIO.ipTesterPresent) THEN 
						sStatus													:= 'Tester is not present';
					ELSIF (NOT stMLVIO.ipTesterLatchesClosed) THEN
						sStatus													:= 'Tester Latch is not Closed';
					END_IF
					iSendEvent													:= 2;
					JMP iSendEvent;
				END_IF
			ELSIF arrRCMD[n].iParam[1] = 2 THEN	//AUTO Param
				arrTCMultiLevel[iLevel].stGblParam.bDSPPowerAuto				:= TRUE;
			END_IF

		E_TaskName.TIUSlideOut:				
			IF arrRCMD[n].bParam[1] = TRUE THEN
				IF bDebugCart THEN
					sStatus 													:= 'Cell Not Allow to move out in Debug Cart Mode';
					bErr														:= TRUE;
					iSendEvent 													:= 2;
					JMP iSendEvent;
				END_IF
				
				stColVIO														:= fbTCColumn.P_stTCColumnVIO;
				IF (NOT stColVIO.ipTbotDoorClosedSignal) AND (NOT bDebugCart) AND (NOT bDebugStation) THEN
					bErr														:= TRUE;
					sStatus														:= 'Tbot Door Not Closed.';
					ALMTC.Common.AlarmID[E_ColAlarm.ipTbotDoorClosedSignal]		:= TRUE;
					iSendEvent													:= 2;
					JMP iSendEvent;
				END_IF
				
				IF (NOT arrTCMultiLevel[iLevel].stGblParam.bTCDwrSafeToMoveEAP) THEN
					bErr														:= TRUE;
					sStatus														:= 'TBOT EAP Not allow Drawer Safe To Move.';
					iSendEvent													:= 2;
					JMP iSendEvent;
				END_IF
				
				arrTCMultiLevel[iLevel].stGblParam.bShuttleMoveOut				:= TRUE ;
			ELSE
				arrTCMultiLevel[iLevel].stGblParam.bShuttleMoveIn				:= TRUE;
			END_IF

		E_TaskName.Initialize: 	
			stColVIO														:= fbTCColumn.P_stTCColumnVIO;
			IF (NOT stColVIO.ipTbotDoorClosedSignal) AND (NOT bDebugCart) AND (NOT bDebugStation) THEN
				bErr														:= TRUE;
				sStatus														:= 'Tbot Door Not Closed.';
				ALMTC.Common.AlarmID[E_ColAlarm.ipTbotDoorClosedSignal]		:= TRUE;
				iSendEvent													:= 2;
				JMP iSendEvent;
			END_IF
			
			IF bDebugStation AND iLevel = 1 THEN 
				stDebugStation.stGblDBStnParam.bInitialise						:= TRUE;
			ELSE
				arrTCMultiLevel[iLevel].stGblParam.bInitialise					:= TRUE;
			END_IF
					
		E_TaskName.TIUSlideOutRetry: 
			
			stColVIO														:= fbTCColumn.P_stTCColumnVIO;
			IF (NOT stColVIO.ipTbotDoorClosedSignal) AND (NOT bDebugCart) AND (NOT bDebugStation) THEN
				bErr														:= TRUE;
				sStatus														:= 'Tbot Door Not Closed.';
				ALMTC.Common.AlarmID[E_ColAlarm.ipTbotDoorClosedSignal]		:= TRUE;
				iSendEvent													:= 2;
				JMP iSendEvent;
			END_IF
			
			IF (NOT arrTCMultiLevel[iLevel].stGblParam.bTCDwrSafeToMoveEAP) THEN
				bErr														:= TRUE;
				sStatus														:= 'TBOT EAP Not allow Drawer Safe To Move.';
				iSendEvent													:= 2;
				JMP iSendEvent;
			END_IF

			IF arrRCMD[n].bParam[1] = TRUE THEN
				arrTCMultiLevel[iLevel].stGblParam.bShuttleMoveOut			:= TRUE ;
			ELSE
				arrTCMultiLevel[iLevel].stGblParam.bShuttleMoveIn			:= TRUE;
			END_IF
			
			arrTCMultiLevel[iLevel].stGblParam.bResume						:= TRUE;
			
		E_TaskName.TIUSlideOutCancel: 
			stColVIO														:= fbTCColumn.P_stTCColumnVIO;	
			IF (NOT stColVIO.ipTbotDoorClosedSignal) AND (NOT bDebugCart) AND (NOT bDebugStation) THEN
				bErr														:= TRUE;
				sStatus														:= 'Tbot Door Not Closed.';
				ALMTC.Common.AlarmID[E_ColAlarm.ipTbotDoorClosedSignal]		:= TRUE;
				iSendEvent													:= 2;
				JMP iSendEvent;
			END_IF
		
			IF (NOT arrTCMultiLevel[iLevel].stGblParam.bTCDwrSafeToMoveEAP) THEN
				bErr														:= TRUE;
				sStatus														:= 'TBOT EAP Not allow Drawer Safe To Move.';
				iSendEvent													:= 2;
				JMP iSendEvent;
			END_IF
			
			IF arrTCMultiLevel[iLevel].stGblParam.bShuttleMoveOut = TRUE OR arrTCMultiLevel[iLevel].stGblParam.bShuttleMoveIn = TRUE THEN
				arrTCMultiLevel[iLevel].stGblParam.bCancel 						:= TRUE;
				
			ELSE
				sStatus															:= 'Nothing to cancel';
				
			END_IF
			iSendEvent															:= 1;
			JMP iSendEvent;
				
		E_TaskName.Cancel:
			FOR i := 1 TO NO_OF_CMD_BUFFER DO
				arrTACommands.arrTACommands[i]									:=	CmdEmpty;
			END_FOR 
			
			FOR i := 1 TO NO_OF_LEVEL DO
				arrTCMultiLevel[i].stGblParam.bBufClear 						:= TRUE;
			END_FOR 	
			
			iSendEvent															:= 1;
			JMP iSendEvent;
			
		E_TaskName.AlarmReset: 
			IF arrTCMultiLevel[iLevel].stGblParam.iProcessState = eALPAUSED THEN	
				IF M_AlarmReset(
					n															:= n, 
					arrRCMD														:= arrRCMD, 
					arrEvent													:= arrEvent) THEN
					arrTCMultiLevel[iLevel].stGblParam.bAlarmClear 				:= TRUE;
				END_IF
			
			ELSE
				M_AlarmReset(
					n															:= n, 
					arrRCMD														:= arrRCMD, 
					arrEvent													:= arrEvent);
			END_IF
		E_TaskName.Secondary24VPower:
			IF bDebugStation THEN
				IF arrRCMD[n].bParam[1] = 0 THEN
					stDebugStation.stGblDBStnParam.bSecondary24VPowerOff 				:= TRUE;
				ELSIF arrRCMD[n].bParam[1] = 1 THEN
					stDebugStation.stGblDBStnParam.bSecondary24VPowerON 				:= TRUE;
				END_IF
				
			ELSE
				IF arrRCMD[n].bParam[1] = 0 THEN
					arrTCMultiLevel[iLevel].stGblParam.bSecondary24VPowerOff			:= TRUE;
				ELSIF arrRCMD[n].bParam[1] = 1 THEN
					arrTCMultiLevel[iLevel].stGblParam.bSecondary24VPowerOn				:= TRUE;
				END_IF
			END_IF
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////// Debug Station Commands only ////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		E_TaskName.SetSolenoidValves:
			IF bDebugStation THEN
				IF arrRCMD[n].bParam[1] = 0 THEN
					stDebugStation.stGblDBStnParam.bSolenoidValvesOff 				:= TRUE;
					stDebugStation.stGblDBStnParam.iSolenoidValves					:= arrRCMD[n].iParam;
				ELSIF arrRCMD[n].bParam[1] = 1 THEN
					stDebugStation.stGblDBStnParam.bSolenoidValvesOn 				:= TRUE;
					stDebugStation.stGblDBStnParam.iSolenoidValves					:= arrRCMD[n].iParam;
				END_IF
			ELSE
				sStatus															:= 'This command only available in Debug Station mode';
				bErr															:= TRUE;
				JMP iSendEvent;
			END_IF
	END_CASE
END_IF

//send event to TA
iSendEvent:
	IF iSendEvent <> 0 THEN
		iSendEvent																:= SEL(bErr, 1, 2);
		M_nCmdtoEvent(
			eCmd2Event_TaskName													:= arrRCMD[n].eTaskName, 
			iCmd2Event_Result													:= iSendEvent, 
			eCmd2Event_EventName												:= iEventName, 
			sCmd2Event_EventName												:= sLogName );
		arrEvent[n].sLogName													:= sLogName;
		arrEvent[n].eEventName													:= iEventName; 
		arrEvent[n].eModuleID													:= arrRCMD[n].eModuleID; 
		arrEvent[n].iParam														:= arrRCMD[n].iParam;
		arrEvent[n].sParam														:= arrRCMD[n].sParam; 
		arrEvent[n].bParam														:= arrRCMD[n].bParam; 
		arrEvent[n].dParam														:= arrRCMD[n].dParam; 
		arrEvent[n].sFailReason													:= sStatus;
	END_IF

	arrRCMD[n]																	:= CmdEmpty;]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_SetBlinkRate" Id="{254ef2c7-9e83-4587-becc-f595e5487e74}">
      <Declaration><![CDATA[METHOD M_SetBlinkRate : BOOL
VAR_INPUT
END_VAR

VAR
	bBtnState					: BOOL;
	bErr						: BOOL; // var for error flag
	
	iTCCellSubModules			: INT;
	
	iLevel						: UINT	:= 0;
	i							: UINT; // variable to loop all 6 parameters
	iSendEvent					: UINT;
	
	iBtnID						: DINT;
	iBtnBlinkFreq				: DINT;
	
	sStatus						: STRING; // var for error message
	sLogName					: STRING(255);
	sModuleID					: STRING;
	
	emoduleID					: E_ModuleID;
	EmptyEvents					: ST_Event; // to Clear the event array[n]
	CmdEmpty					: ST_Command;
	requestedState				: E_State := E_State.eEnabled;
	iEventName					: E_EventName;
	stMultiLeveVIO				: ST_TCMultiLevel_VIO;
	stDBStnVIO					: ST_DebugStation_VIO;
END_VAR

VAR_IN_OUT
	arrRCMD 					: ARRAY [1..NO_OF_CMD_BUFFER] OF ST_Command;
	arrEvent					: ARRAY [1..NO_OF_EVENT_BUFFER] OF ST_Event;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[(*===========================================
SOLID OFF 	::State=0, 	Frequency = Don’tCare
SOLID ON 	::State=1,	Frequency = 0
BLINKING  	::State=1, 	Frequency = BlinkFreq
===========================================*)
bErr																	:= FALSE;
sStatus																	:= '';

arrEvent[n] 															:= EmptyEvents;
bBtnState																:= arrRCMD[n].bParam[1];
iBtnID																	:= arrRCMD[n].iParam[1];
iBtnBlinkFreq															:= arrRCMD[n].iParam[2];

M_nModuleIDConversion(
	eModuleID															:= arrRCMD[n].eModuleID, 
	iLevel																=> iLevel);

//moduleid 
IF iLevel = 0 THEN
	bErr 																:= TRUE; 
	sStatus 															:= 'Wrong Module ID';
ELSE	
	stMultiLeveVIO 														:= arrTCMultiLevel[iLevel].fbTCMultiLevelSeq.P_stTCMultiLevelVIO;
	stDbStnVIO 															:= stDebugStation.fbDBStnSeq.P_stVIO;
	CASE iBtnID OF
		E_LED.MaintenanceBtn:
			stMultiLeveVIO.bMtnBtnLEDState								:= bBtnState;
    		stMultiLeveVIO.iMtnBtnLEDBlinkFreq							:= iBtnBlinkFreq;	
		E_LED.AbortFlowBtn:  
			stMultiLeveVIO.bAbtBtnLEDState								:= bBtnState;
    		stMultiLeveVIO.iAbtBtnLEDBlinkFreq							:= iBtnBlinkFreq;
		E_LED.DoorUnlockBtn:  
			stMultiLeveVIO.bDoorUnlockBtnLEDState						:= bBtnState;
    		stMultiLeveVIO.iDoorUnlockBtnLEDBlinkFreq					:= iBtnBlinkFreq;
		E_DBStnLED.PurgeButton:	
			stDbStnVIO.bDBStnPurgeBtnLEDState							:= bBtnState;
			stDbStnVIO.iDBStnPurgeBtnLEDBlinkFreq						:= iBtnBlinkFreq;
	END_CASE
	arrTCMultiLevel[iLevel].fbTCMultiLevelSeq.P_stTCMultiLevelVIO		:= stMultiLeveVIO;
	stDebugStation.fbDBStnSeq.P_stVIO									:= stDBStnVIO;
END_IF

//send event to TA
iSendEvent 																:= SEL(bErr, 1, 2);

M_nCmdtoEvent(
	eCmd2Event_TaskName													:= arrRCMD[n].eTaskName, 
	iCmd2Event_Result													:= iSendEvent, 
	eCmd2Event_EventName												:= iEventName, 
	sCmd2Event_EventName												:= sLogName
);
	
arrEvent[n].sLogName													:= sLogName;
arrEvent[n].eEventName													:= iEventName; 
arrEvent[n].eModuleID													:= arrRCMD[n].eModuleID; 
arrEvent[n].iParam														:= arrRCMD[n].iParam;
arrEvent[n].sParam														:= arrRCMD[n].sParam; 
arrEvent[n].bParam														:= arrRCMD[n].bParam; 
arrEvent[n].dParam														:= arrRCMD[n].dParam; 
arrEvent[n].sFailReason													:= sStatus;

arrRCMD[n]																:= CmdEmpty;

]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_SetLogfileVerbosity" Id="{50a04445-d5e5-42f3-8cd7-3e40f6eb187f}">
      <Declaration><![CDATA[METHOD M_SetLogfileVerbosity : BOOL
VAR_INPUT
	n: UINT;          //array number of which 30 commands to be processed
END_VAR
VAR
	EmptyEvents: ST_Event; // to Clear the event array[n]
	CmdEmpty: ST_Command;
	i: INT;            //temporary variable to loop all 6 parameters
	bErr: BOOL;         //temporary var for error flag
	sStatus:STRING;     //temporary var for error message


	iEventName: E_EventName;
	sLogName: STRING(255);
	iSendEvent: UINT;
	
	requestedState : E_State := E_State.eEnabled;
	
END_VAR
VAR_IN_OUT
	arrRCMD : ARRAY [1..NO_OF_CMD_BUFFER] OF ST_Command;
	arrEvent: ARRAY [1..NO_OF_EVENT_BUFFER] OF ST_Event;
END_VAR

]]></Declaration>
      <Implementation>
        <ST><![CDATA[bErr    := FALSE;
sStatus := '';

arrEvent[n] := EmptyEvents;


IF bErr THEN
	;
ELSE
	iLogVerbosity := DINT_TO_INT(arrRCMD[n].iParam[1]);
END_IF


//send event to TA
IF bErr THEN
	iSendEvent :=2;
ELSE
	iSendEvent :=1;
END_IF

M_nCmdtoEvent(eCmd2Event_TaskName:=arrRCMD[n].eTaskName , iCmd2Event_Result:=iSendEvent , eCmd2Event_EventName:=iEventName , sCmd2Event_EventName:=sLogName );
arrEvent[n].sLogName:= sLogName;
arrEvent[n].eEventName:= iEventName; 
arrEvent[n].eModuleID:= arrRCMD[n].eModuleID; 
arrEvent[n].iParam:= arrRCMD[n].iParam;
arrEvent[n].sParam:= arrRCMD[n].sParam; 
arrEvent[n].bParam:= arrRCMD[n].bParam; 
arrEvent[n].dParam:= arrRCMD[n].dParam; 
arrEvent[n].sFailReason:= sStatus;


arrRCMD[n]:= CmdEmpty;]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_TACmdUpdate" Id="{2a8d546c-b654-40f6-8577-b878ee586620}">
      <Declaration><![CDATA[METHOD PUBLIC M_TACmdUpdate : BOOL
VAR_INPUT
END_VAR
VAR
	sFormatSource					: STRING;
	iLevel							: INT;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//	State machine
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

CASE iCmdStep OF 
	0: (*Idle*)
	
		(*Action*)
		
		(*Transition*)
		IF (NOT bRCMDStart) THEN
			iCmdStep 													:= 10; // receive TA command
		ELSE 
			iCmdStep 													:= 20; // rocess TA command
		END_IF
		
	10: (*receive TA command*)	
	
		(*Action*)
		bLocalRCMDarrEmpty												:= TRUE;
	
		//Check here internal local array is empty , if not wait for same
		FOR n := 1 TO .NO_OF_CMD_BUFFER DO 
			IF arrLocalRCMD[n].eTaskName <> E_TaskName.EmptyTask THEN
				bLocalRCMDarrEmpty										:= FALSE;
				EXIT;
			END_IF	
		END_FOR
		
		IF bLocalRCMDarrEmpty THEN
			// Local array empty copy from TA array and clear TA array
			FOR n := 1 TO .NO_OF_CMD_BUFFER DO
				IF arrTA_RCMD[n].eTaskName <> E_TaskName.EmptyTask THEN
					arrLocalRCMD[n]										:= arrTA_RCMD[n]; // Copy from TA -> Local
					arrTA_RCMD[n]										:= CmdEmpty ; // Clear TA array [n]
				END_IF
			END_FOR
			
			bRCMDStart													:= TRUE; // TA cmd cleared trigger ready signal
			
			//-	IntAlignmentWithTBotPNB 1/Nov/18				
			IF iTCSReady >= 1000 THEN
				iTCSReady 												:= 0;
			ELSE
				iTCSReady 												:= iTCSReady + 1;
			END_IF
			//----------------------
		END_IF
		
		bLocalRCMDarrEmpty												:= FALSE;
		
		(*Transition*)
		iCmdStep 														:= 20; // process TA command
		
	20: (*process TA command*)	
	
		(*Action*)
		FOR n := 1 TO .NO_OF_CMD_BUFFER DO
			IF arrLocalRCMD[n].eTaskName = E_TaskName.EmptyTask THEN
				; //do nothing
			ELSE 
				fbFormat(sFormat:= 'Cmd from TA[%d]', arg1:= F_UINT(n),  sOut=> sFormatSource);
				Logging.fbDebugLog.M_nLogger(iLogLevel:= Logging.fbDebugLog.P_iLogVerbosity, sSource:= sFormatSource, sMessage:= arrLocalRCMD[n].sLogName);
				
				CASE arrLocalRCMD[n].eTaskName OF		
					E_TaskName.ActivateRecipe:	
						M_ActivateRecipe(
							n											:= n, 
							arrRCMD										:= arrLocalRCMD, 
							arrEvent									:= arrLocalEvent
						);
						
					E_TaskName.ValidateRecipe:	
						M_ValidateRecipe(
							n											:= n, 
							arrRCMD										:= arrLocalRCMD, 
							arrEvent									:= arrLocalEvent
						);
						
					E_TaskName.SetLogFileVerbosity:	
						M_SetLogfileVerbosity(
							n											:= n, 
							arrRCMD										:= arrLocalRCMD, 
							arrEvent									:= arrLocalEvent
						);
			
					E_TaskName.EnableModule, E_TaskName.DisableModule:	
						M_EnableModule(
							n											:= n,
							arrRCMD										:= arrLocalRCMD,
							arrEvent									:= arrLocalEvent
						);
					
					E_TaskName.SetBlinkRate, 		E_TaskName.TCCSessionRequest, 	E_TaskName.AlarmReset, 	E_TaskName.Resume, 			E_TaskName.Cancel,		
					E_TaskName.TIUSlideOutRetry,	E_TaskName.TIUSlideOutCancel, 	E_TaskName.Initialize, 	E_TaskName.DPSPower, 		E_TaskName.TIUSlideOut, 
					E_TaskName.DoorClose, 			E_TaskName.DoorOpen,			E_TaskName.APAirValve, 	E_TaskName.TesterAirValve, 	E_TaskName.TIUSocketCoolingAir,		
					E_TaskName.AP240ACPOWER,		E_TaskName.DrawerUp,			E_TaskName.Secondary24VPower,						E_TaskName.SetSolenoidValves:
					
						M_ProcessMLCommand(
							n											:= n, 
							arrRCMD										:= arrLocalRCMD,
							arrEvent									:= arrLocalEvent,
							bInvalidCommand								:= FALSE,
							bRetry										:= FALSE,
							bCancel										:= FALSE
						);
					
				ELSE 
					M_ProcessMLCommand(
						n												:= n, 
						arrRCMD											:= arrLocalRCMD,
						arrEvent										:= arrLocalEvent,
						bInvalidCommand									:= TRUE,
						bRetry											:= FALSE,
						bCancel											:= FALSE
					);
				END_CASE
				
				arrLocalRCMD[n]											:= CmdEmpty;
			END_IF
		END_FOR
		
		iAction															:= 1;	
		
		(*Transition*)
		iCmdStep														:= 0;		
END_CASE

]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_TAEventUpdate" Id="{127e5a43-8677-442d-8f53-dddebd421447}">
      <Declaration><![CDATA[METHOD M_TAEventUpdate : BOOL
VAR_INPUT
END_VAR


VAR
	sFormatOut: STRING(255);
	sFormatSource : STRING(255);
	sLogName: STRING(255);
	sModuleID: STRING(255);
	sParameterStr: STRING;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[

CASE iEvtStep OF 
0: 	IF NOT bEventsStart THEN
		iEvtStep :=10; //process TA event
   	ELSE 
		iEvtStep :=20;
	END_IF
	
10: //process TA event	
	bLocalEventArrEmpty:= TRUE;
	bLocalPendingEventArrEmpty:= TRUE;

	//Collect local events (and clear previous TA events as well) 
	FOR n := 1 TO NO_OF_EVENT_BUFFER DO
	IF  arrLocalEvent[n].eEventName <> E_EventName.EmptyEvent THEN
			sModuleID := M_nModuleIDConversion(eModuleID:=arrLocalEvent[n].eModuleID);
			(*
			//sParameterStr := F_TAParamtoStr(iParam, sParam, bParam);
			fbFormat(sFormat:= '%s[%d],%s[%d]', arg1:= F_String(arrLocalEvent[n].sLogName), arg2:= F_Int(arrLocalEvent[n].eEventName), arg3:=F_String(sModuleID), 
					arg4:= F_DInt(arrLocalEvent[n].eModuleID), sOut=> sLogName ); 
			fbFormat(sFormat:= '%s,%s', arg1:= F_String(sLogName), arg2:= F_String(arrLocalEvent[n].sFailReason), sOut=> sFormatOut ); //logging
			*)
			
	sParameterStr := F_TAParamtoStr(arrLocalEvent[n].iParam, arrLocalEvent[n].sParam, arrLocalEvent[n].bParam);
	fbFormat(sFormat:= '%s[%d],%s[%d],%s', arg1:= F_String(arrLocalEvent[n].sLogName), arg2:= F_Int(arrLocalEvent[n].eEventName), arg3:=F_String(sModuleID), 
					arg4:= F_DInt(arrLocalEvent[n].eModuleID), arg5:=F_String(sParameterStr),sOut=> sLogName ); 
	fbFormat(sFormat:= '%s,%s', arg1:= F_String(sLogName), arg2:= F_String(arrLocalEvent[n].sFailReason), sOut=> sFormatOut ); //logging
			arrLocalEvent[n].sLogName:=sLogName;
			//fbFormat(sFormat:= '%s,%s', arg1:= F_String(arrLocalEvent[n].sLogName), arg2:= F_String(arrLocalEvent[n].sFailReason), sOut=> sFormatOut ); //logging
			fbFormat(sFormat:= 'Event TO TA[%d]', arg1:= F_UINT(n),  sOut=> sFormatSource);
			Logging.fbDebugLog.M_nLogger(iLogLevel:= Logging.fbDebugLog.P_iLogVerbosity, sSource:= sFormatSource, sMessage:=sFormatOut);
			arrTA_Events[n] := arrLocalEvent[n]; // Move Local[n]Event -> array TAEevnt
			arrLocalEvent[n] := EmptyEvents; // Clear Local event array[n]
			bLocalEventArrEmpty:= FALSE;
		ELSIF arrTA_Events[n].eEventName <> E_EventName.EmptyEvent THEN
			arrTA_Events[n] := EmptyEvents; // Clear previous TA Event array[n]
		END_IF
		
	END_FOR
	
	IF NOT bLocalEventArrEmpty THEN
		bEventsStart:= TRUE; //Tell TA there are events to be cleared before we will process the local pending events

//-	Int Flag 1/Nov/18
	IF iTCSEventTriggered >= 1000 THEN
		iTCSEventTriggered := 0;
	ELSE
		iTCSEventTriggered := iTCSEventTriggered + 1;
	END_IF
	//---------------------------------------------------		
		
		iEvtStep :=20;
		RETURN;
	END_IF
	
	//Check if there are local pending events
	IF arrPendingEventsQueue.Count > 0 THEN
		bLocalPendingEventArrEmpty:=FALSE;
	END_IF
	
	IF NOT bLocalPendingEventArrEmpty AND NOT bEventsUpdating THEN
	
		bEventsUpdating := TRUE; //lock it, ensure no one will read and write during updating the GVL 'arrPendingEventsQueue'
		
		iEventQueueCount   := arrPendingEventsQueue.Count;
		iEventProcessCount := arrPendingEventsQueue.Count;
	IF iEventQueueCount > NO_OF_EVENT_BUFFER THEN
		iEventProcessCount := NO_OF_EVENT_BUFFER; 
	ELSIF iEventQueueCount >= 1 THEN
		iEventProcessCount := iEventQueueCount; 	
	ELSIF iEventQueueCount < 1 THEN //In case of race condition
		//F_WriteLogWarning(WarningMessage:='Event queue buffer count is less than 1 during event processing');
		arrPendingEventsQueue.Count := 0;
		bEventsUpdating := FALSE; //release
		iEvtStep :=20;
		RETURN;
	END_IF
	
	//Collect the local pending events	
	FOR n := 1 TO iEventProcessCount DO
			arrTA_Events[n] := arrPendingEventsQueue.Queue[n]; // Copy LocalPending[n]Event -> array TAEevnt
		fbFormat(sFormat:= '%s,%s', arg1:= F_String(arrTA_Events[n].sLogName), arg2:= F_String(arrTA_Events[n].sFailReason), sOut=> sFormatOut ); //logging
		fbFormat(sFormat:= 'Event TO TA[%d]', arg1:= F_UINT(n),  sOut=> sFormatSource);
		Logging.fbDebugLog.M_nLogger(iLogLevel:= Logging.fbDebugLog.P_iLogVerbosity, sSource:= sFormatSource, sMessage:=sFormatOut);
		IF iEventQueueCount <= NO_OF_EVENT_BUFFER THEN //clear after processing (if iEventQueueCount > 10, need to dequeue)
			arrPendingEventsQueue.Queue[n] := EmptyEvents; // Clear LocalPending event array[n]
		END_IF
	END_FOR
	
	//Dequeue
	IF iEventQueueCount > NO_OF_EVENT_BUFFER THEN
		//Shift up and clear
		FOR n := NO_OF_EVENT_BUFFER+1 TO iEventQueueCount DO
			arrPendingEventsQueue.Queue[n-NO_OF_EVENT_BUFFER] := arrPendingEventsQueue.Queue[n];
			arrPendingEventsQueue.Queue[n] := EmptyEvents; 
		END_FOR
	END_IF

	arrPendingEventsQueue.Count := iEventQueueCount - iEventProcessCount;	

	bEventsUpdating := FALSE; //release
	bEventsStart:= TRUE; //Tell TA there are pending events to be cleared

//-	Int Flag 1/Nov/18
	IF iTCSEventTriggered >= 1000 THEN
		iTCSEventTriggered := 0;
	ELSE
		iTCSEventTriggered := iTCSEventTriggered + 1;
	END_IF
	//---------------------------------------------------
	
	iEvtStep :=20;
	RETURN;

END_IF

	iEvtStep :=20;
	
20: IF bEventsStart = FALSE THEN //only proceed to process the next arrLocalRCMD when the TA has cleared the bEventsStart flag to false
		iAction := 0;
	END_IF
	iEvtStep :=0;	
END_CASE

]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_TCCSessionRequest" Id="{4d3fafa3-9931-494f-9e54-440b970cfac1}">
      <Declaration><![CDATA[METHOD M_TCCSessionRequest : BOOL
VAR_INPUT
	n: INT;        //array number of which 10 commands to be processed
END_VAR
VAR
	eProcessState:E_ProcessState	:= E_ProcessState.eUNKNOWN;
	bSessionStartEnd				: BOOL;
   	iLevel:UINT;
	EmptyEvents: ST_Event; // to Clear the event array[n]
	CmdEmpty: ST_Command;
	i: UINT;            //temporary variable to loop all 6 parameters
	bErr: BOOL;         //temporary var for error flag
	sStatus:STRING;     //temporary var for error message

	iEventName: E_EventName;
	sLogName: STRING(255);
	iSendEvent: UINT;
	stMultiLeveVIO : ST_TCMultiLevel_VIO;
	//stCommonVIO : ST_CommonSeq_VIO;
END_VAR
VAR_IN_OUT
	arrRCMD : ARRAY [1..NO_OF_CMD_BUFFER] OF ST_Command;
	arrEvent: ARRAY [1..NO_OF_EVENT_BUFFER] OF ST_Event;
END_VAR

]]></Declaration>
      <Implementation>
        <ST><![CDATA[//If NoError
	//If !OngoingProcess
		//if IsSafeForTCCRequest
			//SetTCCRequestFlagOnGlobalTA
//else 
	//Fail Request;
	
bErr    := FALSE;
sStatus := '';

arrEvent[n] := EmptyEvents;

M_nModuleIDConversion(eModuleID:=arrRCMD[n].eModuleID , iLevel=>iLevel);	
bSessionStartEnd													:= arrRCMD[n].bParam[1]; //Get Val Directly From Cmd Parameters

//moduleid 
IF iLevel =0 THEN
	bErr := TRUE; 
	sStatus := 'Wrong Module ID';
	M_TCCSessionRequest:=FALSE;
ELSE
	//eProcessState:=SEL(iPOC_ML_Selection=1,arrTCMultiLevel[iLevel].stGblParam.iProcessState,arrTCShuttlePOC[iLevel].stGblParam.iProcessState );
	eProcessState:=arrTCMultiLevel[iLevel].stGblParam.iProcessState;
	IF  eProcessState = E_ProcessState.eUNKNOWN THEN
		bErr := TRUE; 
		sStatus := ' Module is in Unknown State!';
		M_TCCSessionRequest:=FALSE;
	ELSIF  eProcessState <> E_ProcessState.eAWAITGCMD THEN
		bErr := TRUE; 
		sStatus := ' Module is Busy!';
		M_TCCSessionRequest:=FALSE;
	ELSE
		//arrTCMultiLevel[iLevel].stGblParam.bTCCSessionReq := bSessionStartEnd;  		//update to TCC Internal Global Bit
		stMultiLeveVIO:=arrTCMultiLevel[iLevel].fbTCMultiLevelSeq.P_stTCMultiLevelVIO;
		stMultiLeveVIO.bTCCSessionActiveStatusFlag := bSessionStartEnd;					//update TCCAlive Bit
		arrTCMultiLevel[iLevel].fbTCMultiLevelSeq.P_stTCMultiLevelVIO:=stMultiLeveVIO;
		M_TCCSessionRequest:=TRUE;
	END_IF
	
END_IF

//send event to TA
iSendEvent := SEL(bErr, 1, 2);
M_nCmdtoEvent(eCmd2Event_TaskName:=arrRCMD[n].eTaskName , iCmd2Event_Result:=iSendEvent , eCmd2Event_EventName:=iEventName , sCmd2Event_EventName:=sLogName );
	arrEvent[n].sLogName:= sLogName;
	arrEvent[n].eEventName:= iEventName; 
	arrEvent[n].eModuleID:= arrRCMD[n].eModuleID; 
	arrEvent[n].iParam:= arrRCMD[n].iParam;
	arrEvent[n].sParam:= arrRCMD[n].sParam; 
	arrEvent[n].bParam:= arrRCMD[n].bParam; 
	arrEvent[n].dParam:= arrRCMD[n].dParam; 
	arrEvent[n].sFailReason:= sStatus;

arrRCMD[n]:= CmdEmpty;]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_ValidateRecipe" Id="{2994feec-8ac2-4d13-81b0-be18df259cdd}">
      <Declaration><![CDATA[METHOD M_ValidateRecipe : BOOL
VAR_INPUT
	n: UINT;          //array number of which 30 commands to be processed
END_VAR
VAR
	iLevel : INT := 0;
	EmptyEvents: ST_Event; // to Clear the event array[n]
	CmdEmpty: ST_Command;
	i: UINT;            //temporary variable to loop all 6 parameters
	bErr: BOOL;         //temporary var for error flag
	sStatus:STRING;     //temporary var for error message

	iEventName: E_EventName;
	sLogName: STRING(81);
	iSendEvent: UINT;
	iModuleID: DINT;
	sModuleID:STRING;
END_VAR
VAR_IN_OUT
	arrRCMD : ARRAY [1..NO_OF_CMD_BUFFER] OF ST_Command;
	arrEvent: ARRAY [1..NO_OF_EVENT_BUFFER] OF ST_Event;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[bErr    := FALSE;
sStatus := '';

arrEvent[n] := EmptyEvents;
sModuleID := M_nModuleIDConversion(eModuleID:=arrRCMD[n].eModuleID,iLevel=>iModuleID);
sStatus:= sModuleID;
bErr:=SEL(iModuleID=0, FALSE, TRUE);

iSendEvent := SEL(bErr, 1, 2);
M_nCmdtoEvent(eCmd2Event_TaskName:=arrRCMD[n].eTaskName , iCmd2Event_Result:=iSendEvent , eCmd2Event_EventName:=iEventName , sCmd2Event_EventName:=sLogName );
arrEvent[n].sLogName:= sLogName;
arrEvent[n].eEventName:= iEventName; 
arrEvent[n].eModuleID:= arrRCMD[n].eModuleID; 
arrEvent[n].iParam:= arrRCMD[n].iParam;
arrEvent[n].sParam:= arrRCMD[n].sParam; 
arrEvent[n].bParam:= arrRCMD[n].bParam; 
arrEvent[n].dParam:= arrRCMD[n].dParam; 
arrEvent[n].sFailReason:= sStatus;
		
arrRCMD[n]:= CmdEmpty;]]></ST>
      </Implementation>
    </Method>
    <Method Name="TCUSafeState" Id="{98dd75fc-52a8-4c0e-9183-73eaf12b54ba}">
      <Declaration><![CDATA[METHOD TCUSafeState : BOOL
VAR_INPUT
	n							: INT; //array number of which 10 commands to be processed
	//bOn 						: BOOL; // true = on, false = off;
END_VAR

VAR
	sMessage					: STRING;
	sDebugSource				: STRING;
   	iLevel						: UINT;

	EmptyEvents					: ST_Event; // to Clear the event array[n]
	CmdEmpty					: ST_Command;
	i							: UINT; // variable to loop all 6 parameters
	bErr						: BOOL; // var for error flag
	sStatus						: STRING; // var for error message

	iEventName					: E_EventName;
	sLogName					: STRING(255);
	iSendEvent					: UINT;
	stMultiLeveVIO				: ST_TCMultiLevel_VIO;
	//stCommonVIO				: ST_CommonSeq_VIO;
END_VAR

VAR_IN_OUT
	arrRCMD						: ARRAY [1..NO_OF_CMD_BUFFER] OF ST_Command;
	arrEvent					: ARRAY [1..NO_OF_EVENT_BUFFER] OF ST_Event;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[bErr											:= FALSE;
sStatus											:= '';

arrEvent[n]										:= EmptyEvents;

M_nModuleIDConversion(
	eModuleID									:= arrRCMD[n].eModuleID, 
	iLevel										=> iLevel);

//moduleid 
IF iLevel = 0 THEN
	bErr 										:= TRUE; 
	sStatus 									:= 'Wrong Module ID';
ELSE
	IF arrTCMultiLevel[iLevel].stGblParam.iProcessState = E_ProcessState.eINIT THEN
		bErr 									:= TRUE; 
		sStatus 								:= 'System initialising';
	ELSE
		fbTCUSafeState.Execute(
			n									:= n,
			iLevel								:= iLevel,
			arrRCMD								:= arrRCMD,
			arrEVENT							:= arrEVENT);;
	END_IF
END_IF

//send event to TA
iSendEvent 										:= SEL(bErr, 1, 2);

M_nCmdtoEvent(
	eCmd2Event_TaskName							:= arrRCMD[n].eTaskName, 
	iCmd2Event_Result							:= iSendEvent, 
	eCmd2Event_EventName						:= iEventName, 
	sCmd2Event_EventName						:= sLogName);
	
arrEvent[n].sLogName							:= sLogName;
arrEvent[n].eEventName							:= iEventName; 
arrEvent[n].eModuleID							:= arrRCMD[n].eModuleID; 
arrEvent[n].iParam								:= arrRCMD[n].iParam;
arrEvent[n].sParam								:= arrRCMD[n].sParam; 
arrEvent[n].bParam								:= arrRCMD[n].bParam; 
arrEvent[n].dParam								:= arrRCMD[n].dParam; 
arrEvent[n].sFailReason							:= sStatus;
arrRCMD[n]										:= CmdEmpty;]]></ST>
      </Implementation>
    </Method>
    <LineIds Name="FB_CmdAndEventUpdate">
      <LineId Id="179" Count="0" />
      <LineId Id="9" Count="0" />
      <LineId Id="68" Count="0" />
      <LineId Id="71" Count="1" />
      <LineId Id="69" Count="0" />
      <LineId Id="243" Count="0" />
      <LineId Id="263" Count="0" />
      <LineId Id="180" Count="0" />
      <LineId Id="106" Count="0" />
      <LineId Id="142" Count="0" />
    </LineIds>
    <LineIds Name="FB_CmdAndEventUpdate.CheckTaskName">
      <LineId Id="7" Count="0" />
      <LineId Id="9" Count="0" />
      <LineId Id="11" Count="0" />
      <LineId Id="13" Count="0" />
      <LineId Id="15" Count="0" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="FB_CmdAndEventUpdate.M_ActivateRecipe">
      <LineId Id="6" Count="1" />
      <LineId Id="50" Count="0" />
      <LineId Id="9" Count="0" />
      <LineId Id="51" Count="0" />
      <LineId Id="91" Count="2" />
      <LineId Id="52" Count="0" />
      <LineId Id="49" Count="0" />
      <LineId Id="54" Count="0" />
      <LineId Id="38" Count="0" />
      <LineId Id="94" Count="0" />
      <LineId Id="39" Count="0" />
      <LineId Id="95" Count="4" />
      <LineId Id="40" Count="8" />
      <LineId Id="34" Count="0" />
    </LineIds>
    <LineIds Name="FB_CmdAndEventUpdate.M_AddEvent">
      <LineId Id="6" Count="3" />
      <LineId Id="68" Count="0" />
      <LineId Id="134" Count="0" />
      <LineId Id="10" Count="10" />
      <LineId Id="69" Count="0" />
      <LineId Id="135" Count="0" />
      <LineId Id="21" Count="5" />
      <LineId Id="70" Count="0" />
      <LineId Id="136" Count="0" />
      <LineId Id="27" Count="4" />
      <LineId Id="88" Count="0" />
      <LineId Id="112" Count="0" />
      <LineId Id="90" Count="2" />
      <LineId Id="89" Count="0" />
      <LineId Id="54" Count="0" />
      <LineId Id="32" Count="8" />
      <LineId Id="59" Count="0" />
      <LineId Id="41" Count="3" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="FB_CmdAndEventUpdate.M_AirOnOFF">
      <LineId Id="36" Count="5" />
      <LineId Id="260" Count="1" />
      <LineId Id="42" Count="9" />
      <LineId Id="90" Count="0" />
      <LineId Id="96" Count="1" />
      <LineId Id="165" Count="3" />
      <LineId Id="164" Count="0" />
      <LineId Id="130" Count="0" />
      <LineId Id="134" Count="0" />
      <LineId Id="98" Count="0" />
      <LineId Id="128" Count="0" />
      <LineId Id="262" Count="0" />
      <LineId Id="94" Count="0" />
      <LineId Id="100" Count="1" />
      <LineId Id="171" Count="3" />
      <LineId Id="169" Count="0" />
      <LineId Id="131" Count="0" />
      <LineId Id="135" Count="0" />
      <LineId Id="91" Count="0" />
      <LineId Id="132" Count="0" />
      <LineId Id="263" Count="0" />
      <LineId Id="205" Count="11" />
      <LineId Id="264" Count="0" />
      <LineId Id="218" Count="0" />
      <LineId Id="220" Count="10" />
      <LineId Id="219" Count="0" />
      <LineId Id="265" Count="0" />
      <LineId Id="204" Count="0" />
      <LineId Id="58" Count="0" />
      <LineId Id="60" Count="5" />
      <LineId Id="77" Count="3" />
      <LineId Id="266" Count="4" />
      <LineId Id="81" Count="8" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="FB_CmdAndEventUpdate.M_AlarmReset">
      <LineId Id="777" Count="11" />
      <LineId Id="896" Count="1" />
      <LineId Id="1025" Count="0" />
      <LineId Id="898" Count="0" />
      <LineId Id="894" Count="0" />
      <LineId Id="981" Count="3" />
      <LineId Id="789" Count="0" />
      <LineId Id="866" Count="0" />
      <LineId Id="868" Count="0" />
      <LineId Id="900" Count="1" />
      <LineId Id="899" Count="0" />
      <LineId Id="985" Count="2" />
      <LineId Id="867" Count="0" />
      <LineId Id="790" Count="3" />
      <LineId Id="934" Count="0" />
      <LineId Id="938" Count="0" />
      <LineId Id="936" Count="1" />
      <LineId Id="939" Count="0" />
      <LineId Id="927" Count="0" />
      <LineId Id="930" Count="3" />
      <LineId Id="929" Count="0" />
      <LineId Id="928" Count="0" />
      <LineId Id="798" Count="7" />
      <LineId Id="988" Count="0" />
      <LineId Id="990" Count="2" />
      <LineId Id="1058" Count="0" />
      <LineId Id="989" Count="0" />
      <LineId Id="806" Count="8" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="FB_CmdAndEventUpdate.M_DoorOpenClose">
      <LineId Id="31" Count="1" />
      <LineId Id="1314" Count="0" />
      <LineId Id="33" Count="1" />
      <LineId Id="405" Count="0" />
      <LineId Id="397" Count="0" />
      <LineId Id="1430" Count="1" />
      <LineId Id="742" Count="0" />
      <LineId Id="404" Count="0" />
      <LineId Id="481" Count="0" />
      <LineId Id="485" Count="1" />
      <LineId Id="841" Count="0" />
      <LineId Id="1491" Count="0" />
      <LineId Id="1346" Count="0" />
      <LineId Id="1379" Count="1" />
      <LineId Id="1383" Count="0" />
      <LineId Id="1381" Count="0" />
      <LineId Id="1347" Count="0" />
      <LineId Id="1384" Count="0" />
      <LineId Id="1309" Count="0" />
      <LineId Id="1492" Count="0" />
      <LineId Id="1310" Count="0" />
      <LineId Id="845" Count="0" />
      <LineId Id="1493" Count="0" />
      <LineId Id="1099" Count="0" />
      <LineId Id="1134" Count="0" />
      <LineId Id="847" Count="0" />
      <LineId Id="1100" Count="0" />
      <LineId Id="851" Count="0" />
      <LineId Id="1267" Count="0" />
      <LineId Id="1432" Count="4" />
      <LineId Id="1268" Count="0" />
      <LineId Id="1437" Count="4" />
      <LineId Id="1238" Count="0" />
      <LineId Id="1442" Count="9" />
      <LineId Id="1240" Count="0" />
      <LineId Id="1308" Count="0" />
      <LineId Id="1275" Count="0" />
      <LineId Id="1274" Count="0" />
      <LineId Id="1196" Count="0" />
      <LineId Id="1221" Count="1" />
      <LineId Id="1197" Count="0" />
      <LineId Id="802" Count="0" />
      <LineId Id="1452" Count="4" />
      <LineId Id="803" Count="6" />
      <LineId Id="228" Count="0" />
      <LineId Id="163" Count="0" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="FB_CmdAndEventUpdate.M_EnableModule">
      <LineId Id="21" Count="2" />
      <LineId Id="5" Count="0" />
      <LineId Id="25" Count="0" />
      <LineId Id="24" Count="0" />
      <LineId Id="267" Count="0" />
      <LineId Id="381" Count="2" />
      <LineId Id="27" Count="6" />
      <LineId Id="36" Count="0" />
      <LineId Id="35" Count="0" />
      <LineId Id="26" Count="0" />
      <LineId Id="41" Count="0" />
      <LineId Id="51" Count="2" />
      <LineId Id="174" Count="0" />
      <LineId Id="326" Count="0" />
      <LineId Id="273" Count="0" />
      <LineId Id="351" Count="2" />
      <LineId Id="384" Count="0" />
      <LineId Id="355" Count="0" />
      <LineId Id="385" Count="0" />
      <LineId Id="356" Count="0" />
      <LineId Id="386" Count="0" />
      <LineId Id="354" Count="0" />
      <LineId Id="237" Count="0" />
      <LineId Id="100" Count="0" />
      <LineId Id="178" Count="0" />
      <LineId Id="101" Count="1" />
      <LineId Id="177" Count="0" />
      <LineId Id="176" Count="0" />
      <LineId Id="104" Count="0" />
      <LineId Id="45" Count="1" />
      <LineId Id="40" Count="0" />
      <LineId Id="202" Count="1" />
      <LineId Id="387" Count="4" />
      <LineId Id="204" Count="7" />
      <LineId Id="213" Count="0" />
      <LineId Id="201" Count="0" />
    </LineIds>
    <LineIds Name="FB_CmdAndEventUpdate.M_EnDisSubModuleIDConversion">
      <LineId Id="118" Count="0" />
      <LineId Id="172" Count="0" />
      <LineId Id="8" Count="0" />
      <LineId Id="193" Count="0" />
      <LineId Id="302" Count="2" />
      <LineId Id="9" Count="0" />
      <LineId Id="301" Count="0" />
      <LineId Id="305" Count="2" />
      <LineId Id="10" Count="0" />
      <LineId Id="300" Count="0" />
      <LineId Id="308" Count="2" />
      <LineId Id="11" Count="0" />
      <LineId Id="299" Count="0" />
      <LineId Id="311" Count="2" />
      <LineId Id="12" Count="0" />
      <LineId Id="298" Count="0" />
      <LineId Id="314" Count="2" />
      <LineId Id="13" Count="0" />
      <LineId Id="297" Count="0" />
      <LineId Id="317" Count="2" />
      <LineId Id="15" Count="0" />
      <LineId Id="296" Count="0" />
      <LineId Id="320" Count="2" />
      <LineId Id="16" Count="0" />
      <LineId Id="295" Count="0" />
      <LineId Id="323" Count="2" />
      <LineId Id="17" Count="0" />
      <LineId Id="294" Count="0" />
      <LineId Id="326" Count="2" />
      <LineId Id="18" Count="0" />
      <LineId Id="293" Count="0" />
      <LineId Id="329" Count="2" />
      <LineId Id="19" Count="0" />
      <LineId Id="292" Count="0" />
      <LineId Id="332" Count="2" />
      <LineId Id="20" Count="0" />
      <LineId Id="291" Count="0" />
      <LineId Id="335" Count="2" />
      <LineId Id="22" Count="0" />
      <LineId Id="290" Count="0" />
      <LineId Id="338" Count="2" />
      <LineId Id="23" Count="0" />
      <LineId Id="289" Count="0" />
      <LineId Id="341" Count="2" />
      <LineId Id="24" Count="0" />
      <LineId Id="288" Count="0" />
      <LineId Id="344" Count="2" />
      <LineId Id="25" Count="0" />
      <LineId Id="287" Count="0" />
      <LineId Id="347" Count="2" />
      <LineId Id="26" Count="0" />
      <LineId Id="286" Count="0" />
      <LineId Id="350" Count="2" />
      <LineId Id="27" Count="0" />
      <LineId Id="285" Count="0" />
      <LineId Id="353" Count="2" />
      <LineId Id="29" Count="0" />
      <LineId Id="284" Count="0" />
      <LineId Id="356" Count="2" />
      <LineId Id="30" Count="0" />
      <LineId Id="283" Count="0" />
      <LineId Id="359" Count="2" />
      <LineId Id="31" Count="0" />
      <LineId Id="282" Count="0" />
      <LineId Id="362" Count="2" />
      <LineId Id="32" Count="0" />
      <LineId Id="281" Count="0" />
      <LineId Id="365" Count="2" />
      <LineId Id="33" Count="0" />
      <LineId Id="280" Count="0" />
      <LineId Id="368" Count="2" />
      <LineId Id="34" Count="0" />
      <LineId Id="279" Count="0" />
      <LineId Id="371" Count="2" />
      <LineId Id="36" Count="0" />
      <LineId Id="278" Count="0" />
      <LineId Id="374" Count="2" />
      <LineId Id="37" Count="0" />
      <LineId Id="277" Count="0" />
      <LineId Id="459" Count="0" />
      <LineId Id="542" Count="0" />
      <LineId Id="625" Count="0" />
      <LineId Id="38" Count="0" />
      <LineId Id="276" Count="0" />
      <LineId Id="458" Count="0" />
      <LineId Id="541" Count="0" />
      <LineId Id="624" Count="0" />
      <LineId Id="39" Count="0" />
      <LineId Id="275" Count="0" />
      <LineId Id="457" Count="0" />
      <LineId Id="540" Count="0" />
      <LineId Id="623" Count="0" />
      <LineId Id="40" Count="0" />
      <LineId Id="274" Count="0" />
      <LineId Id="456" Count="0" />
      <LineId Id="539" Count="0" />
      <LineId Id="622" Count="0" />
      <LineId Id="41" Count="0" />
      <LineId Id="273" Count="0" />
      <LineId Id="455" Count="0" />
      <LineId Id="538" Count="0" />
      <LineId Id="621" Count="0" />
      <LineId Id="42" Count="1" />
      <LineId Id="272" Count="0" />
      <LineId Id="454" Count="0" />
      <LineId Id="537" Count="0" />
      <LineId Id="620" Count="0" />
      <LineId Id="44" Count="0" />
      <LineId Id="271" Count="0" />
      <LineId Id="453" Count="0" />
      <LineId Id="536" Count="0" />
      <LineId Id="619" Count="0" />
      <LineId Id="45" Count="0" />
      <LineId Id="270" Count="0" />
      <LineId Id="452" Count="0" />
      <LineId Id="535" Count="0" />
      <LineId Id="618" Count="0" />
      <LineId Id="46" Count="0" />
      <LineId Id="269" Count="0" />
      <LineId Id="451" Count="0" />
      <LineId Id="534" Count="0" />
      <LineId Id="617" Count="0" />
      <LineId Id="47" Count="0" />
      <LineId Id="268" Count="0" />
      <LineId Id="450" Count="0" />
      <LineId Id="533" Count="0" />
      <LineId Id="616" Count="0" />
      <LineId Id="48" Count="0" />
      <LineId Id="267" Count="0" />
      <LineId Id="173" Count="0" />
      <LineId Id="532" Count="0" />
      <LineId Id="615" Count="0" />
      <LineId Id="77" Count="0" />
      <LineId Id="266" Count="0" />
      <LineId Id="448" Count="0" />
      <LineId Id="531" Count="0" />
      <LineId Id="614" Count="0" />
      <LineId Id="78" Count="0" />
      <LineId Id="265" Count="0" />
      <LineId Id="447" Count="0" />
      <LineId Id="530" Count="0" />
      <LineId Id="613" Count="0" />
      <LineId Id="79" Count="0" />
      <LineId Id="264" Count="0" />
      <LineId Id="446" Count="0" />
      <LineId Id="529" Count="0" />
      <LineId Id="612" Count="0" />
      <LineId Id="80" Count="0" />
      <LineId Id="263" Count="0" />
      <LineId Id="445" Count="0" />
      <LineId Id="528" Count="0" />
      <LineId Id="611" Count="0" />
      <LineId Id="81" Count="0" />
      <LineId Id="262" Count="0" />
      <LineId Id="444" Count="0" />
      <LineId Id="527" Count="0" />
      <LineId Id="610" Count="0" />
      <LineId Id="82" Count="0" />
      <LineId Id="261" Count="0" />
      <LineId Id="443" Count="0" />
      <LineId Id="526" Count="0" />
      <LineId Id="609" Count="0" />
      <LineId Id="84" Count="0" />
      <LineId Id="260" Count="0" />
      <LineId Id="442" Count="0" />
      <LineId Id="525" Count="0" />
      <LineId Id="608" Count="0" />
      <LineId Id="85" Count="0" />
      <LineId Id="259" Count="0" />
      <LineId Id="441" Count="0" />
      <LineId Id="524" Count="0" />
      <LineId Id="607" Count="0" />
      <LineId Id="86" Count="0" />
      <LineId Id="258" Count="0" />
      <LineId Id="440" Count="0" />
      <LineId Id="523" Count="0" />
      <LineId Id="606" Count="0" />
      <LineId Id="87" Count="0" />
      <LineId Id="257" Count="0" />
      <LineId Id="439" Count="0" />
      <LineId Id="522" Count="0" />
      <LineId Id="605" Count="0" />
      <LineId Id="88" Count="0" />
      <LineId Id="256" Count="0" />
      <LineId Id="438" Count="0" />
      <LineId Id="521" Count="0" />
      <LineId Id="604" Count="0" />
      <LineId Id="89" Count="0" />
      <LineId Id="255" Count="0" />
      <LineId Id="437" Count="0" />
      <LineId Id="520" Count="0" />
      <LineId Id="603" Count="0" />
      <LineId Id="91" Count="0" />
      <LineId Id="254" Count="0" />
      <LineId Id="436" Count="0" />
      <LineId Id="519" Count="0" />
      <LineId Id="602" Count="0" />
      <LineId Id="92" Count="0" />
      <LineId Id="252" Count="0" />
      <LineId Id="435" Count="0" />
      <LineId Id="518" Count="0" />
      <LineId Id="601" Count="0" />
      <LineId Id="93" Count="0" />
      <LineId Id="251" Count="0" />
      <LineId Id="434" Count="0" />
      <LineId Id="517" Count="0" />
      <LineId Id="600" Count="0" />
      <LineId Id="94" Count="0" />
      <LineId Id="250" Count="0" />
      <LineId Id="433" Count="0" />
      <LineId Id="516" Count="0" />
      <LineId Id="599" Count="0" />
      <LineId Id="95" Count="0" />
      <LineId Id="249" Count="0" />
      <LineId Id="432" Count="0" />
      <LineId Id="515" Count="0" />
      <LineId Id="598" Count="0" />
      <LineId Id="96" Count="0" />
      <LineId Id="248" Count="0" />
      <LineId Id="431" Count="0" />
      <LineId Id="514" Count="0" />
      <LineId Id="597" Count="0" />
      <LineId Id="98" Count="0" />
      <LineId Id="247" Count="0" />
      <LineId Id="430" Count="0" />
      <LineId Id="513" Count="0" />
      <LineId Id="596" Count="0" />
      <LineId Id="99" Count="0" />
      <LineId Id="246" Count="0" />
      <LineId Id="429" Count="0" />
      <LineId Id="512" Count="0" />
      <LineId Id="595" Count="0" />
      <LineId Id="100" Count="0" />
      <LineId Id="245" Count="0" />
      <LineId Id="428" Count="0" />
      <LineId Id="511" Count="0" />
      <LineId Id="594" Count="0" />
      <LineId Id="101" Count="0" />
      <LineId Id="244" Count="0" />
      <LineId Id="427" Count="0" />
      <LineId Id="510" Count="0" />
      <LineId Id="593" Count="0" />
      <LineId Id="102" Count="0" />
      <LineId Id="243" Count="0" />
      <LineId Id="426" Count="0" />
      <LineId Id="509" Count="0" />
      <LineId Id="592" Count="0" />
      <LineId Id="103" Count="0" />
      <LineId Id="242" Count="0" />
      <LineId Id="425" Count="0" />
      <LineId Id="508" Count="0" />
      <LineId Id="591" Count="0" />
      <LineId Id="105" Count="0" />
      <LineId Id="241" Count="0" />
      <LineId Id="424" Count="0" />
      <LineId Id="507" Count="0" />
      <LineId Id="590" Count="0" />
      <LineId Id="106" Count="0" />
      <LineId Id="240" Count="0" />
      <LineId Id="423" Count="0" />
      <LineId Id="506" Count="0" />
      <LineId Id="589" Count="0" />
      <LineId Id="107" Count="0" />
      <LineId Id="239" Count="0" />
      <LineId Id="422" Count="0" />
      <LineId Id="505" Count="0" />
      <LineId Id="588" Count="0" />
      <LineId Id="108" Count="0" />
      <LineId Id="238" Count="0" />
      <LineId Id="421" Count="0" />
      <LineId Id="504" Count="0" />
      <LineId Id="587" Count="0" />
      <LineId Id="109" Count="0" />
      <LineId Id="237" Count="0" />
      <LineId Id="420" Count="0" />
      <LineId Id="503" Count="0" />
      <LineId Id="586" Count="0" />
      <LineId Id="110" Count="0" />
      <LineId Id="236" Count="0" />
      <LineId Id="419" Count="0" />
      <LineId Id="502" Count="0" />
      <LineId Id="585" Count="0" />
      <LineId Id="112" Count="0" />
      <LineId Id="235" Count="0" />
      <LineId Id="418" Count="0" />
      <LineId Id="501" Count="0" />
      <LineId Id="584" Count="0" />
      <LineId Id="113" Count="0" />
      <LineId Id="234" Count="0" />
      <LineId Id="417" Count="0" />
      <LineId Id="500" Count="0" />
      <LineId Id="583" Count="0" />
      <LineId Id="114" Count="0" />
      <LineId Id="233" Count="0" />
      <LineId Id="416" Count="0" />
      <LineId Id="499" Count="0" />
      <LineId Id="582" Count="0" />
      <LineId Id="115" Count="0" />
      <LineId Id="232" Count="0" />
      <LineId Id="415" Count="0" />
      <LineId Id="498" Count="0" />
      <LineId Id="581" Count="0" />
      <LineId Id="116" Count="0" />
      <LineId Id="231" Count="0" />
      <LineId Id="414" Count="0" />
      <LineId Id="497" Count="0" />
      <LineId Id="580" Count="0" />
      <LineId Id="76" Count="0" />
      <LineId Id="230" Count="0" />
      <LineId Id="413" Count="0" />
      <LineId Id="496" Count="0" />
      <LineId Id="579" Count="0" />
      <LineId Id="132" Count="0" />
      <LineId Id="229" Count="0" />
      <LineId Id="412" Count="0" />
      <LineId Id="495" Count="0" />
      <LineId Id="578" Count="0" />
      <LineId Id="133" Count="0" />
      <LineId Id="228" Count="0" />
      <LineId Id="411" Count="0" />
      <LineId Id="494" Count="0" />
      <LineId Id="577" Count="0" />
      <LineId Id="134" Count="0" />
      <LineId Id="227" Count="0" />
      <LineId Id="410" Count="0" />
      <LineId Id="493" Count="0" />
      <LineId Id="576" Count="0" />
      <LineId Id="135" Count="0" />
      <LineId Id="226" Count="0" />
      <LineId Id="409" Count="0" />
      <LineId Id="492" Count="0" />
      <LineId Id="575" Count="0" />
      <LineId Id="136" Count="0" />
      <LineId Id="225" Count="0" />
      <LineId Id="408" Count="0" />
      <LineId Id="491" Count="0" />
      <LineId Id="574" Count="0" />
      <LineId Id="137" Count="0" />
      <LineId Id="224" Count="0" />
      <LineId Id="407" Count="0" />
      <LineId Id="490" Count="0" />
      <LineId Id="573" Count="0" />
      <LineId Id="139" Count="0" />
      <LineId Id="223" Count="0" />
      <LineId Id="406" Count="0" />
      <LineId Id="489" Count="0" />
      <LineId Id="572" Count="0" />
      <LineId Id="140" Count="0" />
      <LineId Id="222" Count="0" />
      <LineId Id="405" Count="0" />
      <LineId Id="488" Count="0" />
      <LineId Id="571" Count="0" />
      <LineId Id="141" Count="0" />
      <LineId Id="221" Count="0" />
      <LineId Id="404" Count="0" />
      <LineId Id="487" Count="0" />
      <LineId Id="570" Count="0" />
      <LineId Id="142" Count="0" />
      <LineId Id="220" Count="0" />
      <LineId Id="403" Count="0" />
      <LineId Id="486" Count="0" />
      <LineId Id="569" Count="0" />
      <LineId Id="143" Count="0" />
      <LineId Id="219" Count="0" />
      <LineId Id="402" Count="0" />
      <LineId Id="485" Count="0" />
      <LineId Id="568" Count="0" />
      <LineId Id="144" Count="0" />
      <LineId Id="218" Count="0" />
      <LineId Id="401" Count="0" />
      <LineId Id="484" Count="0" />
      <LineId Id="567" Count="0" />
      <LineId Id="146" Count="0" />
      <LineId Id="217" Count="0" />
      <LineId Id="400" Count="0" />
      <LineId Id="483" Count="0" />
      <LineId Id="566" Count="0" />
      <LineId Id="147" Count="0" />
      <LineId Id="216" Count="0" />
      <LineId Id="399" Count="0" />
      <LineId Id="482" Count="0" />
      <LineId Id="565" Count="0" />
      <LineId Id="148" Count="0" />
      <LineId Id="215" Count="0" />
      <LineId Id="398" Count="0" />
      <LineId Id="481" Count="0" />
      <LineId Id="564" Count="0" />
      <LineId Id="149" Count="0" />
      <LineId Id="214" Count="0" />
      <LineId Id="397" Count="0" />
      <LineId Id="480" Count="0" />
      <LineId Id="563" Count="0" />
      <LineId Id="150" Count="0" />
      <LineId Id="213" Count="0" />
      <LineId Id="396" Count="0" />
      <LineId Id="479" Count="0" />
      <LineId Id="562" Count="0" />
      <LineId Id="151" Count="0" />
      <LineId Id="212" Count="0" />
      <LineId Id="395" Count="0" />
      <LineId Id="478" Count="0" />
      <LineId Id="561" Count="0" />
      <LineId Id="152" Count="1" />
      <LineId Id="211" Count="0" />
      <LineId Id="394" Count="0" />
      <LineId Id="477" Count="0" />
      <LineId Id="560" Count="0" />
      <LineId Id="154" Count="0" />
      <LineId Id="210" Count="0" />
      <LineId Id="393" Count="0" />
      <LineId Id="476" Count="0" />
      <LineId Id="559" Count="0" />
      <LineId Id="155" Count="0" />
      <LineId Id="209" Count="0" />
      <LineId Id="392" Count="0" />
      <LineId Id="475" Count="0" />
      <LineId Id="558" Count="0" />
      <LineId Id="156" Count="0" />
      <LineId Id="208" Count="0" />
      <LineId Id="391" Count="0" />
      <LineId Id="474" Count="0" />
      <LineId Id="557" Count="0" />
      <LineId Id="157" Count="0" />
      <LineId Id="207" Count="0" />
      <LineId Id="390" Count="0" />
      <LineId Id="473" Count="0" />
      <LineId Id="556" Count="0" />
      <LineId Id="158" Count="0" />
      <LineId Id="206" Count="0" />
      <LineId Id="389" Count="0" />
      <LineId Id="472" Count="0" />
      <LineId Id="555" Count="0" />
      <LineId Id="160" Count="0" />
      <LineId Id="205" Count="0" />
      <LineId Id="388" Count="0" />
      <LineId Id="471" Count="0" />
      <LineId Id="554" Count="0" />
      <LineId Id="161" Count="0" />
      <LineId Id="204" Count="0" />
      <LineId Id="387" Count="0" />
      <LineId Id="470" Count="0" />
      <LineId Id="553" Count="0" />
      <LineId Id="162" Count="0" />
      <LineId Id="203" Count="0" />
      <LineId Id="386" Count="0" />
      <LineId Id="469" Count="0" />
      <LineId Id="552" Count="0" />
      <LineId Id="163" Count="0" />
      <LineId Id="202" Count="0" />
      <LineId Id="385" Count="0" />
      <LineId Id="468" Count="0" />
      <LineId Id="551" Count="0" />
      <LineId Id="164" Count="0" />
      <LineId Id="201" Count="0" />
      <LineId Id="384" Count="0" />
      <LineId Id="467" Count="0" />
      <LineId Id="550" Count="0" />
      <LineId Id="165" Count="0" />
      <LineId Id="200" Count="0" />
      <LineId Id="383" Count="0" />
      <LineId Id="466" Count="0" />
      <LineId Id="549" Count="0" />
      <LineId Id="167" Count="0" />
      <LineId Id="199" Count="0" />
      <LineId Id="382" Count="0" />
      <LineId Id="465" Count="0" />
      <LineId Id="548" Count="0" />
      <LineId Id="168" Count="0" />
      <LineId Id="198" Count="0" />
      <LineId Id="381" Count="0" />
      <LineId Id="464" Count="0" />
      <LineId Id="547" Count="0" />
      <LineId Id="169" Count="0" />
      <LineId Id="197" Count="0" />
      <LineId Id="380" Count="0" />
      <LineId Id="463" Count="0" />
      <LineId Id="546" Count="0" />
      <LineId Id="170" Count="0" />
      <LineId Id="196" Count="0" />
      <LineId Id="379" Count="0" />
      <LineId Id="462" Count="0" />
      <LineId Id="545" Count="0" />
      <LineId Id="171" Count="0" />
      <LineId Id="195" Count="0" />
      <LineId Id="378" Count="0" />
      <LineId Id="461" Count="0" />
      <LineId Id="544" Count="0" />
      <LineId Id="131" Count="0" />
      <LineId Id="194" Count="0" />
      <LineId Id="377" Count="0" />
      <LineId Id="460" Count="0" />
      <LineId Id="543" Count="0" />
      <LineId Id="70" Count="0" />
      <LineId Id="50" Count="9" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="FB_CmdAndEventUpdate.M_nCmdtoEvent">
      <LineId Id="2428" Count="0" />
      <LineId Id="2430" Count="84" />
      <LineId Id="3322" Count="0" />
      <LineId Id="2515" Count="731" />
      <LineId Id="3261" Count="1" />
      <LineId Id="3264" Count="6" />
      <LineId Id="3263" Count="0" />
      <LineId Id="3271" Count="6" />
      <LineId Id="3247" Count="0" />
      <LineId Id="3279" Count="6" />
      <LineId Id="3278" Count="0" />
      <LineId Id="3287" Count="6" />
      <LineId Id="3286" Count="0" />
      <LineId Id="3303" Count="6" />
      <LineId Id="3302" Count="0" />
      <LineId Id="3312" Count="6" />
      <LineId Id="3310" Count="0" />
      <LineId Id="3333" Count="3" />
      <LineId Id="3339" Count="1" />
      <LineId Id="3368" Count="0" />
      <LineId Id="3332" Count="0" />
      <LineId Id="3311" Count="0" />
      <LineId Id="3352" Count="6" />
      <LineId Id="3350" Count="1" />
      <LineId Id="3248" Count="4" />
      <LineId Id="2408" Count="0" />
    </LineIds>
    <LineIds Name="FB_CmdAndEventUpdate.M_nModuleIDConversion">
      <LineId Id="5" Count="0" />
      <LineId Id="17" Count="0" />
      <LineId Id="21" Count="1" />
      <LineId Id="24" Count="0" />
      <LineId Id="23" Count="0" />
      <LineId Id="20" Count="0" />
      <LineId Id="32" Count="0" />
      <LineId Id="95" Count="4" />
      <LineId Id="83" Count="0" />
      <LineId Id="101" Count="5" />
      <LineId Id="100" Count="0" />
      <LineId Id="108" Count="5" />
      <LineId Id="107" Count="0" />
      <LineId Id="115" Count="5" />
      <LineId Id="114" Count="0" />
      <LineId Id="122" Count="5" />
      <LineId Id="121" Count="0" />
      <LineId Id="181" Count="0" />
      <LineId Id="145" Count="0" />
      <LineId Id="147" Count="4" />
      <LineId Id="169" Count="0" />
      <LineId Id="224" Count="0" />
      <LineId Id="182" Count="0" />
      <LineId Id="184" Count="5" />
      <LineId Id="225" Count="0" />
      <LineId Id="191" Count="5" />
      <LineId Id="226" Count="0" />
      <LineId Id="198" Count="5" />
      <LineId Id="227" Count="0" />
      <LineId Id="205" Count="5" />
      <LineId Id="228" Count="0" />
      <LineId Id="212" Count="5" />
      <LineId Id="229" Count="0" />
      <LineId Id="219" Count="4" />
      <LineId Id="183" Count="0" />
      <LineId Id="241" Count="83" />
      <LineId Id="240" Count="0" />
      <LineId Id="231" Count="0" />
      <LineId Id="160" Count="0" />
      <LineId Id="49" Count="0" />
      <LineId Id="135" Count="0" />
      <LineId Id="35" Count="0" />
      <LineId Id="33" Count="0" />
      <LineId Id="18" Count="0" />
    </LineIds>
    <LineIds Name="FB_CmdAndEventUpdate.M_ProcessCommand">
      <LineId Id="29" Count="0" />
      <LineId Id="31" Count="5" />
      <LineId Id="734" Count="0" />
      <LineId Id="192" Count="0" />
      <LineId Id="733" Count="0" />
      <LineId Id="193" Count="0" />
      <LineId Id="390" Count="1" />
      <LineId Id="37" Count="5" />
      <LineId Id="392" Count="0" />
      <LineId Id="43" Count="0" />
      <LineId Id="47" Count="0" />
      <LineId Id="112" Count="2" />
      <LineId Id="639" Count="1" />
      <LineId Id="638" Count="0" />
      <LineId Id="282" Count="0" />
      <LineId Id="315" Count="0" />
      <LineId Id="283" Count="1" />
      <LineId Id="319" Count="1" />
      <LineId Id="322" Count="0" />
      <LineId Id="321" Count="0" />
      <LineId Id="879" Count="3" />
      <LineId Id="1013" Count="0" />
      <LineId Id="1012" Count="0" />
      <LineId Id="1015" Count="1" />
      <LineId Id="1014" Count="0" />
      <LineId Id="1007" Count="0" />
      <LineId Id="1017" Count="0" />
      <LineId Id="1008" Count="0" />
      <LineId Id="1018" Count="0" />
      <LineId Id="1010" Count="0" />
      <LineId Id="1019" Count="0" />
      <LineId Id="1009" Count="0" />
      <LineId Id="48" Count="0" />
      <LineId Id="318" Count="0" />
      <LineId Id="49" Count="0" />
      <LineId Id="275" Count="1" />
      <LineId Id="65" Count="3" />
      <LineId Id="604" Count="0" />
      <LineId Id="890" Count="0" />
      <LineId Id="888" Count="1" />
      <LineId Id="605" Count="0" />
      <LineId Id="607" Count="1" />
      <LineId Id="606" Count="0" />
      <LineId Id="422" Count="0" />
      <LineId Id="453" Count="0" />
      <LineId Id="423" Count="0" />
      <LineId Id="454" Count="1" />
      <LineId Id="458" Count="0" />
      <LineId Id="352" Count="0" />
      <LineId Id="456" Count="0" />
      <LineId Id="542" Count="0" />
      <LineId Id="490" Count="0" />
      <LineId Id="503" Count="0" />
      <LineId Id="535" Count="0" />
      <LineId Id="493" Count="0" />
      <LineId Id="537" Count="0" />
      <LineId Id="540" Count="0" />
      <LineId Id="538" Count="0" />
      <LineId Id="541" Count="0" />
      <LineId Id="495" Count="0" />
      <LineId Id="457" Count="0" />
      <LineId Id="69" Count="0" />
      <LineId Id="884" Count="3" />
      <LineId Id="883" Count="0" />
      <LineId Id="774" Count="7" />
      <LineId Id="773" Count="0" />
      <LineId Id="70" Count="6" />
      <LineId Id="964" Count="0" />
      <LineId Id="966" Count="0" />
      <LineId Id="963" Count="0" />
      <LineId Id="970" Count="1" />
      <LineId Id="968" Count="1" />
      <LineId Id="967" Count="0" />
      <LineId Id="77" Count="1" />
      <LineId Id="190" Count="0" />
      <LineId Id="764" Count="0" />
      <LineId Id="767" Count="1" />
      <LineId Id="765" Count="0" />
      <LineId Id="769" Count="0" />
      <LineId Id="771" Count="1" />
      <LineId Id="770" Count="0" />
      <LineId Id="766" Count="0" />
      <LineId Id="874" Count="1" />
      <LineId Id="877" Count="1" />
      <LineId Id="876" Count="0" />
      <LineId Id="191" Count="0" />
      <LineId Id="641" Count="0" />
      <LineId Id="80" Count="0" />
      <LineId Id="144" Count="0" />
      <LineId Id="839" Count="0" />
      <LineId Id="842" Count="2" />
      <LineId Id="841" Count="0" />
      <LineId Id="81" Count="0" />
      <LineId Id="281" Count="0" />
      <LineId Id="224" Count="0" />
      <LineId Id="147" Count="1" />
      <LineId Id="280" Count="0" />
      <LineId Id="209" Count="0" />
      <LineId Id="812" Count="0" />
      <LineId Id="814" Count="7" />
      <LineId Id="813" Count="0" />
      <LineId Id="145" Count="0" />
      <LineId Id="116" Count="0" />
      <LineId Id="926" Count="3" />
      <LineId Id="921" Count="1" />
      <LineId Id="931" Count="2" />
      <LineId Id="930" Count="0" />
      <LineId Id="923" Count="0" />
      <LineId Id="353" Count="4" />
      <LineId Id="360" Count="0" />
      <LineId Id="207" Count="0" />
      <LineId Id="83" Count="1" />
      <LineId Id="229" Count="4" />
      <LineId Id="272" Count="0" />
      <LineId Id="250" Count="2" />
      <LineId Id="277" Count="2" />
      <LineId Id="256" Count="2" />
      <LineId Id="228" Count="0" />
      <LineId Id="163" Count="0" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="FB_CmdAndEventUpdate.M_ProcessMLCommand">
      <LineId Id="4057" Count="1" />
      <LineId Id="4056" Count="0" />
      <LineId Id="3143" Count="7" />
      <LineId Id="4013" Count="1" />
      <LineId Id="3151" Count="1" />
      <LineId Id="4015" Count="1" />
      <LineId Id="3153" Count="15" />
      <LineId Id="4017" Count="0" />
      <LineId Id="3169" Count="7" />
      <LineId Id="4019" Count="0" />
      <LineId Id="4018" Count="0" />
      <LineId Id="3177" Count="2" />
      <LineId Id="4701" Count="0" />
      <LineId Id="4020" Count="0" />
      <LineId Id="3180" Count="2" />
      <LineId Id="4700" Count="0" />
      <LineId Id="4021" Count="0" />
      <LineId Id="3590" Count="1" />
      <LineId Id="4217" Count="0" />
      <LineId Id="4699" Count="0" />
      <LineId Id="4053" Count="0" />
      <LineId Id="4059" Count="0" />
      <LineId Id="4460" Count="0" />
      <LineId Id="3188" Count="0" />
      <LineId Id="4445" Count="0" />
      <LineId Id="4458" Count="0" />
      <LineId Id="4435" Count="0" />
      <LineId Id="4567" Count="1" />
      <LineId Id="4437" Count="1" />
      <LineId Id="4562" Count="1" />
      <LineId Id="4432" Count="0" />
      <LineId Id="4564" Count="0" />
      <LineId Id="4433" Count="0" />
      <LineId Id="4565" Count="0" />
      <LineId Id="4569" Count="3" />
      <LineId Id="3199" Count="2" />
      <LineId Id="4060" Count="1" />
      <LineId Id="4065" Count="2" />
      <LineId Id="4114" Count="0" />
      <LineId Id="3673" Count="0" />
      <LineId Id="4062" Count="0" />
      <LineId Id="3833" Count="0" />
      <LineId Id="4063" Count="0" />
      <LineId Id="4108" Count="0" />
      <LineId Id="4290" Count="0" />
      <LineId Id="4613" Count="0" />
      <LineId Id="3204" Count="6" />
      <LineId Id="3212" Count="1" />
      <LineId Id="4115" Count="0" />
      <LineId Id="3214" Count="6" />
      <LineId Id="3222" Count="1" />
      <LineId Id="4614" Count="1" />
      <LineId Id="3226" Count="0" />
      <LineId Id="3228" Count="2" />
      <LineId Id="4702" Count="0" />
      <LineId Id="3231" Count="0" />
      <LineId Id="3234" Count="0" />
      <LineId Id="3239" Count="0" />
      <LineId Id="3243" Count="1" />
      <LineId Id="4703" Count="0" />
      <LineId Id="3245" Count="0" />
      <LineId Id="4704" Count="0" />
      <LineId Id="3247" Count="17" />
      <LineId Id="3273" Count="2" />
      <LineId Id="4117" Count="2" />
      <LineId Id="3731" Count="0" />
      <LineId Id="3276" Count="0" />
      <LineId Id="3878" Count="4" />
      <LineId Id="3877" Count="0" />
      <LineId Id="4712" Count="0" />
      <LineId Id="4714" Count="4" />
      <LineId Id="4713" Count="0" />
      <LineId Id="4173" Count="0" />
      <LineId Id="3277" Count="0" />
      <LineId Id="3279" Count="8" />
      <LineId Id="3290" Count="5" />
      <LineId Id="4812" Count="0" />
      <LineId Id="3297" Count="0" />
      <LineId Id="3299" Count="4" />
      <LineId Id="4340" Count="0" />
      <LineId Id="4342" Count="0" />
      <LineId Id="4344" Count="0" />
      <LineId Id="4336" Count="0" />
      <LineId Id="4959" Count="0" />
      <LineId Id="4961" Count="2" />
      <LineId Id="4960" Count="0" />
      <LineId Id="3313" Count="0" />
      <LineId Id="4345" Count="0" />
      <LineId Id="3316" Count="4" />
      <LineId Id="3324" Count="0" />
      <LineId Id="4735" Count="0" />
      <LineId Id="3325" Count="5" />
      <LineId Id="4120" Count="0" />
      <LineId Id="3631" Count="4" />
      <LineId Id="3630" Count="0" />
      <LineId Id="4121" Count="0" />
      <LineId Id="3331" Count="1" />
      <LineId Id="4122" Count="0" />
      <LineId Id="3337" Count="0" />
      <LineId Id="3339" Count="5" />
      <LineId Id="3346" Count="0" />
      <LineId Id="3348" Count="0" />
      <LineId Id="3351" Count="0" />
      <LineId Id="4125" Count="0" />
      <LineId Id="3352" Count="0" />
      <LineId Id="4123" Count="0" />
      <LineId Id="3353" Count="0" />
      <LineId Id="4124" Count="0" />
      <LineId Id="3355" Count="7" />
      <LineId Id="4131" Count="0" />
      <LineId Id="3363" Count="5" />
      <LineId Id="4132" Count="0" />
      <LineId Id="3369" Count="0" />
      <LineId Id="4133" Count="2" />
      <LineId Id="3370" Count="1" />
      <LineId Id="3769" Count="0" />
      <LineId Id="4136" Count="3" />
      <LineId Id="3396" Count="0" />
      <LineId Id="4141" Count="0" />
      <LineId Id="3397" Count="1" />
      <LineId Id="4126" Count="3" />
      <LineId Id="3403" Count="3" />
      <LineId Id="4145" Count="3" />
      <LineId Id="4142" Count="0" />
      <LineId Id="3407" Count="1" />
      <LineId Id="4149" Count="3" />
      <LineId Id="4143" Count="0" />
      <LineId Id="3409" Count="2" />
      <LineId Id="4153" Count="3" />
      <LineId Id="3412" Count="1" />
      <LineId Id="4157" Count="3" />
      <LineId Id="3414" Count="5" />
      <LineId Id="4144" Count="0" />
      <LineId Id="3420" Count="0" />
      <LineId Id="3871" Count="1" />
      <LineId Id="3874" Count="2" />
      <LineId Id="3873" Count="0" />
      <LineId Id="4719" Count="0" />
      <LineId Id="4721" Count="4" />
      <LineId Id="4720" Count="0" />
      <LineId Id="4161" Count="0" />
      <LineId Id="3421" Count="23" />
      <LineId Id="3446" Count="2" />
      <LineId Id="5007" Count="0" />
      <LineId Id="3449" Count="2" />
      <LineId Id="4501" Count="0" />
      <LineId Id="4915" Count="0" />
      <LineId Id="4909" Count="5" />
      <LineId Id="4908" Count="0" />
      <LineId Id="4907" Count="0" />
      <LineId Id="4502" Count="0" />
      <LineId Id="4656" Count="0" />
      <LineId Id="4503" Count="0" />
      <LineId Id="4507" Count="1" />
      <LineId Id="5049" Count="0" />
      <LineId Id="4906" Count="0" />
      <LineId Id="3452" Count="5" />
      <LineId Id="4917" Count="0" />
      <LineId Id="4881" Count="5" />
      <LineId Id="4880" Count="0" />
      <LineId Id="4887" Count="0" />
      <LineId Id="3458" Count="5" />
      <LineId Id="3470" Count="0" />
      <LineId Id="4888" Count="0" />
      <LineId Id="4916" Count="0" />
      <LineId Id="4890" Count="5" />
      <LineId Id="4889" Count="0" />
      <LineId Id="4510" Count="0" />
      <LineId Id="4512" Count="0" />
      <LineId Id="4657" Count="0" />
      <LineId Id="4513" Count="2" />
      <LineId Id="3472" Count="0" />
      <LineId Id="4734" Count="0" />
      <LineId Id="3473" Count="4" />
      <LineId Id="5006" Count="0" />
      <LineId Id="3485" Count="0" />
      <LineId Id="3489" Count="1" />
      <LineId Id="4918" Count="0" />
      <LineId Id="4900" Count="5" />
      <LineId Id="4898" Count="1" />
      <LineId Id="4518" Count="0" />
      <LineId Id="4658" Count="0" />
      <LineId Id="4519" Count="2" />
      <LineId Id="4516" Count="1" />
      <LineId Id="3491" Count="0" />
      <LineId Id="3493" Count="0" />
      <LineId Id="4710" Count="0" />
      <LineId Id="3495" Count="1" />
      <LineId Id="4711" Count="0" />
      <LineId Id="3497" Count="3" />
      <LineId Id="3502" Count="3" />
      <LineId Id="4162" Count="0" />
      <LineId Id="3506" Count="0" />
      <LineId Id="3508" Count="0" />
      <LineId Id="3510" Count="7" />
      <LineId Id="4166" Count="2" />
      <LineId Id="3522" Count="4" />
      <LineId Id="4163" Count="1" />
      <LineId Id="3529" Count="0" />
      <LineId Id="3533" Count="0" />
      <LineId Id="4965" Count="0" />
      <LineId Id="4801" Count="0" />
      <LineId Id="4807" Count="0" />
      <LineId Id="4805" Count="0" />
      <LineId Id="4808" Count="0" />
      <LineId Id="4810" Count="0" />
      <LineId Id="4809" Count="0" />
      <LineId Id="4813" Count="0" />
      <LineId Id="4802" Count="0" />
      <LineId Id="4815" Count="3" />
      <LineId Id="4814" Count="0" />
      <LineId Id="4824" Count="0" />
      <LineId Id="4729" Count="2" />
      <LineId Id="4727" Count="0" />
      <LineId Id="4753" Count="0" />
      <LineId Id="5090" Count="0" />
      <LineId Id="5093" Count="0" />
      <LineId Id="5097" Count="0" />
      <LineId Id="5095" Count="1" />
      <LineId Id="5098" Count="0" />
      <LineId Id="5094" Count="0" />
      <LineId Id="4754" Count="0" />
      <LineId Id="4756" Count="2" />
      <LineId Id="4739" Count="0" />
      <LineId Id="3535" Count="7" />
      <LineId Id="4169" Count="3" />
      <LineId Id="3543" Count="9" />
      <LineId Id="796" Count="0" />
    </LineIds>
    <LineIds Name="FB_CmdAndEventUpdate.M_SetBlinkRate">
      <LineId Id="179" Count="0" />
      <LineId Id="177" Count="1" />
      <LineId Id="173" Count="0" />
      <LineId Id="184" Count="0" />
      <LineId Id="14" Count="3" />
      <LineId Id="112" Count="0" />
      <LineId Id="284" Count="0" />
      <LineId Id="253" Count="0" />
      <LineId Id="18" Count="1" />
      <LineId Id="333" Count="1" />
      <LineId Id="20" Count="5" />
      <LineId Id="121" Count="0" />
      <LineId Id="374" Count="0" />
      <LineId Id="126" Count="1" />
      <LineId Id="131" Count="1" />
      <LineId Id="129" Count="0" />
      <LineId Id="133" Count="0" />
      <LineId Id="135" Count="0" />
      <LineId Id="130" Count="0" />
      <LineId Id="136" Count="1" />
      <LineId Id="372" Count="0" />
      <LineId Id="375" Count="1" />
      <LineId Id="128" Count="0" />
      <LineId Id="118" Count="0" />
      <LineId Id="377" Count="0" />
      <LineId Id="33" Count="0" />
      <LineId Id="46" Count="0" />
      <LineId Id="171" Count="0" />
      <LineId Id="170" Count="0" />
      <LineId Id="63" Count="1" />
      <LineId Id="335" Count="3" />
      <LineId Id="378" Count="0" />
      <LineId Id="339" Count="0" />
      <LineId Id="65" Count="8" />
      <LineId Id="5" Count="0" />
      <LineId Id="82" Count="0" />
      <LineId Id="81" Count="0" />
    </LineIds>
    <LineIds Name="FB_CmdAndEventUpdate.M_SetLogfileVerbosity">
      <LineId Id="31" Count="3" />
      <LineId Id="405" Count="0" />
      <LineId Id="35" Count="0" />
      <LineId Id="635" Count="0" />
      <LineId Id="809" Count="0" />
      <LineId Id="791" Count="0" />
      <LineId Id="940" Count="1" />
      <LineId Id="850" Count="1" />
      <LineId Id="844" Count="0" />
      <LineId Id="843" Count="0" />
      <LineId Id="845" Count="0" />
      <LineId Id="848" Count="1" />
      <LineId Id="846" Count="0" />
      <LineId Id="232" Count="1" />
      <LineId Id="746" Count="0" />
      <LineId Id="750" Count="5" />
      <LineId Id="748" Count="0" />
      <LineId Id="257" Count="0" />
      <LineId Id="163" Count="0" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="FB_CmdAndEventUpdate.M_TACmdUpdate">
      <LineId Id="327" Count="1" />
      <LineId Id="325" Count="0" />
      <LineId Id="329" Count="0" />
      <LineId Id="38" Count="0" />
      <LineId Id="40" Count="0" />
      <LineId Id="322" Count="2" />
      <LineId Id="330" Count="0" />
      <LineId Id="321" Count="0" />
      <LineId Id="43" Count="0" />
      <LineId Id="45" Count="0" />
      <LineId Id="47" Count="1" />
      <LineId Id="46" Count="0" />
      <LineId Id="331" Count="1" />
      <LineId Id="49" Count="0" />
      <LineId Id="51" Count="0" />
      <LineId Id="53" Count="2" />
      <LineId Id="57" Count="3" />
      <LineId Id="62" Count="4" />
      <LineId Id="68" Count="3" />
      <LineId Id="73" Count="0" />
      <LineId Id="368" Count="0" />
      <LineId Id="74" Count="0" />
      <LineId Id="281" Count="0" />
      <LineId Id="287" Count="0" />
      <LineId Id="291" Count="0" />
      <LineId Id="288" Count="2" />
      <LineId Id="282" Count="1" />
      <LineId Id="75" Count="1" />
      <LineId Id="335" Count="1" />
      <LineId Id="50" Count="0" />
      <LineId Id="79" Count="0" />
      <LineId Id="100" Count="0" />
      <LineId Id="369" Count="1" />
      <LineId Id="44" Count="0" />
      <LineId Id="81" Count="1" />
      <LineId Id="84" Count="1" />
      <LineId Id="209" Count="0" />
      <LineId Id="86" Count="0" />
      <LineId Id="222" Count="0" />
      <LineId Id="229" Count="0" />
      <LineId Id="242" Count="0" />
      <LineId Id="337" Count="0" />
      <LineId Id="373" Count="2" />
      <LineId Id="392" Count="0" />
      <LineId Id="338" Count="0" />
      <LineId Id="262" Count="0" />
      <LineId Id="339" Count="0" />
      <LineId Id="376" Count="2" />
      <LineId Id="393" Count="0" />
      <LineId Id="340" Count="0" />
      <LineId Id="231" Count="0" />
      <LineId Id="341" Count="0" />
      <LineId Id="344" Count="2" />
      <LineId Id="394" Count="0" />
      <LineId Id="247" Count="0" />
      <LineId Id="245" Count="0" />
      <LineId Id="342" Count="1" />
      <LineId Id="347" Count="1" />
      <LineId Id="395" Count="0" />
      <LineId Id="233" Count="0" />
      <LineId Id="313" Count="0" />
      <LineId Id="386" Count="2" />
      <LineId Id="385" Count="0" />
      <LineId Id="172" Count="0" />
      <LineId Id="349" Count="5" />
      <LineId Id="390" Count="0" />
      <LineId Id="132" Count="0" />
      <LineId Id="174" Count="0" />
      <LineId Id="186" Count="0" />
      <LineId Id="355" Count="5" />
      <LineId Id="391" Count="0" />
      <LineId Id="248" Count="0" />
      <LineId Id="389" Count="0" />
      <LineId Id="114" Count="0" />
      <LineId Id="99" Count="0" />
      <LineId Id="42" Count="0" />
      <LineId Id="361" Count="0" />
      <LineId Id="113" Count="0" />
      <LineId Id="371" Count="1" />
      <LineId Id="112" Count="0" />
      <LineId Id="228" Count="0" />
      <LineId Id="39" Count="0" />
      <LineId Id="7" Count="0" />
    </LineIds>
    <LineIds Name="FB_CmdAndEventUpdate.M_TAEventUpdate">
      <LineId Id="77" Count="1" />
      <LineId Id="38" Count="0" />
      <LineId Id="40" Count="0" />
      <LineId Id="43" Count="0" />
      <LineId Id="45" Count="0" />
      <LineId Id="47" Count="1" />
      <LineId Id="46" Count="0" />
      <LineId Id="49" Count="0" />
      <LineId Id="102" Count="0" />
      <LineId Id="104" Count="3" />
      <LineId Id="210" Count="1" />
      <LineId Id="277" Count="9" />
      <LineId Id="216" Count="9" />
      <LineId Id="116" Count="5" />
      <LineId Id="259" Count="6" />
      <LineId Id="257" Count="1" />
      <LineId Id="200" Count="0" />
      <LineId Id="122" Count="21" />
      <LineId Id="199" Count="0" />
      <LineId Id="144" Count="4" />
      <LineId Id="204" Count="5" />
      <LineId Id="153" Count="15" />
      <LineId Id="238" Count="0" />
      <LineId Id="237" Count="0" />
      <LineId Id="241" Count="3" />
      <LineId Id="240" Count="0" />
      <LineId Id="239" Count="0" />
      <LineId Id="245" Count="0" />
      <LineId Id="198" Count="0" />
      <LineId Id="169" Count="2" />
      <LineId Id="50" Count="0" />
      <LineId Id="79" Count="0" />
      <LineId Id="100" Count="0" />
      <LineId Id="172" Count="1" />
      <LineId Id="99" Count="0" />
      <LineId Id="42" Count="0" />
      <LineId Id="41" Count="0" />
      <LineId Id="39" Count="0" />
      <LineId Id="7" Count="0" />
    </LineIds>
    <LineIds Name="FB_CmdAndEventUpdate.M_TCCSessionRequest">
      <LineId Id="5" Count="5" />
      <LineId Id="14" Count="0" />
      <LineId Id="16" Count="5" />
      <LineId Id="84" Count="0" />
      <LineId Id="182" Count="0" />
      <LineId Id="23" Count="3" />
      <LineId Id="113" Count="0" />
      <LineId Id="111" Count="1" />
      <LineId Id="117" Count="0" />
      <LineId Id="208" Count="0" />
      <LineId Id="118" Count="1" />
      <LineId Id="83" Count="0" />
      <LineId Id="116" Count="0" />
      <LineId Id="29" Count="1" />
      <LineId Id="114" Count="0" />
      <LineId Id="31" Count="0" />
      <LineId Id="36" Count="0" />
      <LineId Id="180" Count="0" />
      <LineId Id="150" Count="0" />
      <LineId Id="181" Count="0" />
      <LineId Id="115" Count="0" />
      <LineId Id="37" Count="4" />
      <LineId Id="46" Count="0" />
      <LineId Id="48" Count="9" />
      <LineId Id="15" Count="0" />
    </LineIds>
    <LineIds Name="FB_CmdAndEventUpdate.M_ValidateRecipe">
      <LineId Id="6" Count="18" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="FB_CmdAndEventUpdate.TCUSafeState">
      <LineId Id="31" Count="5" />
      <LineId Id="120" Count="1" />
      <LineId Id="37" Count="9" />
      <LineId Id="71" Count="0" />
      <LineId Id="122" Count="3" />
      <LineId Id="73" Count="3" />
      <LineId Id="81" Count="0" />
      <LineId Id="131" Count="0" />
      <LineId Id="83" Count="0" />
      <LineId Id="127" Count="0" />
      <LineId Id="126" Count="0" />
      <LineId Id="128" Count="2" />
      <LineId Id="84" Count="7" />
      <LineId Id="5" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>