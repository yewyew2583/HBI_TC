<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4022.18">
  <POU Name="FB_DoorOpenClose" Id="{cc9007dd-01c7-4c39-b58e-94433c500190}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK FB_DoorOpenClose
VAR_INPUT
	_n									: INT; // array number of which 10 commands to be processed
	_bLock								: BOOL; // 0: Execute unlock command, 1: Execute lock command
	_bFrontDoor							: BOOL;
END_VAR

VAR_OUTPUT
END_VAR

VAR_IN_OUT
END_VAR

VAR
	bErr								: BOOL; // var for error flag
	start								: BOOL;
	_isFrontDoor						: BOOL;
	_bDoorRecoveryStart					: BOOL;
	_DoorOpen_Permissive				: BOOL;
	
	iStep								: INT	:= 1;
	_iLevel								: INT;

	iSendEvent							: UINT	:= 1;
	
	sStatus								: STRING; // var for error message
	sLogName							: STRING;
	sFailReason							: STRING;
	sModuleID							: STRING;
	_eFailLogName						: STRING;
	_ePassLogName						: STRING;
	
	tim									: TON;
	timDwrUp							: TON;
	timDoorRecStartDel					: TON;
	
	rtStart								: R_TRIG;
	
	EmptyEvents							: ST_Event;
	CmdEmpty							: ST_Command;
	requestedState						: E_State	:= E_State.eEnabled;
	eEventName							: E_EventName;
	_eFailEvent							: E_EventName;
	_ePassEvent							: E_EventName;
	stMultiLevelVIO						: ST_TCMultiLevel_VIO;
	_arrRCMD							: ARRAY [1..NO_OF_CMD_BUFFER] OF ST_Command;
	_arrEvent							: ARRAY [1..NO_OF_EVENT_BUFFER] OF ST_Event;
	//fbCmdAndEventUpdate: FB_CmdAndEventUpdate;
	_sanityCheck						: INT;
END_VAR



]]></Declaration>
    <Implementation>
      <ST><![CDATA[rtStart(CLK := start , Q=> );
IF rtStart.Q THEN
	iStep																			:= 1;
END_IF

IF (NOT start) THEN
	RETURN;
END_IF


///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//	State machine
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

CASE iStep OF
	0: (*Idle*)
		;
		
	1: (*Reset*)
	
		(*Action*)
		tim(IN := FALSE);
		timDwrUp(IN := FALSE);
		iStep																		:= 2; // Sanity Check
	
	2:	
		(*Action*)
		sStatus																		:= '';
		bErr																		:= FALSE;
		stMultiLevelVIO 															:= arrTCMultiLevel[_iLevel].fbTCMultiLevelSeq.P_stTCMultiLevelVIO;

		
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//	Door Unlock
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		IF (NOT _bLock) THEN
//Front Door
			IF _bFrontDoor THEN
				(*Sanity Check*)
				_sanityCheck		:= arrTCMultiLevel[_iLevel].fbTCMultiLevelSeq.M_IsSanityCheckFailed(stMultiLevelVIO:= stMultiLevelVIO, sMsg=> sStatus);
				IF  _sanityCheck <> 0 THEN
					bErr												:= TRUE;
					ALMTC.Level[_iLevel].AlarmID[_sanityCheck]			:= TRUE;
					iStep												:= 20;
				END_IF
				
				IF ALMTC.Level[_iLevel].AlarmID[E_AlarmID.APIsNotInUPPosition] THEN
					bErr												:= TRUE;
					sStatus												:= 'AP is not Deactuated (UP)';
					iStep												:= 20;
				ELSIF ALMTC.Level[_iLevel].AlarmID[E_TIIAlarm.ipAPReady] THEN
					bErr												:= TRUE;
					sStatus												:= 'AP is not Ready';
					iStep												:= 20;
				END_IF
				
				IF (NOT bErr) THEN
					arrTCMultiLevel[_iLevel].stGblParam.bDrawerUpBefFrtDoorOpen		:= TRUE;
					arrTCMultiLevel[_iLevel].fbTCMultiLevelSeq.P_stParam 			:= arrTCMultiLevel[_iLevel].stGblParam;
					iStep															:= 4; // Trigger door output
				END_IF
//Back Door
			ELSE
				IF (NOT bErr) THEN
					
					stMultiLevelVIO.opCellDoorClosed 								:= _bLock;
					arrTCMultiLevel[_iLevel].fbTCMultiLevelSeq.P_stTCMultiLevelVIO 	:= stMultiLevelVIO;
					iStep															:= 20; // Set event
					//END_IF
				END_IF
			END_IF
		
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//	Door Lock
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		ELSE
//FRONT DOOR
			IF _bFrontDoor THEN
				
				// Make sure front door is closed
				IF (NOT stMultiLevelVIO.ipTCCellTbotSideDoorOpenCloseStatus01) OR (NOT stMultiLevelVIO.ipTCCellTbotSideDoorOpenCloseStatus02) THEN
					bErr															:= TRUE;
					sStatus															:= 'Front Door is not Closed';
					iStep															:= 20; // Set event
				END_IF
				
				IF (NOT bErr) THEN
					//Lock the Door (on the actual output)
					stMultiLevelVIO 												:= arrTCMultiLevel[_iLevel].fbTCMultiLevelSeq.P_stTCMultiLevelVIO;
					stMultiLevelVIO.opCellTBOtSideDoorClosed1 						:= _bLock;
					stMultiLevelVIO.opCellTBOtSideDoorClosed2 						:= _bLock;
					arrTCMultiLevel[_iLevel].fbTCMultiLevelSeq.P_stTCMultiLevelVIO 	:= stMultiLevelVIO;
					tim(IN:=TRUE,PT:=T#1000MS);
					
					IF tim.Q THEN
						stMultiLevelVIO 											:= arrTCMultiLevel[_iLevel].fbTCMultiLevelSeq.P_stTCMultiLevelVIO;
						
						IF NOT (stMultiLevelVIO.ipTCCellTbotSideDoorLocked01 AND stMultiLevelVIO.ipTCCellTbotSideDoorLocked02) THEN
							bErr													:= TRUE;
							sStatus													:= 'Door Lock Error, Front Door Lock Status not Detected After Door Lock Activated';
							iStep													:= 20; // Set event
						ELSE
							arrTCMultiLevel[_iLevel].stGblParam.bDoorClose			:= SEL(_bLock,FALSE,TRUE);
							arrTCMultiLevel[_iLevel].fbTCMultiLevelSeq.P_stParam 	:= arrTCMultiLevel[_iLevel].stGblParam;
								//timDoorRecStartDel(IN:=FALSE);
								_bDoorRecoveryStart 								:= TRUE;
								iStep												:= 3; // Spare
								bErr												:= FALSE;
						END_IF	
						
						tim(IN:= FALSE);
					END_IF
				END_IF
			
//BACK DOOR
			ELSE 
				// Make sure back door is closed
				IF (NOT stMultiLevelVIO.ipTCCellDoorOpenCloseStatus) THEN
					bErr															:= TRUE;
					IF bDebugCart THEN 
						sStatus														:= 'Cell Door is not Closed (Back)';
					ELSE
						sStatus														:= 'Cell Door is not Closed !!';
					END_IF
					iStep															:= 20; // Set event
				END_IF
				
				IF (NOT bErr) THEN 
					stMultiLevelVIO.opCellDoorClosed 								:= _bLock;
					arrTCMultiLevel[_iLevel].fbTCMultiLevelSeq.P_stTCMultiLevelVIO 	:= stMultiLevelVIO;
					tim(IN:= TRUE, PT:= T#1000MS);
					
					IF tim.Q THEN
						stMultiLevelVIO 											:= arrTCMultiLevel[_iLevel].fbTCMultiLevelSeq.P_stTCMultiLevelVIO;
						
						IF (NOT stMultiLevelVIO.ipTCCellDoorClosed) THEN
							bErr																:= TRUE;
							sStatus																:= 'Door Lock Error, Door LockStatus not ON After Door Lock';
							iStep																:= 20; // Set event
						ELSE
							arrTCMultiLevel[_iLevel].stGblParam.bDoorClose			:= SEL(_bLock,FALSE,TRUE);
							arrTCMultiLevel[_iLevel].fbTCMultiLevelSeq.P_stParam 	:= arrTCMultiLevel[_iLevel].stGblParam;
							
							IF _bLock THEN
								_bDoorRecoveryStart 								:= TRUE;
								iStep												:= 3; // Spare
								bErr												:= FALSE;	
								
							END_IF
						END_IF	
						tim(IN:= FALSE);
					END_IF
				END_IF
			END_IF	
		END_IF
		
	3: (*Spare*)
		
		(*Transition*)
		iStep																		:= 20;
		
		
	4: (*Trigger front door output only*)
	
		(*Action*)
		timDwrUp(IN:= TRUE, PT:= T#7S);
		
		(*Transition*)
		IF timDwrUp.Q (*OR (NOT arrTCMultiLevel[_iLevel].stGblParam.bDrawerUpBefFrtDoorOpen)*) THEN
			stMultiLevelVIO 													:= arrTCMultiLevel[_iLevel].fbTCMultiLevelSeq.P_stTCMultiLevelVIO;
			stMultiLevelVIO.opCellTBOtSideDoorClosed1							:= FALSE;
			stMultiLevelVIO.opCellTBOtSideDoorClosed2							:= FALSE;
			arrTCMultiLevel[_iLevel].fbTCMultiLevelSeq.P_stTCMultiLevelVIO		:= stMultiLevelVIO;
			
			timDwrUp(IN:= FALSE);
			iStep																	:= 20; // Set event
			
		END_IF
		
	20: (*Set event*)

		(*Action*)
		IF bErr THEN
			eEventName																:= _eFailEvent;
			sLogName																:= _eFailLogName;
		ELSE
			eEventName																:= _ePassEvent;
			sLogName																:= _ePassLogName;
		END_IF
		
		sFailReason																	:= sStatus;
		
		CmdAndEventProcess.fbCmdAndEventUpdate.M_AddEvent(
			sLogName																:= sLogName, 
			eEventName																:= eEventName, 
			eModuleID																:= _arrRCMD[_n].eModuleID, 
			iParam																	:= _arrRCMD[_n].iParam,
			sParam																	:= _arrRCMD[_n].sParam, 
			bParam																	:= _arrRCMD[_n].bParam, 
			dParam																	:= _arrRCMD[_n].dParam,
			sFailReason																:= sFailReason);
		
		start																		:= FALSE;
		IF _bDoorRecoveryStart THEN
			arrTCMultiLevel[_iLevel].stGblParam.bDoorRecoveryStarted				:= TRUE;
			arrTCMultiLevel[_iLevel].stGblParam.stDoorRecovEvnt.sLogName			:= 'DoorRecoveryStarted';
			arrTCMultiLevel[_iLevel].stGblParam.stDoorRecovEvnt.eEventName			:= E_EventName.DoorRecoveryStarted;
			arrTCMultiLevel[_iLevel].stGblParam.stDoorRecovEvnt.eModuleID			:= _arrRCMD[_n].eModuleID;
			arrTCMultiLevel[_iLevel].fbTCMultiLevelSeq.P_stParam					:= arrTCMultiLevel[_iLevel].stGblParam;
			timDoorRecStartDel(IN:= FALSE);
			_bDoorRecoveryStart														:= FALSE;
		END_IF
		
		(*Transition*)
		iStep																		:= 0; // Idle
END_CASE]]></ST>
    </Implementation>
    <Method Name="Execute" Id="{ca3b77b5-2a99-4c78-99c2-1d04539e022e}">
      <Declaration><![CDATA[METHOD Execute : BOOL
VAR_INPUT
	n											: INT;
	iLevel										: INT;
	bLock										: BOOL;
	bFrontDoor									: BOOL;
	eFailEvent									: E_EventName;
	ePassEvent									: E_EventName;
	eFailLogName								: STRING;
	ePassLogName								: STRING;
END_VAR

VAR_IN_OUT
	arrRCMD										: ARRAY [1..NO_OF_CMD_BUFFER] OF ST_Command;
	arrEvent									: ARRAY [1..NO_OF_EVENT_BUFFER] OF ST_Event;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[start												:= TRUE;
_arrRCMD											:= arrRCMD;
_arrEvent											:= arrEvent;
_ilevel												:= SEL(ilevel>100, ilevel, ilevel-100);
_bFrontDoor											:= SEL(ilevel>100, FALSE, TRUE);
_bLock												:= bLock;
_bFrontDoor											:= bFrontDoor;
_n													:= n;
_eFailEvent											:= eFailEvent ;
_ePassEvent											:= ePassEvent;
_eFailLogName										:= eFailLogName;
_ePassLogName										:= ePassLogName;



]]></ST>
      </Implementation>
    </Method>
    <Method Name="Reset" Id="{556c6df1-3e10-4114-8292-b48bc44863e3}">
      <Declaration><![CDATA[METHOD Reset : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[start:=false;]]></ST>
      </Implementation>
    </Method>
    <LineIds Name="FB_DoorOpenClose">
      <LineId Id="1220" Count="3" />
      <LineId Id="1868" Count="0" />
      <LineId Id="1224" Count="1" />
      <LineId Id="2001" Count="0" />
      <LineId Id="1990" Count="3" />
      <LineId Id="1227" Count="0" />
      <LineId Id="1994" Count="0" />
      <LineId Id="1228" Count="0" />
      <LineId Id="1922" Count="2" />
      <LineId Id="1229" Count="0" />
      <LineId Id="1869" Count="1" />
      <LineId Id="1230" Count="0" />
      <LineId Id="1872" Count="0" />
      <LineId Id="1238" Count="1" />
      <LineId Id="2379" Count="3" />
      <LineId Id="1512" Count="0" />
      <LineId Id="2365" Count="0" />
      <LineId Id="1876" Count="0" />
      <LineId Id="2496" Count="2" />
      <LineId Id="2503" Count="0" />
      <LineId Id="2505" Count="0" />
      <LineId Id="2452" Count="0" />
      <LineId Id="2390" Count="1" />
      <LineId Id="2393" Count="1" />
      <LineId Id="2396" Count="1" />
      <LineId Id="2507" Count="1" />
      <LineId Id="2510" Count="1" />
      <LineId Id="2517" Count="0" />
      <LineId Id="2519" Count="0" />
      <LineId Id="2516" Count="0" />
      <LineId Id="2518" Count="0" />
      <LineId Id="2514" Count="0" />
      <LineId Id="2520" Count="0" />
      <LineId Id="2512" Count="0" />
      <LineId Id="1885" Count="0" />
      <LineId Id="1252" Count="0" />
      <LineId Id="1254" Count="2" />
      <LineId Id="1259" Count="0" />
      <LineId Id="2495" Count="0" />
      <LineId Id="1888" Count="0" />
      <LineId Id="1265" Count="0" />
      <LineId Id="2488" Count="0" />
      <LineId Id="1266" Count="3" />
      <LineId Id="1673" Count="0" />
      <LineId Id="1270" Count="1" />
      <LineId Id="2499" Count="1" />
      <LineId Id="1878" Count="0" />
      <LineId Id="1274" Count="1" />
      <LineId Id="1538" Count="0" />
      <LineId Id="2487" Count="0" />
      <LineId Id="1744" Count="0" />
      <LineId Id="1734" Count="3" />
      <LineId Id="1733" Count="0" />
      <LineId Id="1539" Count="0" />
      <LineId Id="1527" Count="0" />
      <LineId Id="1541" Count="0" />
      <LineId Id="1277" Count="7" />
      <LineId Id="1908" Count="0" />
      <LineId Id="1285" Count="9" />
      <LineId Id="1542" Count="0" />
      <LineId Id="1296" Count="0" />
      <LineId Id="1909" Count="0" />
      <LineId Id="1297" Count="1" />
      <LineId Id="1540" Count="0" />
      <LineId Id="1299" Count="2" />
      <LineId Id="2111" Count="0" />
      <LineId Id="1677" Count="1" />
      <LineId Id="1794" Count="0" />
      <LineId Id="1679" Count="0" />
      <LineId Id="1795" Count="0" />
      <LineId Id="1793" Count="0" />
      <LineId Id="1796" Count="0" />
      <LineId Id="1680" Count="0" />
      <LineId Id="1676" Count="0" />
      <LineId Id="1910" Count="0" />
      <LineId Id="1681" Count="0" />
      <LineId Id="1302" Count="2" />
      <LineId Id="1911" Count="0" />
      <LineId Id="1305" Count="0" />
      <LineId Id="1651" Count="0" />
      <LineId Id="1662" Count="0" />
      <LineId Id="1307" Count="7" />
      <LineId Id="1318" Count="0" />
      <LineId Id="1326" Count="1" />
      <LineId Id="1543" Count="0" />
      <LineId Id="2490" Count="0" />
      <LineId Id="1328" Count="3" />
      <LineId Id="1684" Count="0" />
      <LineId Id="1332" Count="0" />
      <LineId Id="1334" Count="0" />
      <LineId Id="1397" Count="0" />
      <LineId Id="1404" Count="0" />
      <LineId Id="1912" Count="1" />
      <LineId Id="1405" Count="3" />
      <LineId Id="1915" Count="1" />
      <LineId Id="1409" Count="0" />
      <LineId Id="1883" Count="1" />
      <LineId Id="1410" Count="0" />
      <LineId Id="2595" Count="0" />
      <LineId Id="1412" Count="1" />
      <LineId Id="2597" Count="0" />
      <LineId Id="2596" Count="0" />
      <LineId Id="1415" Count="1" />
      <LineId Id="2491" Count="0" />
      <LineId Id="1417" Count="2" />
      <LineId Id="1914" Count="0" />
      <LineId Id="1420" Count="6" />
      <LineId Id="1439" Count="0" />
      <LineId Id="2492" Count="0" />
      <LineId Id="1674" Count="0" />
      <LineId Id="1917" Count="0" />
      <LineId Id="1440" Count="9" />
      <LineId Id="1451" Count="7" />
      <LineId Id="1460" Count="1" />
      <LineId Id="1920" Count="1" />
      <LineId Id="1463" Count="0" />
      <LineId Id="9" Count="0" />
    </LineIds>
    <LineIds Name="FB_DoorOpenClose.Execute">
      <LineId Id="15" Count="1" />
      <LineId Id="5" Count="0" />
      <LineId Id="27" Count="0" />
      <LineId Id="94" Count="0" />
      <LineId Id="28" Count="0" />
      <LineId Id="71" Count="0" />
      <LineId Id="39" Count="0" />
      <LineId Id="50" Count="3" />
      <LineId Id="91" Count="2" />
      <LineId Id="89" Count="0" />
    </LineIds>
    <LineIds Name="FB_DoorOpenClose.Reset">
      <LineId Id="5" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>