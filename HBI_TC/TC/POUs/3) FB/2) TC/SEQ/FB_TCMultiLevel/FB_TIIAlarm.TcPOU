<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4022.18">
  <POU Name="FB_TIIAlarm" Id="{0b288081-bd94-440a-8fe6-c5b6955eac6e}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK FB_TIIAlarm
VAR_INPUT
	vIO							: ST_TCMultiLevel_VIO;
	stTCColVIO					: ST_TCColumn_VIO;
	NoOfTIIAlm					: INT	:= NO_OF_TII_SENSOR;
	iLevel						: INT	:= 1;
END_VAR

VAR_OUTPUT
	isTIIError					: BOOL;
	TIIAlarmLED					: BOOL;
	TIIAlarmEPT					: BOOL;
	iUnBlock					: DINT;
	bAlarmBlockDrawerExtRtt		: BOOL;
	isAboveCellLeakage			: BOOL;
END_VAR

VAR
	DIFU						: R_TRIG;
	tim							: TON;
	delay						: FB_Delay;
	tPOn						: BOOL;	//testerPowerOutoutOn after Delay
	dPOn						: BOOL; //dpsPwrbit after Delay
	bitNo						: INT;
	almRset						: BOOL;
	
	ArrAlmBitBefDelay			: ARRAY[1..NO_OF_TII_SENSOR] OF BOOL;
	ArrAlmBitAftDelay			: ARRAY[1..NO_OF_TII_SENSOR] OF BOOL;
	ArrAlarmKeepBit				: ARRAY[1..NO_OF_TII_SENSOR] OF BOOL;
	ArrDelayAlarm				: ARRAY[1..NO_OF_TII_SENSOR] OF FB_AlarmDelay;
	Arr_ms						: ARRAY[1..NO_OF_TII_SENSOR] OF INT;
	bTIIByPassArray				: ARRAY[1..NO_OF_TII_SENSOR] OF BOOL;
	i							: INT;
	bTest						: BOOL;
	delayExtTimeOut				: FB_Delay;
	delayRetTimeOut				: FB_Delay;
	delayDrawerUpTimeOut		: FB_Delay;
	delayDrawerDownTimeOut		: FB_Delay;
	//iUnBlock:INT;
	alarmReset					: BOOL;  //1: reset timer when alarm reset, 0: do not reset timer
END_VAR

VAR_IN_OUT
	
	//bLibError : BOOL;
	//stAlmSubMod:ST_AlarmSubmodules;
	//stAlmMod:ST_AlarmModules;
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[//<HMI_TII_Test>

IF bHMITIIBypass THEN
	bTIIByPassArray							:= stHMITIIByPassArray[iLevel].bHMITIIByPassArray;
	//FOR i:=1 TO NoOfTIIAlm DO
	//	bTIIByPassArray[i]:= NOT stHMITIIByPassArray[iLevel].bHMITIIByPassArray[i];
	//END_FOR
ELSE
	FOR i := 1 TO NoOfTIIAlm DO
		//bTIIByPassArray[i]:=bEnableTIIAlarm;
		 bTIIByPassArray[i]					:= TC_ModuleState[iLevel].TCSite[1].TIERII = E_State.eEnabled;
	END_FOR
END_IF
//</HMI_TII_Test>
//IF bTest THEN
AlarmUpdate(bENs:= bTIIByPassArray);
//END_IF
 
 ]]></ST>
    </Implementation>
    <Method Name="AlarmUpdate" Id="{397002b7-185c-4e8e-b452-1b3a6b84eaa4}">
      <Declaration><![CDATA[METHOD AlarmUpdate : BOOL
VAR_INPUT
	bENs 					: ARRAY [1..NO_OF_TII_SENSOR] OF BOOL;
END_VAR

VAR_OUTPUT
END_VAR

VAR_IN_OUT
	//ArrAlarmKeepBit:ST_AlarmTags;
END_VAR

VAR
	_bError					: BOOL;
	bTstOnCmd 				: BOOL;
	bChkTstOn 				: BOOL;
	bAPOnCmd				: BOOL;
	bChkAPOn 				: BOOL;
	drawerExtendOutput		: BOOL; // Condition
	drawerRetractOutput		: BOOL; // Condition
	drawerUpOutput			: BOOL;
	drawerDownOutput		: BOOL;
	
	i						: INT;
	j						: INT;
	iSysAlarmID 			: INT;
	e						: E_TIIAlarm;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF iLevel = 0 THEN
	RETURN;
END_IF

//FB_M_nCyclic_tSensorTimeOut
DIFU(
	CLK 																:= vIO.ipTesterPowerOn);
	                                                					
tim(                                                					
	IN 																	:= TRUE,
	PT																	:= INT_TO_TIME(1000));
	                                                					
tPOn 																	:=	VIO.bTstDelInt; //Delay and TesterPwrOnOutput
                                                    					
delay(                                              					
	msec 																:= 100,
	in 																	:= tPOn, 
	out 																:= dPOn);
	                                                					
delayExtTimeOut(                                    	
	msec																:= TIME_TO_INT(tDwrCylExtRetTimeOut),
	in																	:= vIO.opCellDrawerCylExtend,
	out																	:= drawerExtendOutput);
	                                                					
delayRetTimeOut(                                    					
	msec																:= TIME_TO_INT(tDwrCylExtRetTimeOut),
	in																	:= vIO.opCellDrawerCylRetract,
	out																	:= drawerRetractOutput);
	

delayDrawerUpTimeOut(
	msec																:= TIME_TO_INT(tDwrCylUpDownTimeOut),
	in																	:= vIO.opCellDrawerCylUp,
	out																	:= drawerUpOutput);

delayDrawerDownTimeOut(
	msec																:= TIME_TO_INT(tDwrCylUpDownTimeOut),
	in																	:= vIO.opCellDrawerCylDown,
	out																	:= drawerDownOutput);
	

//lRt:= FALSE; //:=AP_Deactuated(if AP Down Can Retract)
//lEt:= FALSE;
bTstOnCmd																:= vIO.bDPSPowerOnOff;
bChkTstOn																:= vIO.bChkTesterOn;
bAPOnCmd																:= vIO.bAP240ACPowerOnOff;
bChkAPOn																:= vIO.bChkAP240On;


//Auto reset Door lock alarm
IF ALMTC.Level[iLevel].AlarmID[E_TIIAlarm.ipTCCellDoorClosed] AND vIO.ipTCCellDoorClosed THEN
	ALMTC.Level[iLevel].AlarmID[E_TIIAlarm.ipTCCellDoorClosed]			:= FALSE;
END_IF

//Auto reset Door lock alarm (Debugcart only)
IF bDebugCart THEN
	//auto clear alarm if door is closed 
	IF ALMTC.Level[iLevel].AlarmID[E_AlarmID.TBotSideDoorCloseSignalNotDetected] THEN
		IF VIO.ipTCCellTbotSideDoorOpenCloseStatus01 AND VIO.ipTCCellTbotSideDoorOpenCloseStatus02 THEN
			ALMTC.Level[iLevel].AlarmID[E_AlarmID.TBotSideDoorCloseSignalNotDetected]		:= FALSE;
		END_IF
	END_IF
	
	//auto clear alarm if door is locked
	IF ALMTC.Level[iLevel].AlarmID[E_TIIAlarm.FrontDoorLockSignalNotDetected] THEN
		IF VIO.ipTCCellTbotSideDoorLocked01 AND VIO.ipTCCellTbotSideDoorLocked02 THEN
			ALMTC.Level[iLevel].AlarmID[E_TIIAlarm.FrontDoorLockSignalNotDetected]		:= FALSE;
		END_IF
	END_IF
END_IF


FOR i := 1 TO NoOfTIIAlm DO	
	CASE i OF
		(*E_TIIAlarm.ipAPPresentSensor: 
			e															:= E_TIIAlarm.ipAPPresentSensor; 
			ArrAlmBitBefDelay[E_TIIAlarm.ipAPPresentSensor]				:= (NOT	vIO.ipAPPresentSensor) AND bENs[1];  		
			Arr_ms[e] 													:= 500;  (*TIIAlmText[e]:='AP_PresentSensor'*); //****stTCVIO.iAlarmCode=  E_Alarm.ipAP_PresentSensor 	 ;*)
			
        E_TIIAlarm.ipAPPowerOn: 
			e															:= E_TIIAlarm.ipAPPowerOn; 
			ArrAlmBitBefDelay[E_TIIAlarm.ipAPPowerOn]					:= (NOT vIO.ipAPPowerOn) AND VIO.ipAPPresentSensor AND GVL_DUT_TC_AP240ACPower.Failed AND bENs[2];
			Arr_ms[e] 													:= 500;  (*TIIAlmText[e]:='AP_PowerOn'*); 
			
	    E_TIIAlarm.ipAPReady: 
			e															:= E_TIIAlarm.ipAPReady; 
			ArrAlmBitBefDelay[E_TIIAlarm.ipAPReady]						:= (NOT vIO.ipAPReady) AND vIO.ipAPPresentSensor AND bENs[3]; 	
			Arr_ms[e] 													:= 500;  (*TIIAlmText[e]:='AP_Ready' 		    	*);      
			
	    (*E_TIIAlarm.ipAPDeactuatedPLC: 
			e															:= E_TIIAlarm.ipAPDeactuatedPLC; 
			ArrAlmBitBefDelay[E_TIIAlarm.ipAPDeactuatedPLC]				:= (NOT vIO.ipHandlerSafeToEnterPLC) AND vIO.ipAPPresentSensor AND bENs[4]; 			
			Arr_ms[e] 													:= 500;  (*TIIAlmText[e]:='AP_DeactuatedPLC'*); *)
  
	    (*E_TIIAlarm.ipAPDeactuatedHwr: 
			e															:= E_TIIAlarm.ipAPDeactuatedHwr; 
			ArrAlmBitBefDelay[E_TIIAlarm.ipAPDeactuatedHwr]				:= (NOT	vIO.ipHandlerSafeToEnterHwr) AND vIO.ipAPPresentSensor AND bENs[5]; 			
			Arr_ms[e] 													:= 500;  (*TIIAlmText[e]:='AP_DeactuatedHwr'*); *)
			
	    E_TIIAlarm.ipCellFluidLeakage1: 
			e															:= E_TIIAlarm.ipCellFluidLeakage1; 
			ArrAlmBitBefDelay[E_TIIAlarm.ipCellFluidLeakage1]			:= vIO.ipCellFluidLeakage1 (*AND bENs[6]*); 			
			Arr_ms[e] 													:= 500;  (*TIIAlmText[e]:='CellFluidLeakage1' 	*);   
			
	    E_TIIAlarm.ipCellFluidLeakage2: 
			e															:= E_TIIAlarm.ipCellFluidLeakage2; 
			ArrAlmBitBefDelay[E_TIIAlarm.ipCellFluidLeakage2]			:= vIO.ipCellFluidLeakage2 (*AND bENs[7]*) ; 			
			Arr_ms[e] 													:= 500;  (*TIIAlmText[e]:='CellFluidLeakage2'*);   
			
	    E_TIIAlarm.ipCellGroundFault: 
			e															:= E_TIIAlarm.ipCellGroundFault; 
			ArrAlmBitBefDelay[E_TIIAlarm.ipCellGroundFault]				:= vIO.ipCellGroundFault AND bENs[8]; 			
			Arr_ms[e] 													:= 500;  (*TIIAlmText[e]:='CellGroundFault'*);
			
        (*E_TIIAlarm.ipTesterPresent: 
			e															:= E_TIIAlarm.ipTesterPresent; 
			ArrAlmBitBefDelay[E_TIIAlarm.ipTesterPresent]				:= (NOT	vIO.ipTesterPresent) AND bENs[9]; 			
			Arr_ms[e] 													:= 500;  (*TIIAlmText[e]:='TesterPresent'*);*)
			
        E_TIIAlarm.ipTesterPowerOn: 
			e															:= E_TIIAlarm.ipTesterPowerOn; 
			ArrAlmBitBefDelay[E_TIIAlarm.ipTesterPowerOn]				:= (NOT	vIO.ipTesterPowerOn) AND vIO.ipTesterPresent AND bChkTstOn AND bENs[10]; 			
			Arr_ms[e] 													:= 500;  (*TIIAlmText[e]:='TesterPowerOn'*);
    
        (*E_TIIAlarm.ipTesterReady: 
			e															:= E_TIIAlarm.ipTesterReady; 
			ArrAlmBitBefDelay[E_TIIAlarm.ipTesterReady]					:= (NOT	vIO.ipTesterReady) AND vIO.ipTesterPresent AND bENs[11]; 	
			Arr_ms[e] 													:= 500;  (*TIIAlmText[e]:='TesterReady'*);*)
			   
       	E_TIIAlarm.ipTCCellDoorClosed: 
			stTCColVIO													:= fbTCColumn.P_stTCColumnVIO;
			e															:= E_TIIAlarm.ipTCCellDoorClosed; 
			ArrAlmBitBefDelay[E_TIIAlarm.ipTCCellDoorClosed]			:= (NOT	vIO.ipTCCellDoorClosed) AND stTCColVIO.ipTbotDoorClosedSignal; //AND bENs[12]; 							
			Arr_ms[e] 													:= 500;  (*TIIAlmText[e]:='TCCellDoorClosed' *);
			
        E_TIIAlarm.ipTesterLatchesClosed: 
			e															:= E_TIIAlarm.ipTesterLatchesClosed ; 
			ArrAlmBitBefDelay[E_TIIAlarm.ipTesterLatchesClosed]			:= (NOT	vIO.ipTesterLatchesClosed) AND (bTstOnCmd OR vIO.ipTesterPresent) AND bENs[13] ; 
			Arr_ms[e] 													:= 500;  (*TIIAlmText[e]:='TesterLatchesClosed'*);
			
        (*E_TIIAlarm.ipTIUPresent: 
			e															:= E_TIIAlarm.ipTIUPresent; 
			ArrAlmBitBefDelay[E_TIIAlarm.ipTIUPresent]					:= (NOT	vIO.ipTIUPresent) AND bENs[14]; 						
			Arr_ms[e] 													:= 500;  (*TIIAlmText[e]:='TIUPresent'*);*)
			
        E_TIIAlarm.TBOT_TC_ACPower_Signal: 
			e															:= E_TIIAlarm.TBOT_TC_ACPower_Signal; 
			ArrAlmBitBefDelay[E_TIIAlarm.TBOT_TC_ACPower_Signal]		:= (vIO.TBOT_TC_ACPower_Signal) AND (NOT bDebugCart) AND (NOT bDebugStation) AND bENs[14]; 
			Arr_ms[e] 													:= 500;  (*TIIAlmText[e]:='TCDrawerCylRetractRS'*);
			
		E_TIIAlarm.DS_Facility_EAP_ACPower_Signal: 
			e																:= E_TIIAlarm.DS_Facility_EAP_ACPower_Signal; 
			ArrAlmBitBefDelay[E_TIIAlarm.DS_Facility_EAP_ACPower_Signal]	:= bDebugCart AND DS_Facility_eapShutOffAllACPower AND bENs[15]; 							
			Arr_ms[e] 														:= 500;  (*TIIAlmText[e]:='DS_Facility_EAP_ACPower_Signal' *);
			
      	E_TIIAlarm.FrontDoorLockSignalNotDetected: 
			e																:= E_TIIAlarm.FrontDoorLockSignalNotDetected; 
			ArrAlmBitBefDelay[E_TIIAlarm.FrontDoorLockSignalNotDetected]	:= bDebugCart AND ((NOT vIO.ipTCCellTbotSideDoorLocked01) OR (NOT vIO.ipTCCellTbotSideDoorLocked02)); //AND bENs[16]; 							
			Arr_ms[e] 														:= 500;  (*TIIAlmText[e]:='ipTCCellTbotSideDoorLocked01' *);	
					
        E_TIIAlarm.ipTCDrawerExtendSignal: 
			e																:= E_TIIAlarm.ipTCDrawerExtendSignal; 
			ArrAlmBitBefDelay[E_TIIAlarm.ipTCDrawerExtendSignal]			:= (NOT	vIO.ipTCDrawerCylExtendRS) AND (*vIO.opTesterDrawerAirSupplySol AND	vIO.opCellDrawerCylExtend AND*) (NOT bDebugCart) AND drawerExtendOutput AND bENs[15]; 
			Arr_ms[e] 														:= 500;  (*TIIAlmText[e]:='TCDrawerCylExtendRS'*);
			
        E_TIIAlarm.ipTCDrawerRetractSignal: 
			e																:= E_TIIAlarm.ipTCDrawerRetractSignal; 
			ArrAlmBitBefDelay[E_TIIAlarm.ipTCDrawerRetractSignal]			:= (NOT	vIO.ipTCDrawerCylRetractRS) AND (*vIO.opTesterDrawerAirSupplySol AND vIO.opCellDrawerCylRetract AND*) drawerRetractOutput AND bENs[16]; 
			Arr_ms[e] 														:= 500;  (*TIIAlmText[e]:='TCDrawerCylRetractRS'*);	
		
		E_TIIAlarm.ipTCDrawerUpSignal:
			e																:= E_TIIAlarm.ipTCDrawerUpSignal;
			ArrAlmBitBefDelay[E_TIIAlarm.ipTCDrawerUpSignal]				:= (NOT	vIO.ipTCDrawerCylUpRS) AND drawerUpOutput AND bENs[16]; 
			Arr_ms[e] 														:= 500;  (*TIIAlmText[e]:='TCDrawerCylupRS'*);	
		
		E_TIIAlarm.ipTCDrawerDownSignal:
			e																:= E_TIIAlarm.ipTCDrawerUpSignal;
			ArrAlmBitBefDelay[E_TIIAlarm.ipTCDrawerDownSignal]				:= (NOT	vIO.ipTCDrawerCylDownRS) AND drawerDownOutput AND bENs[16]; 
			Arr_ms[e] 														:= 500;  (*TIIAlmText[e]:='TCDrawerCyldownRS'*);
			
	END_CASE

	//Delay Library Alm Bit
	ArrDelayAlarm[i](
		alarmState															:= ArrAlmBitBefDelay[i],
		alarmResetTimer														:= alarmReset,
		triggerAlarmState													=> ArrAlmBitAftDelay[i],
		msec																:= Arr_ms[i]);	//DelayAlmBit

	IF ArrAlmBitAftDelay[i] THEN //realtime IO update array
		//stAlmMod.Level[iLevel].AlarmID[i]:=TRUE;
		ALMTC.Level[iLevel].AlarmID[i]									:= TRUE;
		
		CASE i OF
			1 : 
				iUnBlock.1 												:= ALMTC.Level[iLevel].AlarmID[i];
		    2 : 
				iUnBlock.2 												:= ALMTC.Level[iLevel].AlarmID[i]; 
		    3 : 
				iUnBlock.3 												:= ALMTC.Level[iLevel].AlarmID[i];
			4 : 
				iUnBlock.4 												:= ALMTC.Level[iLevel].AlarmID[i];
			5 : 
				iUnBlock.5  											:= ALMTC.Level[iLevel].AlarmID[i];
			6 : 
				iUnBlock.6 												:= ALMTC.Level[iLevel].AlarmID[i];
			7 : 
				iUnBlock.7 												:= ALMTC.Level[iLevel].AlarmID[i];
			8 : 
				iUnBlock.8												:= ALMTC.Level[iLevel].AlarmID[i];
			9 : 
				iUnBlock.9												:= ALMTC.Level[iLevel].AlarmID[i];
			10: 
				iUnBlock.10												:= ALMTC.Level[iLevel].AlarmID[i];
			11: 
				iUnBlock.11												:= ALMTC.Level[iLevel].AlarmID[i];
			12: 
				iUnBlock.12												:= ALMTC.Level[iLevel].AlarmID[i];
			13: 
				iUnBlock.13												:= ALMTC.Level[iLevel].AlarmID[i];
			14: 
				iUnBlock.14												:= ALMTC.Level[iLevel].AlarmID[i];
			15: 
				iUnBlock.15												:= ALMTC.Level[iLevel].AlarmID[i];
			16: 
				iUnBlock.16												:= ALMTC.Level[iLevel].AlarmID[i];
			17: 
				iUnBlock.17												:= ALMTC.Level[iLevel].AlarmID[i];
		END_CASE
	ELSE
		CASE i OF
			1 : 
				iUnBlock.1 												:= ALMTC.Level[iLevel].AlarmID[i];
		    2 : 
				iUnBlock.2 												:= ALMTC.Level[iLevel].AlarmID[i]; 
		    3 :
				iUnBlock.3  											:= ALMTC.Level[iLevel].AlarmID[i];
			4 : 
				iUnBlock.4 												:= ALMTC.Level[iLevel].AlarmID[i];
			5 : 
				iUnBlock.5 												:= ALMTC.Level[iLevel].AlarmID[i];
			6 : 
				iUnBlock.6 												:= ALMTC.Level[iLevel].AlarmID[i];
			7 : 
				iUnBlock.7 												:= ALMTC.Level[iLevel].AlarmID[i];
			8 : 
				iUnBlock.8 												:= ALMTC.Level[iLevel].AlarmID[i];
			9 : 
				iUnBlock.9 												:= ALMTC.Level[iLevel].AlarmID[i];
			10: 
				iUnBlock.10 											:= ALMTC.Level[iLevel].AlarmID[i];
			11: 
				iUnBlock.11 											:= ALMTC.Level[iLevel].AlarmID[i];
			12: 
				iUnBlock.12 											:= ALMTC.Level[iLevel].AlarmID[i];
			13: 
				iUnBlock.13 											:= ALMTC.Level[iLevel].AlarmID[i];
			14: 
				iUnBlock.14 											:= ALMTC.Level[iLevel].AlarmID[i];
			15: 
				iUnBlock.15 											:= ALMTC.Level[iLevel].AlarmID[i];
			16: 
				iUnBlock.16 											:= ALMTC.Level[iLevel].AlarmID[i];
			17: 
				iUnBlock.17 											:= ALMTC.Level[iLevel].AlarmID[i];
		END_CASE
		//TIIAlmText[i]:='';  
	END_IF
		
	//_bError := _bError OR stAlmMod.Level[iLevel].AlarmID[i];
	isTIIError															:= ALMTC.Level[iLevel].AlarmID[i];
	
	(*
	IF NOT (ALMTC.Level[iLevel].AlarmID[i] = ALMTC.Level[iLevel].AlarmID[E_TIIAlarm.ipCellFluidLeakage1] OR 
	   ALMTC.Level[iLevel].AlarmID[i] = ALMTC.Level[iLevel].AlarmID[E_TIIAlarm.ipCellFluidLeakage2])
	THEN
	   IS_CELL_TII_LEAK := _bError OR (ALMTC.Level[iLevel].AlarmID[i] ;
	END_IF
	*) 
END_FOR
alarmReset			:= FALSE;	//false back and wait for next alarm reset to reset alarm timer.

isAboveCellLeakage		:= M_AboveLeakageChecking(currentLevel	:= iLevel);

bAlarmBlockDrawerExtRtt														:=	(NOT bDebugCart)															AND
																			(
																				ALMTC.Level[iLevel].AlarmID[E_TIIAlarm.ipTesterLatchesClosed    	]	OR //not need in DC
																				ALMTC.Level[iLevel].AlarmID[E_TIIAlarm.ipTCDrawerExtendSignal	   	]	OR //not need in DC
																				ALMTC.Level[iLevel].AlarmID[E_TIIAlarm.ipTCDrawerRetractSignal	   	]	OR //not need in DC
																				ALMTC.Level[iLevel].AlarmID[E_TIIAlarm.ipTCCellDoorClosed	   		]   OR //not need in DC
																				ALMTC.Common.AlarmID[E_ColAlarm.ipTbotDoorClosedSignal				]	OR //not need in DC
																				ALMTC.Level[iLevel].AlarmID[E_TIIAlarm.ipTCDrawerUpSignal		   	] 	   //not need in DC
																			);
																			

TIIAlarmLED																:=	ALMTC.Level[iLevel].AlarmID[E_TIIAlarm.ipAPPowerOn 		   	   			]   OR 
		    																ALMTC.Level[iLevel].AlarmID[E_TIIAlarm.ipAPReady		       	   		]   OR
																			ALMTC.Level[iLevel].AlarmID[E_TIIAlarm.ipTesterLatchesClosed    		]	OR
																			ALMTC.Level[iLevel].AlarmID[E_TIIAlarm.ipTesterPowerOn	       			]   OR
																			ALMTC.Level[iLevel].AlarmID[E_TIIAlarm.ipTesterReady	           		]   OR
																			ALMTC.Level[iLevel].AlarmID[E_TIIAlarm.ipTCCellDoorClosed	   			]   OR
																			ALMTC.Common.AlarmID[E_ColAlarm.ipTbotDoorClosedSignal					]	OR
																			ALMTC.Level[iLevel].AlarmID[E_TIIAlarm.ipCellFluidLeakage1	   			]   OR
																			ALMTC.Level[iLevel].AlarmID[E_TIIAlarm.ipCellFluidLeakage2	   			]   OR
																			ALMTC.Level[iLevel].AlarmID[E_TIIAlarm.ipCellGroundFault 	   			]   OR
																			ALMTC.Level[iLevel].ALarmID[E_AlarmID.DrawerDownError					]	OR
																			ALMTC.Level[iLevel].ALarmID[E_AlarmID.DrawerUpError						]	OR
																			ALMTC.Level[iLevel].ALarmID[E_AlarmID.DrawerExtendError					]	OR
																			ALMTC.Level[iLevel].ALarmID[E_AlarmID.DrawerRetractError				]	OR
																			ALMTC.Level[iLevel].ALarmID[E_AlarmID.APIsNotInUPPosition				]	OR
																			ALMTC.Common.AlarmID[E_ColAlarm.ipColumnFluid_PCW_Leakage				]	OR
																			ALMTC.Level[iLevel].AlarmID[E_TIIAlarm.FrontDoorLockSignalNotDetected	]	OR
																			ALMTC.Level[iLevel].AlarmID[E_TIIAlarm.TBOT_TC_ACPower_Signal   		] 	OR	
																			ALMTC.Level[iLevel].AlarmID[E_TIIAlarm.DS_Facility_EAP_ACPower_Signal	]	OR
																			ALMTC.Level[iLevel].AlarmID[E_TIIAlarm.ipTCDrawerExtendSignal			]	OR
																			ALMTC.Level[iLevel].AlarmID[E_TIIAlarm.ipTCDrawerRetractSignal			]	OR
																			ALMTC.Level[iLevel].AlarmID[E_TIIAlarm.ipTCDrawerUpSignal				]	OR
																			ALMTC.Level[iLevel].AlarmID[E_TIIAlarm.ipTCDrawerDownSignal				]	OR
																			isAboveCellLeakage;
																			
																			
TIIAlarmEPT																:= 	ALMTC.Level[iLevel].AlarmID[E_TIIAlarm.ipAPPowerOn						]	OR
																			ALMTC.Level[iLevel].AlarmID[E_TIIAlarm.ipAPReady						]	OR
																			ALMTC.Level[iLevel].AlarmID[E_TIIAlarm.ipTesterLatchesClosed			]	OR
																			ALMTC.Level[iLevel].AlarmID[E_AlarmID.DrawerRetractError				]	OR
																			ALMTC.Level[iLevel].AlarmID[E_AlarmID.DrawerExtendError					]	OR
																			ALMTC.Level[iLevel].AlarmID[E_TIIAlarm.ipTCCellDoorClosed				]	OR
																			ALMTC.Level[iLevel].AlarmID[E_TIIAlarm.ipCellGroundFault				]	OR
																			ALMTC.Level[iLevel].AlarmID[E_TIIAlarm.ipCellFluidLeakage1				]	OR
																			ALMTC.Level[iLevel].AlarmID[E_TIIAlarm.ipCellFluidLeakage2				]	OR
																			ALMTC.Common.AlarmID[E_ColAlarm.ipColumnFluid_PCW_Leakage				]	OR
																			ALMTC.Common.AlarmID[E_ColAlarm.ipTbotDoorClosedSignal					]	OR
																			ALMTC.Level[iLevel].AlarmID[E_TIIAlarm.FrontDoorLockSignalNotDetected	]	OR
																			ALMTC.Level[iLevel].AlarmID[E_TIIAlarm.TBOT_TC_ACPower_Signal   		]	OR
																			ALMTC.Level[iLevel].AlarmID[E_TIIAlarm.DS_Facility_EAP_ACPower_Signal	]	OR
																			ALMTC.Level[iLevel].AlarmID[E_TIIAlarm.ipTCDrawerExtendSignal			]	OR
																			ALMTC.Level[iLevel].AlarmID[E_TIIAlarm.ipTCDrawerRetractSignal			]	OR
																			ALMTC.Level[iLevel].AlarmID[E_TIIAlarm.ipTCDrawerUpSignal				]	OR
																			ALMTC.Level[iLevel].AlarmID[E_TIIAlarm.ipTCDrawerDownSignal				]	OR
																			isAboveCellLeakage;
																			]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_AboveLeakageChecking" Id="{0b729bd7-55a1-4289-91e6-7b49f3713973}">
      <Declaration><![CDATA[METHOD M_AboveLeakageChecking : BOOL
VAR_INPUT
	currentLevel	: INT;
END_VAR
VAR
	maxLevel		: INT;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[maxLevel									:= NO_OF_LEVEL;

IF currentLevel = maxLevel THEN
	M_AboveLeakageChecking						:= FALSE;
	RETURN;
END_IF

IF ALMTC.Level[currentLevel+1].AlarmID[E_TIIAlarm.ipCellFluidLeakage1] OR ALMTC.Level[currentLevel+1].AlarmID[E_TIIAlarm.ipCellFluidLeakage2] THEN
	M_AboveLeakageChecking					:= TRUE;
ELSIF ALMTC.Level[currentLevel+2].AlarmID[E_TIIAlarm.ipCellFluidLeakage1] OR ALMTC.Level[currentLevel+2].AlarmID[E_TIIAlarm.ipCellFluidLeakage2] THEN
	M_AboveLeakageChecking					:= TRUE;
END_IF

]]></ST>
      </Implementation>
    </Method>
    <Property Name="P_ErrClear" Id="{a7ea7319-566b-4b4c-a0be-fa28aa059c11}">
      <Declaration><![CDATA[PROPERTY P_ErrClear : BOOL]]></Declaration>
      <Get Name="Get" Id="{423550e5-8c77-479e-a2f2-c9a4c635ec9f}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[]]></ST>
        </Implementation>
      </Get>
      <Set Name="Set" Id="{a6fac879-a371-480d-9d97-36ad329adf11}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[alarmReset	:= P_ErrClear;]]></ST>
        </Implementation>
      </Set>
    </Property>
    <LineIds Name="FB_TIIAlarm">
      <LineId Id="124" Count="0" />
      <LineId Id="134" Count="0" />
      <LineId Id="9" Count="0" />
      <LineId Id="169" Count="0" />
      <LineId Id="202" Count="0" />
      <LineId Id="170" Count="0" />
      <LineId Id="168" Count="0" />
      <LineId Id="127" Count="0" />
      <LineId Id="130" Count="0" />
      <LineId Id="238" Count="0" />
      <LineId Id="237" Count="0" />
      <LineId Id="128" Count="0" />
      <LineId Id="120" Count="0" />
      <LineId Id="132" Count="1" />
      <LineId Id="118" Count="0" />
      <LineId Id="88" Count="0" />
      <LineId Id="57" Count="0" />
      <LineId Id="27" Count="0" />
    </LineIds>
    <LineIds Name="FB_TIIAlarm.AlarmUpdate">
      <LineId Id="140" Count="1" />
      <LineId Id="504" Count="0" />
      <LineId Id="570" Count="0" />
      <LineId Id="535" Count="0" />
      <LineId Id="338" Count="0" />
      <LineId Id="785" Count="1" />
      <LineId Id="364" Count="0" />
      <LineId Id="783" Count="1" />
      <LineId Id="787" Count="0" />
      <LineId Id="363" Count="0" />
      <LineId Id="788" Count="0" />
      <LineId Id="339" Count="0" />
      <LineId Id="782" Count="0" />
      <LineId Id="789" Count="2" />
      <LineId Id="569" Count="0" />
      <LineId Id="792" Count="3" />
      <LineId Id="337" Count="0" />
      <LineId Id="797" Count="2" />
      <LineId Id="1388" Count="0" />
      <LineId Id="1390" Count="0" />
      <LineId Id="1389" Count="0" />
      <LineId Id="1393" Count="1" />
      <LineId Id="1392" Count="0" />
      <LineId Id="1397" Count="3" />
      <LineId Id="1396" Count="0" />
      <LineId Id="1395" Count="0" />
      <LineId Id="796" Count="0" />
      <LineId Id="143" Count="0" />
      <LineId Id="335" Count="0" />
      <LineId Id="440" Count="0" />
      <LineId Id="449" Count="0" />
      <LineId Id="781" Count="0" />
      <LineId Id="475" Count="0" />
      <LineId Id="676" Count="1" />
      <LineId Id="675" Count="0" />
      <LineId Id="679" Count="2" />
      <LineId Id="678" Count="0" />
      <LineId Id="1100" Count="0" />
      <LineId Id="1110" Count="2" />
      <LineId Id="1114" Count="6" />
      <LineId Id="1122" Count="3" />
      <LineId Id="1101" Count="1" />
      <LineId Id="365" Count="0" />
      <LineId Id="145" Count="0" />
      <LineId Id="148" Count="0" />
      <LineId Id="279" Count="0" />
      <LineId Id="803" Count="3" />
      <LineId Id="280" Count="0" />
      <LineId Id="807" Count="3" />
      <LineId Id="281" Count="0" />
      <LineId Id="811" Count="3" />
      <LineId Id="152" Count="0" />
      <LineId Id="815" Count="3" />
      <LineId Id="153" Count="0" />
      <LineId Id="819" Count="3" />
      <LineId Id="154" Count="0" />
      <LineId Id="823" Count="3" />
      <LineId Id="155" Count="0" />
      <LineId Id="827" Count="2" />
      <LineId Id="859" Count="0" />
      <LineId Id="156" Count="0" />
      <LineId Id="860" Count="3" />
      <LineId Id="304" Count="0" />
      <LineId Id="864" Count="3" />
      <LineId Id="305" Count="0" />
      <LineId Id="868" Count="3" />
      <LineId Id="306" Count="0" />
      <LineId Id="872" Count="3" />
      <LineId Id="309" Count="0" />
      <LineId Id="1543" Count="0" />
      <LineId Id="876" Count="3" />
      <LineId Id="310" Count="0" />
      <LineId Id="880" Count="3" />
      <LineId Id="311" Count="0" />
      <LineId Id="884" Count="2" />
      <LineId Id="896" Count="0" />
      <LineId Id="708" Count="0" />
      <LineId Id="890" Count="0" />
      <LineId Id="893" Count="1" />
      <LineId Id="1272" Count="0" />
      <LineId Id="1274" Count="2" />
      <LineId Id="1273" Count="0" />
      <LineId Id="1280" Count="0" />
      <LineId Id="1277" Count="2" />
      <LineId Id="992" Count="0" />
      <LineId Id="1339" Count="8" />
      <LineId Id="1337" Count="0" />
      <LineId Id="1375" Count="6" />
      <LineId Id="1383" Count="1" />
      <LineId Id="1382" Count="0" />
      <LineId Id="158" Count="0" />
      <LineId Id="162" Count="0" />
      <LineId Id="177" Count="2" />
      <LineId Id="800" Count="0" />
      <LineId Id="1242" Count="0" />
      <LineId Id="801" Count="1" />
      <LineId Id="182" Count="1" />
      <LineId Id="232" Count="0" />
      <LineId Id="390" Count="0" />
      <LineId Id="1182" Count="0" />
      <LineId Id="572" Count="1" />
      <LineId Id="899" Count="0" />
      <LineId Id="575" Count="0" />
      <LineId Id="900" Count="0" />
      <LineId Id="589" Count="0" />
      <LineId Id="901" Count="0" />
      <LineId Id="590" Count="0" />
      <LineId Id="902" Count="0" />
      <LineId Id="591" Count="0" />
      <LineId Id="903" Count="0" />
      <LineId Id="592" Count="0" />
      <LineId Id="915" Count="0" />
      <LineId Id="593" Count="0" />
      <LineId Id="914" Count="0" />
      <LineId Id="594" Count="0" />
      <LineId Id="913" Count="0" />
      <LineId Id="595" Count="0" />
      <LineId Id="912" Count="0" />
      <LineId Id="596" Count="0" />
      <LineId Id="911" Count="0" />
      <LineId Id="597" Count="0" />
      <LineId Id="910" Count="0" />
      <LineId Id="598" Count="0" />
      <LineId Id="909" Count="0" />
      <LineId Id="599" Count="0" />
      <LineId Id="908" Count="0" />
      <LineId Id="600" Count="0" />
      <LineId Id="907" Count="0" />
      <LineId Id="601" Count="0" />
      <LineId Id="906" Count="0" />
      <LineId Id="602" Count="0" />
      <LineId Id="905" Count="0" />
      <LineId Id="603" Count="0" />
      <LineId Id="904" Count="0" />
      <LineId Id="574" Count="0" />
      <LineId Id="282" Count="0" />
      <LineId Id="631" Count="1" />
      <LineId Id="959" Count="0" />
      <LineId Id="633" Count="0" />
      <LineId Id="958" Count="0" />
      <LineId Id="634" Count="0" />
      <LineId Id="957" Count="0" />
      <LineId Id="635" Count="0" />
      <LineId Id="956" Count="0" />
      <LineId Id="636" Count="0" />
      <LineId Id="955" Count="0" />
      <LineId Id="637" Count="0" />
      <LineId Id="954" Count="0" />
      <LineId Id="638" Count="0" />
      <LineId Id="953" Count="0" />
      <LineId Id="639" Count="0" />
      <LineId Id="952" Count="0" />
      <LineId Id="640" Count="0" />
      <LineId Id="951" Count="0" />
      <LineId Id="641" Count="0" />
      <LineId Id="950" Count="0" />
      <LineId Id="642" Count="0" />
      <LineId Id="949" Count="0" />
      <LineId Id="643" Count="0" />
      <LineId Id="948" Count="0" />
      <LineId Id="644" Count="0" />
      <LineId Id="947" Count="0" />
      <LineId Id="645" Count="0" />
      <LineId Id="946" Count="0" />
      <LineId Id="646" Count="0" />
      <LineId Id="945" Count="0" />
      <LineId Id="647" Count="0" />
      <LineId Id="944" Count="0" />
      <LineId Id="648" Count="0" />
      <LineId Id="943" Count="0" />
      <LineId Id="630" Count="0" />
      <LineId Id="283" Count="0" />
      <LineId Id="187" Count="0" />
      <LineId Id="960" Count="0" />
      <LineId Id="241" Count="0" />
      <LineId Id="1020" Count="1" />
      <LineId Id="568" Count="0" />
      <LineId Id="563" Count="0" />
      <LineId Id="567" Count="0" />
      <LineId Id="566" Count="0" />
      <LineId Id="564" Count="1" />
      <LineId Id="562" Count="0" />
      <LineId Id="202" Count="0" />
      <LineId Id="1243" Count="0" />
      <LineId Id="1441" Count="0" />
      <LineId Id="1440" Count="0" />
      <LineId Id="738" Count="0" />
      <LineId Id="745" Count="0" />
      <LineId Id="1580" Count="1" />
      <LineId Id="1508" Count="2" />
      <LineId Id="1550" Count="0" />
      <LineId Id="1513" Count="0" />
      <LineId Id="1582" Count="0" />
      <LineId Id="1579" Count="0" />
      <LineId Id="203" Count="0" />
      <LineId Id="1023" Count="0" />
      <LineId Id="1027" Count="0" />
      <LineId Id="1039" Count="1" />
      <LineId Id="1045" Count="1" />
      <LineId Id="1549" Count="0" />
      <LineId Id="1028" Count="2" />
      <LineId Id="1210" Count="4" />
      <LineId Id="1048" Count="0" />
      <LineId Id="1051" Count="0" />
      <LineId Id="1022" Count="0" />
      <LineId Id="1309" Count="0" />
      <LineId Id="1402" Count="3" />
      <LineId Id="1445" Count="0" />
      <LineId Id="1401" Count="0" />
      <LineId Id="1053" Count="1" />
      <LineId Id="1057" Count="7" />
      <LineId Id="1069" Count="0" />
      <LineId Id="1544" Count="0" />
      <LineId Id="1070" Count="0" />
      <LineId Id="1067" Count="0" />
      <LineId Id="1308" Count="0" />
      <LineId Id="1407" Count="2" />
      <LineId Id="1406" Count="0" />
      <LineId Id="1446" Count="0" />
      <LineId Id="1066" Count="0" />
    </LineIds>
    <LineIds Name="FB_TIIAlarm.M_AboveLeakageChecking">
      <LineId Id="5" Count="0" />
      <LineId Id="44" Count="3" />
      <LineId Id="11" Count="0" />
      <LineId Id="10" Count="0" />
      <LineId Id="14" Count="0" />
      <LineId Id="21" Count="0" />
      <LineId Id="26" Count="1" />
      <LineId Id="25" Count="0" />
      <LineId Id="34" Count="0" />
      <LineId Id="20" Count="0" />
    </LineIds>
    <LineIds Name="FB_TIIAlarm.P_ErrClear.Get">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_TIIAlarm.P_ErrClear.Set">
      <LineId Id="2" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>