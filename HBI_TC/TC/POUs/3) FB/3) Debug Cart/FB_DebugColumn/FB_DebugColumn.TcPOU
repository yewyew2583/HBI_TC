<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4022.18">
  <POU Name="FB_DebugColumn" Id="{a7017636-c9e1-403a-a9f7-6b0925000aa6}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK FB_DebugColumn
VAR_INPUT
END_VAR
VAR_OUTPUT
	DBColumnAlarmLED			: BOOL;
END_VAR
VAR	
	stDebugColumnDIO				: ST_DebugColumnDIO;
	stDebugColumnVIO				: ST_DebugColumnVIO;
	stDebugColumnBIO				: ST_DebugColumnBIO;
	
	//debug station
	stDebugStationDIO				:ST_DebugStation_DIO;
	stDebugStationVIO				:ST_DebugStation_VIO;
	stDebugStationBIO				:ST_DebugStation_BIO;
	
	fbBD_ipBdoor 					: Tc3_HBI_Utilities.FB_BackDoor_Digital;
	fb_facility_DewPoint_OFA6Bar 	: FB_Facility;
	
	
	
	FB_opDBColumnPCWValve		: DFB_Cylinder;
	DUT_opDBColumnPCWValve		: DUT_Cylinder;
	Alarm_opDBColumnPCWValve	: BOOL;
	
	
	noDBColAlarm 				: INT	:= NO_OF_TII_SENSOR;	//col alrm count will change later
	ArrDelayAlarm 				: ARRAY[1..NO_OF_TII_SENSOR] OF FB_AlarmDelay;
	ArrAlmBitBefDelay 			: ARRAY[1..NO_OF_TII_SENSOR] OF BOOL;
	ArrAlmBitAftDelay 			: ARRAY[1..NO_OF_TII_SENSOR] OF BOOL;
	Arr_ms 						: ARRAY[1..NO_OF_TII_SENSOR] OF INT;
	

END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[Conversion(isSimulation:=bAnalogIOSim);


//////logic input ////////



///////logic output///////
Logic_opDBColumnPCWValve();

////// Map logic output /////
IOMapping();

AlarmUpdate();
//fb_DebugCart_Motor();]]></ST>
    </Implementation>
    <Folder Name="Cyclic" Id="{b5e684e2-3795-483d-907f-d9f45288437b}" />
    <Folder Name="OutputLogic" Id="{585c54fa-f2e0-4cb6-901c-a096041e318d}" />
    <Method Name="AlarmUpdate" Id="{9c21e4e3-806f-4cfd-b42e-5ef79c5e31a4}" FolderPath="Cyclic\">
      <Declaration><![CDATA[METHOD AlarmUpdate : BOOL
VAR
	i			: INT;
	eAlarm		: E_DCFACAlarm;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[fb_facility_DewPoint_OFA6Bar(); //debug column facility check OFA6bar and Dew point

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////// Warning Trigger Area ////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//Warning up after warning timer expired, auto clear
ALM_DCCOL.AlarmID[E_DCFACAlarm.e6BarLowOFAAirPressureWarning]		:= OFA6Bar_Warning;

//Warning up after warning timer expired, auto clear
ALM_DCCOL.AlarmID[E_DCFACAlarm.eCondensationWarning]				:= DewPoint_Warning;

//'Warning: PCW supply high temp' auto clear 14
ALM_DCCOL.AlarmID[E_DCFACAlarm.ePCWSupplyHighTempWarning]			:= (stDebugColumnDIO.ipDBColumnPCWSupplyTemperature > lmtPCWSupplyHighTempWarning_Limit); 

//'Warning: 9 bar OFA LH air pressure low' 850
ALM_DCCOL.AlarmID[E_DCFACAlarm.e9BarLowOFAAirPressureWarning]		:= (stDebugColumnDIO.ipDBColumnAPAirPressure < lmt9BarLowOFAAirPressureWarning_limit);

//'Warning: Excessive heat load into PCW' 14  THEN		
ALM_DCCOL.AlarmID[E_DCFACAlarm.eExcessiveHeatLoadIntoPCWWarning]	:= (stDebugColumnDIO.ipDBColumnPCWReturnTemperature - stDebugColumnDIO.ipDBColumnPCWSupplyTemperature > lmtExcessiveHeatLoadIntoPCWWarning_Limit);


IF DewPoint_Abort OR OFA6Bar_Abort THEN
	//after delay 60seconds, trigger EAP to shut off AP & tester 240 AC power in full cell stack.
	stDebugColumnVIO.bShutOffAllACPower								:= TRUE;
ELSIF (NOT ALM_DCCOL.AlarmID[E_DCFACAlarm.eCriticalCondensationAlarm]) AND (NOT ALM_DCCOL.AlarmID[E_DCFACAlarm.e6BarLowOFAAirPressureAlarm]) THEN
	stDebugColumnVIO.bShutOffAllACPower								:= FALSE;
END_IF

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////// Alarm Trigger Area (with delay time) ////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


FOR i:=1 TO noDBColAlarm DO	
	CASE i OF
        E_DCFACAlarm.e6BarLowOFAAirPressureAlarm: 
			eAlarm															:= E_DCFACAlarm.e6BarLowOFAAirPressureAlarm; 
			ArrAlmBitBefDelay[E_DCFACAlarm.e6BarLowOFAAirPressureAlarm]		:= OFA6Bar_Alarm;
			Arr_ms[eAlarm] 													:= 500;  (*TIIAlmText[e]:='AP_PowerOn'*); 
			
	    E_DCFACAlarm.eCriticalCondensationAlarm: 
			eAlarm															:= E_DCFACAlarm.eCriticalCondensationAlarm; 
			ArrAlmBitBefDelay[E_DCFACAlarm.eCriticalCondensationAlarm]		:= DewPoint_Alarm; 	
			Arr_ms[eAlarm] 													:= 500;  (*TIIAlmText[e]:='AP_Ready' 		    	*);     
                   
	    E_DCFACAlarm.eSystemPCWLeakageAlarm:
			eAlarm															:= E_DCFACAlarm.eSystemPCWLeakageAlarm; 
			ArrAlmBitBefDelay[E_DCFACAlarm.eSystemPCWLeakageAlarm]			:= stDebugColumnVIO.ipDBColumnPCWLeakage; 
			Arr_ms[eAlarm] 													:= 500;  //TIIAlmText[e]:='CellGroundFault'  		;
			
		E_DCFACAlarm.eSystemPCWReturnLeakageAlarm:
			eAlarm															:= E_DCFACAlarm.eSystemPCWReturnLeakageAlarm; 
			ArrAlmBitBefDelay[E_DCFACAlarm.eSystemPCWReturnLeakageAlarm]	:= stDebugColumnVIO.ipDBColumnPCWReturnLeakage; 
			Arr_ms[eAlarm] 													:= 500;  //TIIAlmText[e]:='CellGroundFault'  		;  
			
		E_DCFACAlarm.eSystemPCWSupplyLeakageAlarm:
			eAlarm															:= E_DCFACAlarm.eSystemPCWSupplyLeakageAlarm; 
			ArrAlmBitBefDelay[E_DCFACAlarm.eSystemPCWSupplyLeakageAlarm]	:= stDebugColumnVIO.ipDBColumnPCWSupplyLeakage; 
			Arr_ms[eAlarm] 													:= 500;  //TIIAlmText[e]:='CellGroundFault'  		;  
			
		E_DCFACAlarm.eSystemPCWLeakage2Alarm:
			eAlarm															:= E_DCFACAlarm.eSystemPCWLeakage2Alarm; 
			ArrAlmBitBefDelay[E_DCFACAlarm.eSystemPCWLeakage2Alarm]			:= stDebugColumnVIO.ipDBColumnPCWLeakage2; 
			Arr_ms[eAlarm] 													:= 500;  //TIIAlmText[e]:='CellGroundFault'  		;
	END_CASE
	
	//Delay Library Alm Bit
	ArrDelayAlarm[i](	alarmState			:= ArrAlmBitBefDelay[i],
						triggerAlarmState	=> ArrAlmBitAftDelay[i],
						alarmResetTimer		:= stDebugColumnVIO.bDebugColErrClear,
						msec				:= Arr_ms[i]);	//DelayAlmBit
	
	IF ArrAlmBitAftDelay[i] THEN
		ALM_DCCOL.AlarmID[i]				:= TRUE;
	END_IF
END_FOR

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////// Clear Alarm Area ////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

IF stDebugColumnVIO.bDebugColErrClear THEN
	IF NOT bProductionMode OR bHMIResetAllAlarm THEN
		FOR i:=1 TO 20 DO
			ALM_DCCOL.AlarmID[i]:=FALSE;
		END_FOR
	ELSE
		ALM_DCCOL.AlarmID[stDebugColumnVIO.iAlmIDToRset]:=FALSE;
	END_IF
	stDebugColumnVIO.bDebugColErrClear:= FALSE;
END_IF

DBColumnAlarmLED				:= 	ALM_DCCOL.AlarmID[E_DCFACAlarm.e6BarLowOFAAirPressureAlarm] 	OR
									ALM_DCCOL.AlarmID[E_DCFACAlarm.eCriticalCondensationAlarm] 		OR
									ALM_DCCOL.AlarmID[E_DCFACAlarm.eSystemPCWLeakageAlarm] 			OR
									ALM_DCCOL.AlarmID[E_DCFACAlarm.eSystemPCWReturnLeakageAlarm] 	OR
									ALM_DCCOL.AlarmID[E_DCFACAlarm.eSystemPCWSupplyLeakageAlarm]	OR
									ALM_DCCOL.AlarmID[E_DCFACAlarm.eSystemPCWLeakage2Alarm];



]]></ST>
      </Implementation>
    </Method>
    <Method Name="Conversion" Id="{51823aa7-0cba-4746-93d5-cd64ea2d0196}" FolderPath="Cyclic\">
      <Declaration><![CDATA[METHOD Conversion : BOOL
VAR_INPUT
	isSimulation:BOOL;
END_VAR
VAR
	tempSimIpt:LREAL;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////	
/////////////////////// Simulation Mode ///////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////	
IF isSimulation THEN
	
	stDebugColumnDIO.fbSimDBColumnPCWRegularFlowSensor(Mn:=spDBColumnPCWRegularFlowSensor.iMn, mx:=spDBColumnPCWRegularFlowSensor.iMx, Sen:= stDebugColumnDIO.simDBColumnPCWRegularFlowSensor);
	stDebugColumnDIO.ipDBColumnPCWRegularFlowSensor	:= 	ANLG_TO_ABC(iMn:= spDBColumnPCWRegularFlowSensor.iMn, 
																	iMx:= spDBColumnPCWRegularFlowSensor.iMx, 
																	oMn:= spDBColumnPCWRegularFlowSensor.oMn, 
																	oMx:= spDBColumnPCWRegularFlowSensor.oMx, 
																	ofs:= spDBColumnPCWRegularFlowSensor.ofs, 
																	val:= LREAL_TO_INT(stDebugColumnDIO.simDBColumnPCWRegularFlowSensor) , 
																	b  := spDBColumnPCWRegularFlowSensor.b);
																	
	stDebugColumnDIO.fbSimDBColumnPCWSupplyPressure(Mn:=spDBColumnPCWSupplyPressure.iMn, mx:=spDBColumnPCWSupplyPressure.iMx, Sen:= stDebugColumnDIO.simDBColumnPCWSupplyPressure);											
	stDebugColumnDIO.ipDBColumnPCWSupplyPressure		:= 	ANLG_TO_ABC(iMn:= spDBColumnPCWSupplyPressure.iMn, 
																	iMx:= spDBColumnPCWSupplyPressure.iMx, 
																	oMn:= spDBColumnPCWSupplyPressure.oMn, 
																	oMx:= spDBColumnPCWSupplyPressure.oMx, 
																	ofs:= spDBColumnPCWSupplyPressure.ofs, 
																	val:= LREAL_TO_INT(stDebugColumnDIO.simDBColumnPCWSupplyPressure) , 
																	b  := spDBColumnPCWSupplyPressure.b);								
																	
	stDebugColumnDIO.fbSimDBColumnPCWReturnPressure(Mn:=spDBColumnPCWReturnPressure.iMn, mx:=spDBColumnPCWReturnPressure.iMx, Sen:= stDebugColumnDIO.simDBColumnPCWReturnPressure);										
	stDebugColumnDIO.ipDBColumnPCWReturnPressure		:= 	ANLG_TO_ABC(iMn:= spDBColumnPCWReturnPressure.iMn, 
																	iMx:= spDBColumnPCWReturnPressure.iMx, 
																	oMn:= spDBColumnPCWReturnPressure.oMn, 
																	oMx:= spDBColumnPCWReturnPressure.oMx, 
																	ofs:= spDBColumnPCWReturnPressure.ofs, 
																	val:= LREAL_TO_INT(stDebugColumnDIO.simDBColumnPCWReturnPressure) , 
																	b  := spDBColumnPCWReturnPressure.b);
																	
	stDebugColumnDIO.fbSimDBColumnTstAirPressure(Mn:=spDBColumnTstAirPressure.iMn, mx:=spDBColumnTstAirPressure.iMx, Sen:= stDebugColumnDIO.simDBColumnTstAirPressure);							
	stDebugColumnDIO.ipDBColumnTstAirPressure	:= 	ANLG_TO_ABC(iMn:= spDBColumnTstAirPressure.iMn, 
					 												iMx:= spDBColumnTstAirPressure.iMx, 
																	oMn:= spDBColumnTstAirPressure.oMn, 
																	oMx:= spDBColumnTstAirPressure.oMx, 
																	ofs:= spDBColumnTstAirPressure.ofs, 
																	val:= LREAL_TO_INT(stDebugColumnDIO.simDBColumnTstAirPressure) , 
																	b  := spDBColumnTstAirPressure.b);
																	
	stDebugColumnDIO.fbSimDBColumnAPAirPressure(Mn:=spDBColumnAPAirPressure.iMn, mx:=spDBColumnAPAirPressure.iMx, Sen:= stDebugColumnDIO.simDBColumnAPAirPressure);							
	stDebugColumnDIO.ipDBColumnAPAirPressure	:= 	ANLG_TO_ABC(iMn:= spDBColumnAPAirPressure.iMn, 
																	iMx:= spDBColumnAPAirPressure.iMx, 
																	oMn:= spDBColumnAPAirPressure.oMn, 
																	oMx:= spDBColumnAPAirPressure.oMx, 
																	ofs:= spDBColumnAPAirPressure.ofs, 
																	val:= LREAL_TO_INT(stDebugColumnDIO.simDBColumnAPAirPressure) , 
																	b  := spDBColumnAPAirPressure.b);
																	
	stDebugColumnDIO.fbSimDBColumnDewPointSensor(Mn:=spDBColumnDewPointSensor.iMn, mx:=spDBColumnDewPointSensor.iMx, Sen:= stDebugColumnDIO.simDBColumnDewPointSensor);											
	stDebugColumnDIO.ipDBColumnDewPointSensor	:= 	ANLG_TO_ABC(iMn:= spDBColumnDewPointSensor.iMn, 
																	iMx:= spDBColumnDewPointSensor.iMx, 
																	oMn:= spDBColumnDewPointSensor.oMn, 
																	oMx:= spDBColumnDewPointSensor.oMx, 
																	ofs:= spDBColumnDewPointSensor.ofs, 
																	val:= LREAL_TO_INT(stDebugColumnDIO.simDBColumnDewPointSensor) , 
																	b  := spDBColumnDewPointSensor.b);

	stDebugColumnDIO.fbSimDBColumnTempSensor(Mn:=spDBColumnTempSensor.iMn, mx:=spDBColumnTempSensor.iMx, Sen:= stDebugColumnDIO.simDBColumnTempSensor);								
	stDebugColumnDIO.ipDBColumnTempSensor	:= 	ANLG_TO_ABC(iMn:= spDBColumnTempSensor.iMn, 
																	iMx:= spDBColumnTempSensor.iMx, 
																	oMn:= spDBColumnTempSensor.oMn, 
																	oMx:= spDBColumnTempSensor.oMx, 
																	ofs:= spDBColumnTempSensor.ofs, 
																	val:= LREAL_TO_INT(stDebugColumnDIO.simDBColumnTempSensor) , 
																	b  := spDBColumnTempSensor.b);
																								
	stDebugColumnDIO.fbSimDBColumnPCWSupplyTemperature(Mn:=spDBColumnPCWSupplyTemperature.iMn, mx:=spDBColumnPCWSupplyTemperature.iMx, Sen:= stDebugColumnDIO.simDBColumnPCWSupplyTemperature);
	stDebugColumnDIO.ipDBColumnPCWSupplyTemperature	:= 	ANLG_TO_ABC(iMn:= spDBColumnPCWSupplyTemperature.iMn, 
																	iMx:= spDBColumnPCWSupplyTemperature.iMx, 
																	oMn:= spDBColumnPCWSupplyTemperature.oMn, 
																	oMx:= spDBColumnPCWSupplyTemperature.oMx, 
																	ofs:= spDBColumnPCWSupplyTemperature.ofs, 
																	val:= LREAL_TO_INT(stDebugColumnDIO.simDBColumnPCWSupplyTemperature) , 
																	b  := spDBColumnPCWSupplyTemperature.b);				
																	
	stDebugColumnDIO.fbSimDBColumnPCWReturnTemperature(Mn:=spDBColumnPCWReturnTemperature.iMn, mx:=spDBColumnPCWReturnTemperature.iMx, Sen:= stDebugColumnDIO.simDBColumnPCWReturnTemperature);
	stDebugColumnDIO.ipDBColumnPCWReturnTemperature	:= 	ANLG_TO_ABC(iMn:= spDBColumnPCWReturnTemperature.iMn, 
																	iMx:= spDBColumnPCWReturnTemperature.iMx, 
																	oMn:= spDBColumnPCWReturnTemperature.oMn, 
																	oMx:= spDBColumnPCWReturnTemperature.oMx, 
																	ofs:= spDBColumnPCWReturnTemperature.ofs, 
																	val:= LREAL_TO_INT(stDebugColumnDIO.simDBColumnPCWReturnTemperature) , 
																	b  := spDBColumnPCWReturnTemperature.b);
																	
	IF NOT bDebugStation THEN
		stDebugColumnDIO.ipDBColumnPCWRegularFlowSensor :=
		stDebugColumnDIO.ipDBColumnPCWSupplyPressure 	:=
		stDebugColumnDIO.ipDBColumnPCWReturnPressure 	:=
		stDebugColumnDIO.ipDBColumnTstAirPressure 		:=
		stDebugColumnDIO.ipDBColumnAPAirPressure 		:=
		stDebugColumnDIO.ipDBColumnDewPointSensor 		:=
		stDebugColumnDIO.ipDBColumnPCWSupplyTemperature := 0;
	END_IF
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////	
/////////////////////// Production Actual Mode ///////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////															
ELSE															
	stDebugColumnDIO.ipDBColumnPCWRegularFlowSensor	:= 	ANLG_TO_ABC(iMn:= spDBColumnPCWRegularFlowSensor.iMn, 
																	iMx:= spDBColumnPCWRegularFlowSensor.iMx, 
																	oMn:= spDBColumnPCWRegularFlowSensor.oMn, 
																	oMx:= spDBColumnPCWRegularFlowSensor.oMx, 
																	ofs:= spDBColumnPCWRegularFlowSensor.ofs, 
																	val:= LREAL_TO_INT(stDebugColumnDIO.ipAnlgDBColumnPCWRegularFlowSensor) , 
																	b  := spDBColumnPCWRegularFlowSensor.b);
											
	stDebugColumnDIO.ipDBColumnPCWSupplyPressure		:= 	ANLG_TO_ABC(iMn:= spDBColumnPCWSupplyPressure.iMn, 
																	iMx:= spDBColumnPCWSupplyPressure.iMx, 
																	oMn:= spDBColumnPCWSupplyPressure.oMn, 
																	oMx:= spDBColumnPCWSupplyPressure.oMx, 
																	ofs:= spDBColumnPCWSupplyPressure.ofs, 
																	val:= LREAL_TO_INT(stDebugColumnDIO.ipAnlgDBColumnPCWSupplyPressure) , 
																	b  := spDBColumnPCWSupplyPressure.b);																	
												
	stDebugColumnDIO.ipDBColumnPCWReturnPressure		:= 	ANLG_TO_ABC(iMn:= spDBColumnPCWReturnPressure.iMn, 
																	iMx:= spDBColumnPCWReturnPressure.iMx, 
																	oMn:= spDBColumnPCWReturnPressure.oMn, 
																	oMx:= spDBColumnPCWReturnPressure.oMx, 
																	ofs:= spDBColumnPCWReturnPressure.ofs, 
																	val:= LREAL_TO_INT(stDebugColumnDIO.ipAnlgDBColumnPCWReturnPressure) , 
																	b  := spDBColumnPCWReturnPressure.b);
												
	stDebugColumnDIO.ipDBColumnTstAirPressure	:= 	ANLG_TO_ABC(iMn:= spDBColumnTstAirPressure.iMn, 
																	iMx:= spDBColumnTstAirPressure.iMx, 
																	oMn:= spDBColumnTstAirPressure.oMn, 
																	oMx:= spDBColumnTstAirPressure.oMx, 
																	ofs:= spDBColumnTstAirPressure.ofs, 
																	val:= LREAL_TO_INT(stDebugColumnDIO.ipAnlgDBColumnTstAirPressure) , 
																	b  := spDBColumnTstAirPressure.b);
													
	stDebugColumnDIO.ipDBColumnAPAirPressure	:= 	ANLG_TO_ABC(iMn:= spDBColumnAPAirPressure.iMn, 
																	iMx:= spDBColumnAPAirPressure.iMx, 
																	oMn:= spDBColumnAPAirPressure.oMn, 
																	oMx:= spDBColumnAPAirPressure.oMx, 
																	ofs:= spDBColumnAPAirPressure.ofs, 
																	val:= LREAL_TO_INT(stDebugColumnDIO.ipAnlgDBColumnAPAirPressure) , 
																	b  := spDBColumnAPAirPressure.b);
											
	stDebugColumnDIO.ipDBColumnDewPointSensor	:= 	ANLG_TO_ABC(iMn:= spDBColumnDewPointSensor.iMn, 
																	iMx:= spDBColumnDewPointSensor.iMx, 
																	oMn:= spDBColumnDewPointSensor.oMn, 
																	oMx:= spDBColumnDewPointSensor.oMx, 
																	ofs:= spDBColumnDewPointSensor.ofs, 
																	val:= LREAL_TO_INT(stDebugColumnDIO.ipAnlgDBColumnDewPointSensor) , 
																	b  := spDBColumnDewPointSensor.b);		
														
	stDebugColumnDIO.ipDBColumnTempSensor	:= 	ANLG_TO_ABC(iMn:= spDBColumnTempSensor.iMn, 
																	iMx:= spDBColumnTempSensor.iMx, 
																	oMn:= spDBColumnTempSensor.oMn, 
																	oMx:= spDBColumnTempSensor.oMx, 
																	ofs:= spDBColumnTempSensor.ofs, 
																	val:= LREAL_TO_INT(stDebugColumnDIO.ipAnlgDBColumnTempSensor) , 
																	b  := spDBColumnTempSensor.b);																																
												
	stDebugColumnDIO.ipDBColumnPCWSupplyTemperature	:= 	ANLG_TO_ABC(iMn:= spDBColumnPCWSupplyTemperature.iMn, 
																	iMx:= spDBColumnPCWSupplyTemperature.iMx, 
																	oMn:= spDBColumnPCWSupplyTemperature.oMn, 
																	oMx:= spDBColumnPCWSupplyTemperature.oMx, 
																	ofs:= spDBColumnPCWSupplyTemperature.ofs, 
																	val:= LREAL_TO_INT(stDebugColumnDIO.ipAnlgDBColumnPCWSupplyTemperature) , 
																	b  := spDBColumnPCWSupplyTemperature.b);																	
												
	stDebugColumnDIO.ipDBColumnPCWReturnTemperature	:= 	ANLG_TO_ABC(iMn:= spDBColumnPCWReturnTemperature.iMn, 
																	iMx:= spDBColumnPCWReturnTemperature.iMx, 
																	oMn:= spDBColumnPCWReturnTemperature.oMn, 
																	oMx:= spDBColumnPCWReturnTemperature.oMx, 
																	ofs:= spDBColumnPCWReturnTemperature.ofs, 
																	val:= LREAL_TO_INT(stDebugColumnDIO.ipAnlgDBColumnPCWReturnTemperature) , 
																	b  := spDBColumnPCWReturnTemperature.b);	
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="IOMapping" Id="{73944cda-71da-4297-ba44-ad2fa907c180}" FolderPath="Cyclic\">
      <Declaration><![CDATA[METHOD IOMapping : BOOL
VAR_INPUT
END_VAR
VAR
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[

//stDebugColDIO.ipDBColumnPCWRegularFlowSensor  :=  stDebugColDIO.ipAnlgDBColumnPCWRegularFlowSensor	; //Do Some Conversion
//stDebugColDIO.ipDBColumnPCWSupplyPressure     :=  stDebugColDIO.ipAnlgDBColumnPCWSupplyPressure     ;
//stDebugColDIO.ipDBColumnPCWReturnPressure     :=  stDebugColDIO.ipAnlgDBColumnPCWReturnPressure     ;
//stDebugColDIO.ipDBColumnTstAirPressure        :=  stDebugColDIO.ipAnlgDBColumnTstAirPressure        ;
//stDebugColDIO.ipDBColumnAPAirPressure         :=  stDebugColDIO.ipAnlgDBColumnAPAirPressure         ;
//stDebugColDIO.ipDBColumnDewPointSensor        :=  stDebugColDIO.ipAnlgDBColumnDewPointSensor        ;
//stDebugColDIO.ipDBColumnPCWSupplyTemperature  :=  stDebugColDIO.ipAnlgDBColumnPCWSupplyTemperature  ;
//stDebugColDIO.ipDBColumnPCWReturnTemperature  :=  stDebugColDIO.ipAnlgDBColumnPCWReturnTemperature  ;


	stDebugColumnVIO.ipDBColumnPCWLeakage		:= NOT fbBD_ipBdoor.M_bBackDoorCtrl(bProductionMode:=bProductionMode , 
	                                            					bActual:=stDebugColumnDIO.ipDBColumnPCWLeakage , 
	                                            					bSimu:=TRUE , 
	                                            					iBackDoor:=stDebugColumnBIO.ipDBColumnPCWLeakage );
	stDebugColumnVIO.ipDBColumnPCWSupplyLeakage		:= NOT fbBD_ipBdoor.M_bBackDoorCtrl(bProductionMode:=bProductionMode , 
	                                            					bActual:=stDebugColumnDIO.ipDBColumnPCWSupplyLeakage , 
	                                            					bSimu:=TRUE , 
	                                            					iBackDoor:=stDebugColumnBIO.ipDBColumnPCWSupplyLeakage );
	stDebugColumnVIO.ipDBColumnPCWReturnLeakage		:= NOT fbBD_ipBdoor.M_bBackDoorCtrl(bProductionMode:=bProductionMode , 
	                                            					bActual:=stDebugColumnDIO.ipDBColumnPCWReturnLeakage , 
	                                            					bSimu:=TRUE , 
	                                            					iBackDoor:=stDebugColumnBIO.ipDBColumnPCWReturnLeakage );
																	
	stDebugColumnVIO.ipDBColumnPCWLeakage2		:= NOT fbBD_ipBdoor.M_bBackDoorCtrl(bProductionMode:=bProductionMode , 
	                                            					bActual:=stDebugColumnDIO.ipDBColumnPCWLeakage2 , 
	                                            					bSimu:=TRUE , 
	                                            					iBackDoor:=stDebugColumnBIO.ipDBColumnPCWLeakage2 );											
																				
//EAP===========================================================================================																	
	stDebugColumnDIO.eapDBColumnPCWLeakage 					:= stDebugColumnVIO.ipDBColumnPCWLeakage;		
	stDebugColumnDIO.eapDBColumnPCWSupplyLeakage 			:= stDebugColumnVIO.ipDBColumnPCWSupplyLeakage;															
	stDebugColumnDIO.eapDBColumnPCWReturnLeakage 			:= stDebugColumnVIO.ipDBColumnPCWReturnLeakage;					
	stDebugColumnDIO.eapDBColumnPCWLeakage2					:= stDebugColumnVIO.ipDBColumnPCWLeakage2;					
//=============================================================================================

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////// Simulation Input Mapping ///////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
IF (NOT bProductionMode) THEN
	
	stDebugColumnDIO.ipDBColumnPCWLeakage			:= stDebugColumnVIO.ipDBColumnPCWLeakage;
	stDebugColumnDIO.ipDBColumnPCWSupplyLeakage		:= stDebugColumnVIO.ipDBColumnPCWSupplyLeakage;
	stDebugColumnDIO.ipDBColumnPCWReturnLeakage		:= stDebugColumnVIO.ipDBColumnPCWReturnLeakage;
	stDebugColumnDIO.ipDBColumnPCWLeakage2			:= stDebugColumnVIO.ipDBColumnPCWLeakage2;
END_IF



IF stDebugColumnVIO.bShutOffAllACPower THEN
	stDebugColumnVIO.eapShutOffAllACPower					:= TRUE;	//control eap to shut off AC power in debug cart full cell
ELSE
	stDebugColumnVIO.eapShutOffAllACPower					:= FALSE;	//control eap to shut off AC power in debug cart full cell
END_IF

IF stDebugColumnVIO.bShutOffAir THEN
	stDebugColumnVIO.opDBColumnTstAirSol:=FALSE;
	stDebugColumnVIO.opDBColumnAPAirSol:=FALSE;
ELSE
	stDebugColumnVIO.opDBColumnTstAirSol := TRUE;
	stDebugColumnVIO.opDBColumnAPAirSol := TRUE;
END_IF

	stDebugColumnVIO.opDBColumnHotAirExhaustFan := FunONOFF; //TRUE;


IF NOT stDebugColumnVIO.bDiagnosticMode	THEN		
//Colum DIO is Control by PLC, Not Direct accessed by TA
	stDebugColumnDIO.opDBColumnHotAirExhaustFan := stDebugColumnVIO.opDBColumnHotAirExhaustFan;		
	stDebugColumnDIO.opDBColumnPCWValve       	:= stDebugColumnVIO.opDBColumnPCWValve;
	stDebugColumnDIO.opDBColumnTstAirSol        := stDebugColumnVIO.opDBColumnTstAirSol;				
	stDebugColumnDIO.opDBColumnAPAirSol         := stDebugColumnVIO.opDBColumnAPAirSol;
	stDebugColumnDIO.eapShutOffAllACPower		:= stDebugColumnVIO.eapShutOffAllACPower;
END_IF		]]></ST>
      </Implementation>
    </Method>
    <Method Name="Logic_opDBColumnPCWValve" Id="{658180df-680a-49e5-a1b7-2dfb39bc8345}" FolderPath="OutputLogic\">
      <Declaration><![CDATA[METHOD Logic_opDBColumnPCWValve : BOOL
VAR
	Permissive_opDBColumnPCWValve		: WORD;
	Shutdown_opDBColumnPCWValve			: WORD;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[FC_BitToWord(
	BOOL_00		:= TRUE, 
	BOOL_01		:= TRUE, 
	BOOL_02		:= TRUE, 
	BOOL_03		:= TRUE, 
	BOOL_04		:= TRUE, 
	BOOL_05		:= TRUE, 
	BOOL_06		:= TRUE, 
	BOOL_07		:= TRUE, 
	BOOL_08		:= TRUE, 
	BOOL_09		:= TRUE, 
	BOOL_10		:= TRUE, 
	BOOL_11		:= TRUE, 
	BOOL_12		:= TRUE, 
	BOOL_13		:= TRUE, 
	BOOL_14		:= TRUE, 
	BOOL_15		:= TRUE, 
	Output_Word		=> Permissive_opDBColumnPCWValve);
	
FC_BitToWord(
	BOOL_00		:= FALSE, 
	BOOL_01		:= FALSE, 
	BOOL_02		:= FALSE, 
	BOOL_03		:= FALSE, 
	BOOL_04		:= FALSE, 
	BOOL_05		:= FALSE, 
	BOOL_06		:= FALSE, 
	BOOL_07		:= FALSE, 
	BOOL_08		:= FALSE, 
	BOOL_09		:= FALSE, 
	BOOL_10		:= FALSE, 
	BOOL_11		:= FALSE, 
	BOOL_12		:= FALSE, 
	BOOL_13		:= FALSE, 
	BOOL_14		:= FALSE, 
	BOOL_15		:= FALSE, 
	Output_Word		=> Shutdown_opDBColumnPCWValve);

IF 	DewPoint_Abort OR 
	OFA6Bar_Abort OR 
	ALM_DCCOL.AlarmID[E_DCFACAlarm.eSystemPCWLeakageAlarm] 			OR 
	ALM_DCCOL.AlarmID[E_DCFACAlarm.eSystemPCWSupplyLeakageAlarm]	OR  
	ALM_DCCOL.AlarmID[E_DCFACAlarm.eSystemPCWReturnLeakageAlarm] 	OR 
	ALM_DCCOL.AlarmID[E_DCFACAlarm.eSystemPCWLeakage2Alarm] 		THEN
	Alarm_opDBColumnPCWValve				:= TRUE;
ELSIF 	(NOT ALM_DCCOL.AlarmID[E_DCFACAlarm.eCriticalCondensationAlarm]) 	AND 
		(NOT ALM_DCCOL.AlarmID[E_DCFACAlarm.e6BarLowOFAAirPressureAlarm]) 	AND
		(NOT ALM_DCCOL.AlarmID[E_DCFACAlarm.eSystemPCWLeakageAlarm]) 		AND
		(NOT ALM_DCCOL.AlarmID[E_DCFACAlarm.eSystemPCWSupplyLeakageAlarm]) 	AND 
		(NOT ALM_DCCOL.AlarmID[E_DCFACAlarm.eSystemPCWReturnLeakageAlarm])	AND
		(NOT ALM_DCCOL.AlarmID[E_DCFACAlarm.eSystemPCWLeakage2Alarm])		THEN
	Alarm_opDBColumnPCWValve				:= FALSE;
END_IF


DUT_opDBColumnPCWValve.AutInp		:= NOT Alarm_opDBColumnPCWValve;

					
FB_opDBColumnPCWValve(
	Sec_P:= Sec_P, 
	ID:= 'DebugCart Column PCW Valve', 
	Simulate:= DUT_opDBColumnPCWValve.Simulate, 
	Permissive:= Permissive_opDBColumnPCWValve,  //check before execute
	ShutDown:= Shutdown_opDBColumnPCWValve,  //keep checking this condition 
	AutoInp:= DUT_opDBColumnPCWValve.AutInp, 
	Command:= DUT_opDBColumnPCWValve.CMD, //1: Retract, 2: Extend, 4: Auto
	IExtend:= stDebugColumnVIO.opDBColumnPCWValve, 
	IRetract:= (NOT stDebugColumnVIO.opDBColumnPCWValve), 
	Travel_Time:= DUT_opDBColumnPCWValve.Travel_Time, //detect input after output trigger
	SetOutput_Pulse:= FALSE,  //output rising edge
	FailedHoldLast:= FALSE,  //remain state after failed. 1: Remain, 0: FALSE
	OExtend=> stDebugColumnVIO.opDBColumnPCWValve,  //map to output variable
	ORetract=> , 
	DUT:= DUT_opDBColumnPCWValve);
	]]></ST>
      </Implementation>
    </Method>
    <Property Name="P_stVIO" Id="{fc7b64c7-e17d-473f-a050-d2027649ae9a}">
      <Declaration><![CDATA[PROPERTY P_stVIO : ST_DebugColumnVIO]]></Declaration>
      <Get Name="Get" Id="{c5a444ce-760f-404c-9550-7585143b96f3}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[P_stVIO:=stDebugColumnVIO;]]></ST>
        </Implementation>
      </Get>
      <Set Name="Set" Id="{d07bb929-2830-44a7-941d-29a442544d36}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[stDebugColumnVIO:=P_stVIO;]]></ST>
        </Implementation>
      </Set>
    </Property>
    <LineIds Name="FB_DebugColumn">
      <LineId Id="9" Count="0" />
      <LineId Id="110" Count="1" />
      <LineId Id="103" Count="0" />
      <LineId Id="112" Count="0" />
      <LineId Id="115" Count="2" />
      <LineId Id="123" Count="0" />
      <LineId Id="107" Count="0" />
      <LineId Id="102" Count="0" />
      <LineId Id="22" Count="0" />
      <LineId Id="108" Count="0" />
      <LineId Id="61" Count="0" />
      <LineId Id="56" Count="0" />
    </LineIds>
    <LineIds Name="FB_DebugColumn.AlarmUpdate">
      <LineId Id="6" Count="0" />
      <LineId Id="107" Count="1" />
      <LineId Id="133" Count="0" />
      <LineId Id="132" Count="0" />
      <LineId Id="109" Count="0" />
      <LineId Id="103" Count="0" />
      <LineId Id="110" Count="1" />
      <LineId Id="105" Count="0" />
      <LineId Id="113" Count="0" />
      <LineId Id="115" Count="0" />
      <LineId Id="117" Count="0" />
      <LineId Id="130" Count="1" />
      <LineId Id="121" Count="0" />
      <LineId Id="123" Count="2" />
      <LineId Id="169" Count="0" />
      <LineId Id="176" Count="5" />
      <LineId Id="126" Count="0" />
      <LineId Id="112" Count="0" />
      <LineId Id="134" Count="1" />
      <LineId Id="106" Count="0" />
      <LineId Id="136" Count="2" />
      <LineId Id="145" Count="14" />
      <LineId Id="257" Count="0" />
      <LineId Id="161" Count="2" />
      <LineId Id="160" Count="0" />
      <LineId Id="256" Count="0" />
      <LineId Id="165" Count="2" />
      <LineId Id="164" Count="0" />
      <LineId Id="255" Count="0" />
      <LineId Id="252" Count="2" />
      <LineId Id="251" Count="0" />
      <LineId Id="143" Count="0" />
      <LineId Id="199" Count="4" />
      <LineId Id="189" Count="1" />
      <LineId Id="210" Count="0" />
      <LineId Id="207" Count="0" />
      <LineId Id="209" Count="0" />
      <LineId Id="5" Count="0" />
      <LineId Id="217" Count="0" />
      <LineId Id="229" Count="1" />
      <LineId Id="228" Count="0" />
      <LineId Id="218" Count="9" />
      <LineId Id="216" Count="0" />
      <LineId Id="237" Count="1" />
      <LineId Id="242" Count="3" />
      <LineId Id="258" Count="0" />
      <LineId Id="241" Count="0" />
      <LineId Id="240" Count="0" />
      <LineId Id="239" Count="0" />
      <LineId Id="236" Count="0" />
    </LineIds>
    <LineIds Name="FB_DebugColumn.Conversion">
      <LineId Id="409" Count="1" />
      <LineId Id="407" Count="0" />
      <LineId Id="180" Count="0" />
      <LineId Id="397" Count="0" />
      <LineId Id="381" Count="0" />
      <LineId Id="13" Count="5" />
      <LineId Id="182" Count="0" />
      <LineId Id="396" Count="0" />
      <LineId Id="382" Count="0" />
      <LineId Id="21" Count="5" />
      <LineId Id="184" Count="0" />
      <LineId Id="398" Count="0" />
      <LineId Id="383" Count="0" />
      <LineId Id="29" Count="5" />
      <LineId Id="186" Count="0" />
      <LineId Id="399" Count="0" />
      <LineId Id="384" Count="0" />
      <LineId Id="37" Count="5" />
      <LineId Id="188" Count="0" />
      <LineId Id="400" Count="0" />
      <LineId Id="385" Count="0" />
      <LineId Id="45" Count="5" />
      <LineId Id="190" Count="0" />
      <LineId Id="401" Count="0" />
      <LineId Id="386" Count="0" />
      <LineId Id="53" Count="6" />
      <LineId Id="211" Count="0" />
      <LineId Id="387" Count="0" />
      <LineId Id="213" Count="5" />
      <LineId Id="204" Count="0" />
      <LineId Id="192" Count="0" />
      <LineId Id="388" Count="0" />
      <LineId Id="61" Count="5" />
      <LineId Id="195" Count="0" />
      <LineId Id="402" Count="0" />
      <LineId Id="389" Count="0" />
      <LineId Id="69" Count="6" />
      <LineId Id="163" Count="1" />
      <LineId Id="167" Count="5" />
      <LineId Id="165" Count="0" />
      <LineId Id="404" Count="0" />
      <LineId Id="76" Count="0" />
      <LineId Id="406" Count="0" />
      <LineId Id="405" Count="0" />
      <LineId Id="77" Count="47" />
      <LineId Id="223" Count="6" />
      <LineId Id="219" Count="0" />
      <LineId Id="125" Count="15" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="FB_DebugColumn.IOMapping">
      <LineId Id="214" Count="10" />
      <LineId Id="54" Count="0" />
      <LineId Id="123" Count="11" />
      <LineId Id="230" Count="0" />
      <LineId Id="232" Count="2" />
      <LineId Id="231" Count="0" />
      <LineId Id="204" Count="0" />
      <LineId Id="108" Count="0" />
      <LineId Id="120" Count="2" />
      <LineId Id="254" Count="0" />
      <LineId Id="53" Count="0" />
      <LineId Id="237" Count="0" />
      <LineId Id="38" Count="0" />
      <LineId Id="238" Count="2" />
      <LineId Id="248" Count="0" />
      <LineId Id="243" Count="0" />
      <LineId Id="245" Count="2" />
      <LineId Id="244" Count="0" />
      <LineId Id="241" Count="1" />
      <LineId Id="162" Count="0" />
      <LineId Id="167" Count="0" />
      <LineId Id="179" Count="0" />
      <LineId Id="172" Count="0" />
      <LineId Id="188" Count="0" />
      <LineId Id="164" Count="0" />
      <LineId Id="144" Count="1" />
      <LineId Id="147" Count="2" />
      <LineId Id="151" Count="1" />
      <LineId Id="143" Count="0" />
      <LineId Id="92" Count="0" />
      <LineId Id="90" Count="1" />
      <LineId Id="34" Count="0" />
      <LineId Id="28" Count="0" />
      <LineId Id="27" Count="0" />
      <LineId Id="29" Count="3" />
      <LineId Id="191" Count="0" />
      <LineId Id="235" Count="0" />
    </LineIds>
    <LineIds Name="FB_DebugColumn.Logic_opDBColumnPCWValve">
      <LineId Id="38" Count="35" />
      <LineId Id="11" Count="0" />
      <LineId Id="96" Count="0" />
      <LineId Id="99" Count="0" />
      <LineId Id="104" Count="3" />
      <LineId Id="118" Count="0" />
      <LineId Id="100" Count="1" />
      <LineId Id="108" Count="0" />
      <LineId Id="112" Count="0" />
      <LineId Id="109" Count="1" />
      <LineId Id="119" Count="0" />
      <LineId Id="102" Count="0" />
      <LineId Id="97" Count="1" />
      <LineId Id="12" Count="0" />
      <LineId Id="19" Count="18" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="FB_DebugColumn.P_stVIO.Get">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_DebugColumn.P_stVIO.Set">
      <LineId Id="2" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>