<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4022.18">
  <POU Name="FB_DebugStationProcess" Id="{1e3041b5-8cf3-431f-8c7e-57cf6c8b5619}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK FB_DebugStationProcess
VAR_INPUT
END_VAR
VAR_OUTPUT
END_VAR
VAR

	i:INT;
	//For testing purpose only
	//bShuttleMoveInOut: BOOL;
	//bInitialize: BOOL;
	//bAlarmClear : BOOL;
	bLogEveryStep : BOOL:=TRUE;
	
	//*****************
	rtTCShuttleStart: R_TRIG;
	//stTCShuttleSeqParam : ST_FlyoverSeqParam;
	iSeqCase: INT:=1;
	iSeqStatus: INT; //To defind current status of subsequence 
	bError: BOOL;
	sMessage : STRING;
	sAlarmID: STRING(40);
	sModuleID: STRING(INT#40);
	sDebugSource: STRING(INT#50);
	bExecute: BOOL;
	iErrorID: UDINT;
	
	fbFormat   : FB_FormatString;
	sPrevMsg: STRING;
	sCurrentMsg:STRING;
	iPrevLevel:INT;
	iEventName : E_EventName;
	sLogName : STRING;
	iSendEvent :INT;
	sFailReason: STRING;
	DIFU:R_TRIG;
	
	CmdEmpty: ST_Command;
	EmptyEvents: ST_Event; // to Clear the event array[n]
	DoorRecEventName:E_EventName;
	DoorRecLogName	:STRING;
	iSendDoorRecoveryEvent:INT;
	sOtherFailReason:STRING;
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[stDebugStation.fbDBStnSeq.M_nCyclic();

bExecute :=	
			stDebugStation.stGblDBStnParam.bInitialise 				OR      //  SystemReset
			stDebugStation.stGblDBStnParam.bCancel 					OR      //  SlideOutCancel
			stDebugStation.stGblDBStnParam.bBufClear		 		OR      //  CancelW/O Module ID
			stDebugStation.stGblDBStnParam.bAlarmClear 				OR      
			stDebugStation.stGblDBStnParam.bAP240ACPowerOff 		OR      //AP240AC
			stDebugStation.stGblDBStnParam.bAP240ACPowerOn 			OR      //AP240AC
			stDebugStation.stGblDBStnParam.bAP240ACPowerAuto		OR  	//AP240AC
			stDebugStation.stGblDBStnParam.bSecondary24VPowerOff	OR
			stDebugStation.stGblDBStnParam.bSecondary24VPowerOn;    
			
rtTCShuttleStart(CLK:=bExecute , Q=> );
IF rtTCShuttleStart.Q THEN
	iSeqCase									:= 1;
END_IF

sCurrentMsg										:= '';
sCurrentMsg 									:= CONCAT('Debug Station',stDebugStation.fbDBStnSeq.P_sMessage);

IF sCurrentMsg <> sPrevMsg AND stDebugStation.fbDBStnSeq.P_sMessage<>'' THEN
	sPrevMsg 									:= sCurrentMsg;
	Logging.fbDebugLog.P_sModule				:= 'Debug Station';
	Logging.fbDebugLog.M_nLogger(iLogLevel:= 1, sSource:= sDebugSource, sMessage:= sCurrentMsg);
END_IF

IF NOT bExecute THEN
	RETURN;
END_IF

//SlideOutRetry
IF stDebugStation.stGblDBStnParam.bResume  THEN
	iSeqCase												:= E_ProcessStep.eDataInput;//iSeqCase:=3
	stDebugStation.stGblDBStnParam.bResume					:= FALSE;
END_IF


IF stDebugStation.stGblDBStnParam.bInitialise 				THEN	sDebugSource := 'Initialise';
ELSIF stDebugStation.stGblDBStnParam.bCancel 				THEN	sDebugSource := 'Cancel';
ELSIF stDebugStation.stGblDBStnParam.bAP240ACPowerOff  		THEN	sDebugSource := 'AP240ACPowerOff';
ELSIF stDebugStation.stGblDBStnParam.bAP240ACPowerOn  		THEN	sDebugSource := 'AP240ACPowerOn';
ELSIF stDebugStation.stGblDBStnParam.bAP240ACPowerAuto		THEN	sDebugSource := 'AP240ACPowerAuto';
ELSIF stDebugStation.stGblDBStnParam.bSecondary24VPowerOff 	THEN	sDebugSource := 'Secondary24VPowerOff';
ELSIF stDebugStation.stGblDBStnParam.bSecondary24VPowerOn 	THEN	sDebugSource := 'Secondary24VPowerOn';
END_IF

sMessage := CONCAT(sDebugSource,stDebugStation.fbDBStnSeq.P_sMessage);

CASE iSeqCase OF
	E_ProcessStep.eSeqReset://1: //Sequence Reset
		stDebugStation.fbDBStnSeq.M_nReset(bExecute:=TRUE );
		iSeqCase:=iSeqCase+1;
	
	E_ProcessStep.eDataInput://2: //Data input
	
		stDebugStation.fbDBStnSeq.M_nReset(bExecute:=FALSE );
		stDebugStation.fbDBStnSeq.P_stParam 									:= stDebugStation.stGblDBStnParam;
		
		IF NOT stDebugStation.fbDBStnSeq.P_bReset THEN
			iSeqCase															:= E_ProcessStep.eExecuting;
		END_IF
		
	E_ProcessStep.eExecuting://3: //Start execute
	
		IF stDebugStation.stGblDBStnParam.bBufClear THEN	//BufferClear
			iSeqStatus 															:= 10;
		
		ELSIF stDebugStation.stGblDBStnParam.bAlarmClear THEN	//Alarm Reset
			iSeqCase															:= E_ProcessStep.eSeqError;
		
		ELSIF stDebugStation.stGblDBStnParam.bInitialise THEN	//System Reset (Initialize)
			stDebugStation.stGblDBStnParam.iProcessState 						:= E_ProcessState.eINIT;
			iSeqStatus 															:= stDebugStation.fbDBStnSeq.M_nSystemReset();
			
		ELSIF stDebugStation.stGblDBStnParam.bAP240ACPowerOff OR stDebugStation.stGblDBStnParam.bAP240ACPowerOn OR stDebugStation.stGblDBStnParam.bAP240ACPowerAuto THEN	// AP Power
			stDebugStation.stGblDBStnParam.iProcessState 						:= E_ProcessState.eLOADG;
			iSeqStatus 															:= stDebugStation.fbDBStnSeq.M_nDPSPowerOnOff();
			
		ELSIF stDebugStation.stGblDBStnParam.bSecondary24VPowerOff OR stDebugStation.stGblDBStnParam.bSecondary24VPowerOn THEN
			stDebugStation.stGblDBStnParam.iProcessState 						:= E_ProcessState.eLOADG;
			iSeqStatus 															:= stDebugStation.fbDBStnSeq.M_RemoteSecondary24VPowerOnOff();
		END_IF
		
		IF iSeqStatus=10 THEN
			iSeqCase																:= E_ProcessStep.eSeqCompleted; //iSeqCase:=4;
			
		ELSIF iSeqStatus=99 AND NOT stDebugStation.stGblDBStnParam.bAlarmClear THEN
			//***GetAlarmBitForFBError***//
			stDebugStation.stGblDBStnParam.iAlarmID 								:= stGblDbStnVIO.iAlarmCode;
			//***TriggerAlarmBitForFBError***//
			IF stDebugStation.stGblDBStnParam.iAlarmID<100 AND stDebugStation.stGblDBStnParam.iAlarmID>20 THEN
				ALM_DBSTN.AlarmID[stDebugStation.stGblDBStnParam.iAlarmID] 			:= TRUE;
			END_IF
			IF stDebugStation.fbDBStnSeq.P_nErrorID<100 AND stDebugStation.fbDBStnSeq.P_nErrorID>20 THEN
				ALM_DBSTN.AlarmID[stDebugStation.fbDBStnSeq.P_nErrorID] 			:= TRUE;
			END_IF
			
			//Seq Alm Fail Reason
			stDebugStation.stGblDBStnParam.sFailReason 								:= stDebugStation.fbDBStnSeq.P_sMessage;	
			stDebugStation.stGblDBStnParam.iProcessState 							:= E_ProcessState.eALPAUSED;
			iSeqCase																:= E_ProcessStep.eSeqError;//iSeqCase:=5;
			stDebugStation.stGblDBStnParam.bAlarmOccur 								:= TRUE;
			
			iSendEvent :=2;
			JMP iSendEvent;
		
		ELSIF iSeqStatus=20 THEN
			
			//***GetAlarmBitForFBError***//
			stDebugStation.stGblDBStnParam.iAlarmID 								:= stGblDbStnVIO.iAlarmCode; //P_nErrorID => Motor Error
			//***TriggerAlarmBitForFBError***//
			IF stDebugStation.stGblDBStnParam.iAlarmID<100 AND stDebugStation.stGblDBStnParam.iAlarmID>20 THEN
				ALM_DBSTN.AlarmID[stDebugStation.stGblDBStnParam.iAlarmID] 			:= TRUE;
			END_IF
			
			sOtherFailReason									:= '';
			
			FOR i:=1 TO NO_OF_DBCOL_ALARM DO
				IF ALM_DCCOL.AlarmID[i]  THEN
					IF sOtherFailReason='' THEN 
						sOtherFailReason						:= DBStnSysAlmText[i];	
						CONTINUE;				
					END_IF
					sOtherFailReason							:= CONCAT(CONCAT(sOtherFailReason,', '), DBStnSysAlmText[i]);
				END_IF
			END_FOR
			
			FOR i:=1 TO NO_OF_TII_SENSOR DO
				IF ALMTC.Level[1].AlarmID[i] THEN
					IF sOtherFailReason='' THEN 
						sOtherFailReason						:= TIIAlmText[i];	
						CONTINUE;				
					END_IF
					sOtherFailReason							:= CONCAT(CONCAT(sOtherFailReason,', '),TIIAlmText[i]);
				END_IF
			END_FOR
			
			stDebugStation.stGblDBStnParam.sFailReason 			:= sOtherFailReason;	
			stDebugStation.stGblDBStnParam.iProcessState 		:= E_ProcessState.eALPAUSED;
			iSeqCase											:= E_ProcessStep.eSeqError;//iSeqCase:=5;
			
			iSendEvent 											:= 2;
			JMP iSendEvent;
		END_IF
	
	E_ProcessStep.eSeqCompleted://4: //Done
		stDebugStation.fbDBStnSeq.P_stParam 					:= stDebugStation.stGblDBStnParam;
		
		stDebugStation.stGblDBStnParam.iAlarmID 				:= 0;
		stDebugStation.stGblDBStnParam.sFailReason 				:= '';
		stDebugStation.fbDBStnSeq.P_stParam 					:= stDebugStation.stGblDBStnParam;
	
		stDebugStation.stGblDBStnParam.iProcessState 			:= E_ProcessState.eAWAITGCMD;
		IF stDebugStation.stGblDBStnParam.bCancel THEN
			stDebugStation.stGblDBStnParam.bCancel				:= FALSE;
		ELSE
		
		iSendEvent 												:= 1;
		JMP iSendEvent;
		END_IF
		
	E_ProcessStep.eSeqError://5:
		//Alarm Reset
		IF stDebugStation.stGblDBStnParam.bAlarmClear THEN
			stDebugStation.fbDBStnSeq.P_ErrClear				:= TRUE;
			stDebugStation.stGblDBStnParam.bAlarmOccur 			:= FALSE;
			stDebugStation.stGblDBStnParam.bAlarmClear			:= FALSE;
			stDebugStation.stGblDBStnParam.iProcessState 		:= E_ProcessState.ePAUSE;
			
		//Cancel+Retry
		ELSIF stDebugStation.stGblDBStnParam.iProcessState=E_ProcessState.ePAUSE THEN
			stDebugStation.fbDBStnSeq.P_stParam 				:= stDebugStation.stGblDBStnParam;//pass in init for init/doorrecovery, retry
			
			IF 	stDebugStation.stGblDBStnParam.bInitialise 	OR 
				stDebugStation.stGblDBStnParam.bCancel 		OR
				stDebugStation.stGblDBStnParam.bBufClear	 THEN
				iSeqCase										:= E_ProcessStep.eSeqReset;
			END_IF
		END_IF	
		
		//Reset Non_RetryCmd if Error Occured
		IF stDebugStation.stGblDBStnParam.bInitialise 			THEN stDebugStation.stGblDBStnParam.bInitialise					:= FALSE; END_IF	
		IF stDebugStation.stGblDBStnParam.bAP240ACPowerOn 		THEN stDebugStation.stGblDBStnParam.bAP240ACPowerOn 	 		:= FALSE; END_IF
		IF stDebugStation.stGblDBStnParam.bAP240ACPowerOff 		THEN stDebugStation.stGblDBStnParam.bAP240ACPowerOff 	 		:= FALSE; END_IF
		IF stDebugStation.stGblDBStnParam.bAP240ACPowerAuto 	THEN stDebugStation.stGblDBStnParam.bAP240ACPowerAuto 			:= FALSE; END_IF
		IF stDebugStation.stGblDBStnParam.bSecondary24VPowerOff THEN stDebugStation.stGblDBStnParam.bSecondary24VPowerOff		:= FALSE; END_IF
		IF stDebugStation.stGblDBStnParam.bSecondary24VPowerOn 	THEN stDebugStation.stGblDBStnParam.bSecondary24VPowerOn		:= FALSE; END_IF
END_CASE

//Send event to TA
iSendEvent :
	IF iSendEvent<>0 THEN
		IF (NOT stDebugStation.stGblDBStnParam.bCancel) AND (NOT stDebugStation.stGblDBStnParam.bBufClear) THEN 
			CmdAndEventProcess.fbCmdAndEventUpdate.M_nCmdtoEvent(
				eCmd2Event_TaskName					:= stDebugStation.stGblDBStnParam.stTACommand.eTaskName, 
				iCmd2Event_Result					:= iSendEvent,
				eCmd2Event_EventName				:= iEventName, 
				sCmd2Event_EventName				:= sLogName
			);
			sFailReason 							:= stDebugStation.stGblDBStnParam.sFailReason;                
		
			CmdAndEventProcess.fbCmdAndEventUpdate.M_AddEvent(
				sLogName							:= sLogName, 
				eEventName							:= iEventName, 
				eModuleID							:= stDebugStation.stGblDBStnParam.stTACommand.eModuleID, 
				iParam								:= stDebugStation.stGblDBStnParam.stTACommand.iParam,
				sParam								:= stDebugStation.stGblDBStnParam.stTACommand.sParam, 
				bParam								:= stDebugStation.stGblDBStnParam.stTACommand.bParam, 
				dParam								:= stDebugStation.stGblDBStnParam.stTACommand.dParam,
				sFailReason							:= sFailReason
			);
			
			IF iSendEvent=1 THEN 	
				stDebugStation.stGblDBStnParam.stTACommand 			:= CmdEmpty; 	
			END_IF
		END_IF
		//stDebugStation.stGblDBStnParam.bInitialise:= FALSE;
		IF iSendEvent=1 THEN
			stDebugStation.stGblDBStnParam.bInitialise				:= 			//  SystemReset
			stDebugStation.stGblDBStnParam.bCancel					:= 			//  SlideOutCancel
			stDebugStation.stGblDBStnParam.bBufClear 				:=			//  CancelW/O Module ID
			stDebugStation.stGblDBStnParam.bAP240ACPowerOff 		:=			//AP240AC
			stDebugStation.stGblDBStnParam.bAP240ACPowerOn 			:=			//AP240AC
			stDebugStation.stGblDBStnParam.bAP240ACPowerAuto 		:=			//AP240AC
			stDebugStation.stGblDBStnParam.bSecondary24VPowerOn		:=
			stDebugStation.stGblDBStnParam.bSecondary24VPowerOff	:= FALSE;
	
			stDebugStation.stGblDBStnParam.iProcessState			:= E_ProcessState.eAWAITGCMD;
		END_IF
	END_IF
	iSendEvent :=0;
]]></ST>
    </Implementation>
    <LineIds Name="FB_DebugStationProcess">
      <LineId Id="22" Count="0" />
      <LineId Id="41" Count="0" />
      <LineId Id="45" Count="4" />
      <LineId Id="51" Count="2" />
      <LineId Id="588" Count="1" />
      <LineId Id="587" Count="0" />
      <LineId Id="58" Count="2" />
      <LineId Id="67" Count="3" />
      <LineId Id="525" Count="0" />
      <LineId Id="72" Count="0" />
      <LineId Id="74" Count="0" />
      <LineId Id="76" Count="0" />
      <LineId Id="78" Count="12" />
      <LineId Id="98" Count="1" />
      <LineId Id="101" Count="0" />
      <LineId Id="103" Count="0" />
      <LineId Id="105" Count="0" />
      <LineId Id="107" Count="0" />
      <LineId Id="590" Count="0" />
      <LineId Id="593" Count="0" />
      <LineId Id="118" Count="11" />
      <LineId Id="132" Count="0" />
      <LineId Id="608" Count="0" />
      <LineId Id="133" Count="13" />
      <LineId Id="151" Count="0" />
      <LineId Id="156" Count="1" />
      <LineId Id="164" Count="1" />
      <LineId Id="596" Count="3" />
      <LineId Id="178" Count="1" />
      <LineId Id="182" Count="1" />
      <LineId Id="607" Count="0" />
      <LineId Id="186" Count="12" />
      <LineId Id="200" Count="1" />
      <LineId Id="480" Count="0" />
      <LineId Id="213" Count="13" />
      <LineId Id="606" Count="0" />
      <LineId Id="227" Count="8" />
      <LineId Id="605" Count="0" />
      <LineId Id="236" Count="12" />
      <LineId Id="250" Count="0" />
      <LineId Id="261" Count="2" />
      <LineId Id="291" Count="11" />
      <LineId Id="314" Count="7" />
      <LineId Id="326" Count="0" />
      <LineId Id="328" Count="8" />
      <LineId Id="338" Count="2" />
      <LineId Id="342" Count="2" />
      <LineId Id="347" Count="4" />
      <LineId Id="372" Count="0" />
      <LineId Id="600" Count="0" />
      <LineId Id="373" Count="4" />
      <LineId Id="379" Count="1" />
      <LineId Id="538" Count="4" />
      <LineId Id="381" Count="10" />
      <LineId Id="528" Count="1" />
      <LineId Id="393" Count="0" />
      <LineId Id="530" Count="0" />
      <LineId Id="532" Count="0" />
      <LineId Id="394" Count="0" />
      <LineId Id="536" Count="0" />
      <LineId Id="400" Count="5" />
      <LineId Id="410" Count="0" />
      <LineId Id="604" Count="0" />
      <LineId Id="602" Count="0" />
      <LineId Id="411" Count="3" />
      <LineId Id="527" Count="0" />
      <LineId Id="17" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>