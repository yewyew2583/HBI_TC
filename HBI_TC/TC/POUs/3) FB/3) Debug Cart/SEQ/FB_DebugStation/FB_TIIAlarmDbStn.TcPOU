<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4022.18">
  <POU Name="FB_TIIAlarmDbStn" Id="{1f1c0a9a-a15d-4901-bcd2-0649d00aa61a}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK FB_TIIAlarmDbStn
VAR_INPUT
	vIO 					: ST_DebugStation_VIO;
	NoOfTIIAlm 				: INT	:= NO_OF_TII_SENSOR;
	iLevel 					: INT	:= 1;
END_VAR
VAR_OUTPUT
	isTIIError				: BOOL;
END_VAR
VAR
	DIFU					: R_TRIG;
	tim 					: TON;
	delay 					: FB_Delay;
	tPOn					: BOOL;	//testerPowerOutoutOn after Delay
	dPOn					: BOOL; //dpsPwrbit after Delay
	bitNo					: INT;
	alarmReset				: BOOL;
	
	ArrAlmBitBefDelay 		: ARRAY[1..NO_OF_TII_SENSOR] OF BOOL;
	ArrAlmBitAftDelay 		: ARRAY[1..NO_OF_TII_SENSOR] OF BOOL;
	ArrAlarmKeepBit			: ARRAY[1..NO_OF_TII_SENSOR] OF BOOL;
	ArrDelayAlarm 			: ARRAY[1..NO_OF_TII_SENSOR] OF FB_AlarmDelay;
	Arr_ms 					: ARRAY[1..NO_OF_TII_SENSOR] OF INT;
	bTIIByPassArray			: ARRAY[1..NO_OF_TII_SENSOR] OF BOOL;
	i						: INT;
	bTest 					: BOOL;
END_VAR]]></Declaration>
    <Implementation>
      <ST><![CDATA[//<HMI_TII_Test>

	IF bHMITIIBypass THEN
		bTIIByPassArray:= stHMITIIByPassArray[iLevel].bHMITIIByPassArray;
		//FOR i:=1 TO NoOfTIIAlm DO
		//	bTIIByPassArray[i]:= NOT stHMITIIByPassArray[iLevel].bHMITIIByPassArray[i];
		//END_FOR
	ELSE
		FOR i:=1 TO NoOfTIIAlm DO
			//bTIIByPassArray[i]:=bEnableTIIAlarm;
			bTIIByPassArray[i]:=TC_ModuleState[iLevel].TCSite[1].TIERII = E_State.eEnabled;
		END_FOR
	END_IF
//</HMI_TII_Test>
//IF bTest THEN
AlarmUpdate(bENs:=bTIIByPassArray);
//END_IF
 
 ]]></ST>
    </Implementation>
    <Method Name="AlarmUpdate" Id="{df4f023a-29b0-4ee7-baee-77dc81ad8f78}">
      <Declaration><![CDATA[METHOD AlarmUpdate : BOOL
VAR
	i						: INT;
	j						: INT;
	_bError					: BOOL;
	iSysAlarmID 			: INT;
	e						: E_TIIAlarm;
	bTstOnCmd 				: BOOL;
	bChkTstOn 				: BOOL;
	
	bAPOnCmd				: BOOL;
	bChkAPOn 				: BOOL;
	//Condition
	lRt:BOOL;
	lEt:BOOL;;
END_VAR

VAR_INPUT
	bENs :ARRAY[1..NO_OF_TII_SENSOR] OF BOOL;
END_VAR

VAR_IN_OUT
	//ArrAlarmKeepBit:ST_AlarmTags;
END_VAR
VAR_OUTPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF iLevel=0 THEN
	RETURN;
END_IF

DIFU(CLK:=vIO.ipDBStnAPPowerOn);
tim(IN:=TRUE,PT:=INT_TO_TIME(1000));
tPOn :=	VIO.bTstDelInt;   //Delay and TesterPwrOnOutput
delay(msec:=100,in:=tPOn,out:=dPOn);

lRt:= FALSE; //:=AP_Deactuated(if AP Down Can Retract)
lEt:= FALSE;

//bTstOnCmd:=vIO.bDPSPowerOnOff;
//bChkTstOn:=vIO.bChkTesterOn;
bAPOnCmd:=vIO.bAP240ACPowerOnOff;
bChkAPOn:=vIO.bChkAP240On;

//<A_Alm_Rst For Door Open TII Alarm>
	IF ALMTC.Level[iLevel].AlarmID[E_TIIAlarm.ipAPPresentSensor] AND vIO.ipDBStnAPPresentSensor THEN
		ALMTC.Level[iLevel].AlarmID[E_TIIAlarm.ipAPPresentSensor] :=FALSE;
	END_IF
//</A_Alm_Rst For Door Open TII Alarm>

FOR i:=1 TO NoOfTIIAlm DO	
	CASE i OF
		E_TIIAlarm.ipAPPresentSensor	   	: e:=E_TIIAlarm.ipAPPresentSensor	   ; ArrAlmBitBefDelay[E_TIIAlarm.ipAPPresentSensor	   	   ]:=	NOT	vIO.ipDBStnAPPresentSensor	  				AND bENs[ 1] ; Arr_ms[e] := 500;  //TIIAlmText[e]:='AP_PresentSensor'  	;//****stTCVIO.iAlarmCode=  E_Alarm.ipAP_PresentSensor 	 ;
        E_TIIAlarm.ipAPPowerOn	 		    : e:=E_TIIAlarm.ipAPPowerOn 		   ; ArrAlmBitBefDelay[E_TIIAlarm.ipAPPowerOn 		   	   ]:=	NOT	vIO.ipDBStnAPPowerOn 	AND bChkAPOn 		AND bENs[ 2] ; Arr_ms[e] := 500;  //TIIAlmText[e]:='AP_PowerOn'	    	; 
	    E_TIIAlarm.ipAPReady				: e:=E_TIIAlarm.ipAPReady		       ; ArrAlmBitBefDelay[E_TIIAlarm.ipAPReady		       	   ]:=	NOT	vIO.ipDBStnAPReady	AND vIO.ipDBStnAPPresentSensor	AND bENs[ 3] ; Arr_ms[e] := 500;  //TIIAlmText[e]:='AP_Ready' 		    	;      
	    //E_TIIAlarm.ipAPDeactuatedPLC		: e:=E_TIIAlarm.ipAPDeactuatedPLC	   ; ArrAlmBitBefDelay[E_TIIAlarm.ipAPDeactuatedPLC	   	   ]:=	NOT	vIO.ipDBStnHandlerSafeToEnterPLC	  				AND bENs[ 4] ; Arr_ms[e] := 500;  (*TIIAlmText[e]:='AP_DeactuatedPLC' 		*);   
	    //E_TIIAlarm.ipAPDeactuatedHwr		: e:=E_TIIAlarm.ipAPDeactuatedHwr	   ; ArrAlmBitBefDelay[E_TIIAlarm.ipAPDeactuatedHwr	   	   ]:=	NOT	vIO.ipDBStnHandlerSafeToEnterHwr	  				AND bENs[ 5] ; Arr_ms[e] := 500;  (*TIIAlmText[e]:='AP_DeactuatedHwr' 		*); 
//	    E_TIIAlarm.ipCellFluidLeakage1		: e:=E_TIIAlarm.ipCellFluidLeakage1	   ; ArrAlmBitBefDelay[E_TIIAlarm.ipCellFluidLeakage1	   ]:=	vIO.ipCellFluidLeakage1	  					AND bENs[ 6] ; Arr_ms[e] := 500;  (*TIIAlmText[e]:='CellFluidLeakage1' 	*);   
//	    E_TIIAlarm.ipCellFluidLeakage2		: e:=E_TIIAlarm.ipCellFluidLeakage2	   ; ArrAlmBitBefDelay[E_TIIAlarm.ipCellFluidLeakage2	   ]:=	vIO.ipCellFluidLeakage2	  					AND bENs[ 7] ; Arr_ms[e] := 500;  (*TIIAlmText[e]:='CellFluidLeakage2' 	*);   
	    E_TIIAlarm.ipCellGroundFault 		: e:=E_TIIAlarm.ipCellGroundFault 	   ; ArrAlmBitBefDelay[E_TIIAlarm.ipCellGroundFault 	   ]:=		vIO.ipDBStnCellGroundFault 	  				AND bENs[ 8] ; Arr_ms[e] := 500;  //TIIAlmText[e]:='CellGroundFault'  		;
//        E_TIIAlarm.ipTesterPresent			: e:=E_TIIAlarm.ipTesterPresent	       ; ArrAlmBitBefDelay[E_TIIAlarm.ipTesterPresent	       ]:=	NOT	vIO.ipTesterPresent	 AND bTstOnCmd 		AND bENs[ 9] ; Arr_ms[e] := 500;  (*TIIAlmText[e]:='TesterPresent' 		*);
//        E_TIIAlarm.ipTesterPowerOn			: e:=E_TIIAlarm.ipTesterPowerOn	       ; ArrAlmBitBefDelay[E_TIIAlarm.ipTesterPowerOn	       ]:=	NOT	vIO.ipTesterPowerOn  	AND bChkTstOn 	AND bENs[10] ; Arr_ms[e] := 500;  (*TIIAlmText[e]:='TesterPowerOn' 		*);    
//        E_TIIAlarm.ipTesterReady			: e:=E_TIIAlarm.ipTesterReady	       ; ArrAlmBitBefDelay[E_TIIAlarm.ipTesterReady	           ]:=	NOT	vIO.ipTesterReady	     	 			AND bENs[11] ; Arr_ms[e] := 500;  (*TIIAlmText[e]:='TesterReady'       	*);   
//       	E_TIIAlarm.ipTCCellDoorClosed		: e:=E_TIIAlarm.ipTCCellDoorClosed	   ; ArrAlmBitBefDelay[E_TIIAlarm.ipTCCellDoorClosed	   ]:=	NOT	vIO.ipTCCellDoorClosed	  				AND bENs[12] ; Arr_ms[e] := 500;  (*TIIAlmText[e]:='TCCellDoorClosed' 		*);
//        E_TIIAlarm.ipTesterLatchesClosed	: e:=E_TIIAlarm.ipTesterLatchesClosed  ; ArrAlmBitBefDelay[E_TIIAlarm.ipTesterLatchesClosed    ]:=	NOT	vIO.ipTesterLatchesClosed AND bTstOnCmd AND bENs[13] ; Arr_ms[e] := 500;  (*TIIAlmText[e]:='TesterLatchesClosed' 	*);
//        E_TIIAlarm.ipTIUPresent			    : e:=E_TIIAlarm.ipTIUPresent	       ; ArrAlmBitBefDelay[E_TIIAlarm.ipTIUPresent	           ]:=	NOT	vIO.ipTIUPresent	      				AND bENs[14] ; Arr_ms[e] := 500;  (*TIIAlmText[e]:='TIUPresent' 	      	*);
//        E_TIIAlarm.ipTCDrawerCylExtendRS	: e:=E_TIIAlarm.ipTCDrawerCylExtendRS  ; ArrAlmBitBefDelay[E_TIIAlarm.ipTCDrawerCylExtendRS    ]:=		vIO.ipTCDrawerCylExtendRS	AND lEt		AND bENs[15] ; Arr_ms[e] := 500;  (*TIIAlmText[e]:='TCDrawerCylExtendRS' 	*);
//        E_TIIAlarm.ipTCDrawerCylRetractRS	: e:=E_TIIAlarm.ipTCDrawerCylRetractRS ; ArrAlmBitBefDelay[E_TIIAlarm.ipTCDrawerCylRetractRS   ]:=		vIO.ipTCDrawerCylRetractRS	AND	lRt		AND bENs[16] ; Arr_ms[e] := 500;  (*TIIAlmText[e]:='TCDrawerCylRetractRS'	*);
                   
                   
	               
		//E_Alarm.LibraryCylErr			:	ArrAlmBitBefDelay[E_Alarm.LibraryCylErr				]:=bError(*From Lib*) AND E_Alarm.LibraryCylErr == LibErrorID  ; ArrMiliSecond[E_Alarm.LibraryCylErr   ] := 0;		
	
	END_CASE

	//Delay Library Alm Bit
	ArrDelayAlarm[i](	alarmState			:= ArrAlmBitBefDelay[i],
						triggerAlarmState	=> ArrAlmBitAftDelay[i],
						alarmResetTimer		:= alarmReset,
						msec				:= Arr_ms[i]);	//DelayAlmBit
	

	IF ArrAlmBitAftDelay[i] THEN					//realtime IO update array
		//stAlmMod.Level[iLevel].AlarmID[i]:=TRUE;
		ALMTC.Level[iLevel].AlarmID[i]:=TRUE;
	ELSE
		//TIIAlmText[i]:='';  
	END_IF		
		//_bError := _bError OR stAlmMod.Level[iLevel].AlarmID[i];
		_bError := _bError OR ALMTC.Level[iLevel].AlarmID[i];
	
END_FOR
isTIIError := _bError ;  //bError refers to system Error;

(*
//Alarm Reset ===========================================================================
IF almRset THEN
	IF ArrAlmSubModule.AlarmSubmodule[iSubMod].ArrAlarmKeepBit[bitNo] THEN
		ArrAlmSubModule.AlarmSubmodule[iSubMod].ArrAlarmKeepBit[bitNo] := FALSE;
	END_IF
END_IF
//=======================================================================================
*)]]></ST>
      </Implementation>
    </Method>
    <Property Name="P_ErrClear" Id="{400cb5c4-2dc6-4fab-b5e3-d1a6a6655309}">
      <Declaration><![CDATA[PROPERTY P_ErrClear : BOOL]]></Declaration>
      <Get Name="Get" Id="{e7f3b0b1-d5ff-4651-92e7-f2b82d74132a}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[]]></ST>
        </Implementation>
      </Get>
      <Set Name="Set" Id="{ecaf4f2d-d579-4242-ac6c-78cd914d372d}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[alarmReset	:= P_ErrClear;]]></ST>
        </Implementation>
      </Set>
    </Property>
    <LineIds Name="FB_TIIAlarmDbStn">
      <LineId Id="124" Count="0" />
      <LineId Id="134" Count="0" />
      <LineId Id="9" Count="0" />
      <LineId Id="169" Count="0" />
      <LineId Id="202" Count="0" />
      <LineId Id="170" Count="0" />
      <LineId Id="168" Count="0" />
      <LineId Id="127" Count="0" />
      <LineId Id="130" Count="1" />
      <LineId Id="236" Count="0" />
      <LineId Id="128" Count="0" />
      <LineId Id="120" Count="0" />
      <LineId Id="132" Count="1" />
      <LineId Id="118" Count="0" />
      <LineId Id="88" Count="0" />
      <LineId Id="57" Count="0" />
      <LineId Id="27" Count="0" />
    </LineIds>
    <LineIds Name="FB_TIIAlarmDbStn.AlarmUpdate">
      <LineId Id="140" Count="1" />
      <LineId Id="504" Count="0" />
      <LineId Id="535" Count="0" />
      <LineId Id="338" Count="0" />
      <LineId Id="364" Count="0" />
      <LineId Id="363" Count="0" />
      <LineId Id="339" Count="0" />
      <LineId Id="337" Count="0" />
      <LineId Id="143" Count="0" />
      <LineId Id="335" Count="0" />
      <LineId Id="562" Count="0" />
      <LineId Id="440" Count="0" />
      <LineId Id="449" Count="0" />
      <LineId Id="474" Count="1" />
      <LineId Id="604" Count="4" />
      <LineId Id="603" Count="0" />
      <LineId Id="576" Count="0" />
      <LineId Id="145" Count="0" />
      <LineId Id="148" Count="0" />
      <LineId Id="279" Count="2" />
      <LineId Id="152" Count="4" />
      <LineId Id="304" Count="2" />
      <LineId Id="309" Count="2" />
      <LineId Id="415" Count="1" />
      <LineId Id="312" Count="1" />
      <LineId Id="157" Count="1" />
      <LineId Id="161" Count="1" />
      <LineId Id="177" Count="2" />
      <LineId Id="635" Count="0" />
      <LineId Id="663" Count="0" />
      <LineId Id="636" Count="0" />
      <LineId Id="180" Count="0" />
      <LineId Id="182" Count="1" />
      <LineId Id="232" Count="0" />
      <LineId Id="390" Count="0" />
      <LineId Id="282" Count="1" />
      <LineId Id="187" Count="0" />
      <LineId Id="241" Count="0" />
      <LineId Id="391" Count="0" />
      <LineId Id="190" Count="0" />
      <LineId Id="202" Count="4" />
      <LineId Id="209" Count="5" />
      <LineId Id="120" Count="0" />
    </LineIds>
    <LineIds Name="FB_TIIAlarmDbStn.P_ErrClear.Get">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_TIIAlarmDbStn.P_ErrClear.Set">
      <LineId Id="2" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>